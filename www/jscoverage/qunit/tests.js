/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['qunit/tests.js']) {
  _$jscoverage['qunit/tests.js'] = [];
  _$jscoverage['qunit/tests.js'][4] = 0;
  _$jscoverage['qunit/tests.js'][5] = 0;
  _$jscoverage['qunit/tests.js'][7] = 0;
  _$jscoverage['qunit/tests.js'][8] = 0;
  _$jscoverage['qunit/tests.js'][9] = 0;
  _$jscoverage['qunit/tests.js'][10] = 0;
  _$jscoverage['qunit/tests.js'][12] = 0;
  _$jscoverage['qunit/tests.js'][13] = 0;
  _$jscoverage['qunit/tests.js'][16] = 0;
  _$jscoverage['qunit/tests.js'][17] = 0;
  _$jscoverage['qunit/tests.js'][18] = 0;
  _$jscoverage['qunit/tests.js'][20] = 0;
  _$jscoverage['qunit/tests.js'][23] = 0;
  _$jscoverage['qunit/tests.js'][26] = 0;
  _$jscoverage['qunit/tests.js'][27] = 0;
  _$jscoverage['qunit/tests.js'][28] = 0;
  _$jscoverage['qunit/tests.js'][30] = 0;
  _$jscoverage['qunit/tests.js'][31] = 0;
  _$jscoverage['qunit/tests.js'][36] = 0;
  _$jscoverage['qunit/tests.js'][42] = 0;
  _$jscoverage['qunit/tests.js'][43] = 0;
  _$jscoverage['qunit/tests.js'][44] = 0;
  _$jscoverage['qunit/tests.js'][45] = 0;
  _$jscoverage['qunit/tests.js'][47] = 0;
  _$jscoverage['qunit/tests.js'][48] = 0;
  _$jscoverage['qunit/tests.js'][51] = 0;
  _$jscoverage['qunit/tests.js'][52] = 0;
  _$jscoverage['qunit/tests.js'][53] = 0;
  _$jscoverage['qunit/tests.js'][54] = 0;
  _$jscoverage['qunit/tests.js'][56] = 0;
  _$jscoverage['qunit/tests.js'][58] = 0;
  _$jscoverage['qunit/tests.js'][59] = 0;
  _$jscoverage['qunit/tests.js'][60] = 0;
  _$jscoverage['qunit/tests.js'][61] = 0;
  _$jscoverage['qunit/tests.js'][63] = 0;
  _$jscoverage['qunit/tests.js'][65] = 0;
  _$jscoverage['qunit/tests.js'][66] = 0;
  _$jscoverage['qunit/tests.js'][67] = 0;
  _$jscoverage['qunit/tests.js'][70] = 0;
  _$jscoverage['qunit/tests.js'][74] = 0;
  _$jscoverage['qunit/tests.js'][75] = 0;
  _$jscoverage['qunit/tests.js'][79] = 0;
  _$jscoverage['qunit/tests.js'][80] = 0;
  _$jscoverage['qunit/tests.js'][81] = 0;
  _$jscoverage['qunit/tests.js'][82] = 0;
  _$jscoverage['qunit/tests.js'][83] = 0;
  _$jscoverage['qunit/tests.js'][84] = 0;
  _$jscoverage['qunit/tests.js'][85] = 0;
  _$jscoverage['qunit/tests.js'][87] = 0;
  _$jscoverage['qunit/tests.js'][89] = 0;
  _$jscoverage['qunit/tests.js'][90] = 0;
  _$jscoverage['qunit/tests.js'][91] = 0;
  _$jscoverage['qunit/tests.js'][92] = 0;
  _$jscoverage['qunit/tests.js'][93] = 0;
  _$jscoverage['qunit/tests.js'][94] = 0;
  _$jscoverage['qunit/tests.js'][95] = 0;
  _$jscoverage['qunit/tests.js'][97] = 0;
  _$jscoverage['qunit/tests.js'][99] = 0;
  _$jscoverage['qunit/tests.js'][100] = 0;
  _$jscoverage['qunit/tests.js'][105] = 0;
  _$jscoverage['qunit/tests.js'][106] = 0;
  _$jscoverage['qunit/tests.js'][107] = 0;
  _$jscoverage['qunit/tests.js'][108] = 0;
  _$jscoverage['qunit/tests.js'][109] = 0;
  _$jscoverage['qunit/tests.js'][110] = 0;
  _$jscoverage['qunit/tests.js'][111] = 0;
  _$jscoverage['qunit/tests.js'][112] = 0;
  _$jscoverage['qunit/tests.js'][113] = 0;
  _$jscoverage['qunit/tests.js'][118] = 0;
  _$jscoverage['qunit/tests.js'][119] = 0;
  _$jscoverage['qunit/tests.js'][120] = 0;
  _$jscoverage['qunit/tests.js'][121] = 0;
  _$jscoverage['qunit/tests.js'][123] = 0;
  _$jscoverage['qunit/tests.js'][125] = 0;
  _$jscoverage['qunit/tests.js'][127] = 0;
  _$jscoverage['qunit/tests.js'][129] = 0;
  _$jscoverage['qunit/tests.js'][131] = 0;
  _$jscoverage['qunit/tests.js'][132] = 0;
  _$jscoverage['qunit/tests.js'][133] = 0;
  _$jscoverage['qunit/tests.js'][139] = 0;
  _$jscoverage['qunit/tests.js'][140] = 0;
  _$jscoverage['qunit/tests.js'][142] = 0;
  _$jscoverage['qunit/tests.js'][143] = 0;
  _$jscoverage['qunit/tests.js'][148] = 0;
  _$jscoverage['qunit/tests.js'][149] = 0;
  _$jscoverage['qunit/tests.js'][152] = 0;
  _$jscoverage['qunit/tests.js'][154] = 0;
  _$jscoverage['qunit/tests.js'][155] = 0;
  _$jscoverage['qunit/tests.js'][158] = 0;
  _$jscoverage['qunit/tests.js'][162] = 0;
  _$jscoverage['qunit/tests.js'][163] = 0;
  _$jscoverage['qunit/tests.js'][165] = 0;
  _$jscoverage['qunit/tests.js'][167] = 0;
  _$jscoverage['qunit/tests.js'][169] = 0;
  _$jscoverage['qunit/tests.js'][171] = 0;
  _$jscoverage['qunit/tests.js'][172] = 0;
  _$jscoverage['qunit/tests.js'][173] = 0;
  _$jscoverage['qunit/tests.js'][177] = 0;
  _$jscoverage['qunit/tests.js'][178] = 0;
  _$jscoverage['qunit/tests.js'][179] = 0;
  _$jscoverage['qunit/tests.js'][180] = 0;
  _$jscoverage['qunit/tests.js'][182] = 0;
  _$jscoverage['qunit/tests.js'][184] = 0;
  _$jscoverage['qunit/tests.js'][186] = 0;
  _$jscoverage['qunit/tests.js'][188] = 0;
  _$jscoverage['qunit/tests.js'][190] = 0;
  _$jscoverage['qunit/tests.js'][191] = 0;
  _$jscoverage['qunit/tests.js'][192] = 0;
}
_$jscoverage['qunit/tests.js'].source = ["<span class=\"c\">//http://net.tutsplus.com/tutorials/javascript-ajax/how-to-test-your-javascript-code-with-qunit/</span>","<span class=\"c\">//http://qunitjs.com/</span>","","<span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> QUnit <span class=\"k\">==</span><span class=\"s\">'undefined'</span><span class=\"k\">)</span>","\tQUnit <span class=\"k\">=</span> require<span class=\"k\">(</span><span class=\"s\">'qunit-cli'</span><span class=\"k\">);</span>","","module<span class=\"k\">(</span><span class=\"s\">'Compass Module'</span><span class=\"k\">);</span>","\ttest<span class=\"k\">(</span> <span class=\"s\">\"Constructor\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> htmlobject <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span><span class=\"s\">'compass'</span><span class=\"k\">);</span>","\t\t<span class=\"k\">var</span> compass <span class=\"k\">=</span> <span class=\"k\">new</span> Compass<span class=\"k\">(</span>htmlobject<span class=\"k\">);</span>","\t\t","\t\tnotEqual<span class=\"k\">(</span>undefined<span class=\"k\">,</span>compass<span class=\"k\">,</span> <span class=\"s\">\"Compass constructor does not return undefined\"</span> <span class=\"k\">);</span>","\t\tequal<span class=\"k\">(</span>htmlobject<span class=\"k\">,</span> compass<span class=\"k\">.</span>htmlObj<span class=\"k\">,</span><span class=\"s\">\"Compass object returns original html object\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","","\ttest<span class=\"k\">(</span> <span class=\"s\">\"Compass Toggling\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> htmlobject <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span><span class=\"s\">'compass'</span><span class=\"k\">);</span>","\t\t<span class=\"k\">var</span> compass <span class=\"k\">=</span> <span class=\"k\">new</span> Compass<span class=\"k\">(</span>htmlobject<span class=\"k\">);</span>","\t\t","\t\tequal<span class=\"k\">(</span>compass<span class=\"k\">.</span>status<span class=\"k\">(),</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"Compass is initially OFF\"</span> <span class=\"k\">);</span>","","","\t\t<span class=\"k\">var</span> old<span class=\"k\">=</span>htmlobject<span class=\"k\">.</span>onclick<span class=\"k\">;</span>","\t\t","\t\t","\t\thtmlobject<span class=\"k\">.</span>onclick<span class=\"k\">=</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\told<span class=\"k\">();</span>","\t\t\tequal<span class=\"k\">(</span>compass<span class=\"k\">.</span>status<span class=\"k\">(),</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"s\">\"Compass was toggled ON\"</span> <span class=\"k\">);</span>","","\t\t\told<span class=\"k\">();</span>","\t\t\tequal<span class=\"k\">(</span>compass<span class=\"k\">.</span>status<span class=\"k\">(),</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"... then OFF\"</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t","","","\t\thtmlobject<span class=\"k\">.</span>click<span class=\"k\">();</span>","","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t","","","module<span class=\"k\">(</span><span class=\"s\">'Legend Module'</span><span class=\"k\">);</span>","\ttest<span class=\"k\">(</span> <span class=\"s\">\"Constuctor\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> htmlobject <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span><span class=\"s\">'legend'</span><span class=\"k\">);</span>","\t\t<span class=\"k\">var</span> legend <span class=\"k\">=</span> <span class=\"k\">new</span> Legend<span class=\"k\">(</span>htmlobject<span class=\"k\">);</span>","","\t\tnotEqual<span class=\"k\">(</span>undefined<span class=\"k\">,</span>legend<span class=\"k\">,</span> <span class=\"s\">\"Legend constructor does not return undefined\"</span> <span class=\"k\">);</span>","\t\tequal<span class=\"k\">(</span>htmlobject<span class=\"k\">,</span> legend<span class=\"k\">.</span>htmlObj<span class=\"k\">,</span><span class=\"s\">\"Legend object turns original html object\"</span><span class=\"k\">);</span>","","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\ttest<span class=\"k\">(</span> <span class=\"s\">\"Legend is initially not collapsed\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> htmlobject <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span><span class=\"s\">'legend'</span><span class=\"k\">);</span>","\t\t<span class=\"k\">var</span> legendtitle <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span><span class=\"s\">'legendtitle'</span><span class=\"k\">);</span>","\t\t<span class=\"k\">var</span> legend <span class=\"k\">=</span> <span class=\"k\">new</span> Legend<span class=\"k\">(</span>htmlobject<span class=\"k\">);</span>","","\t\tequal<span class=\"k\">(</span>legend<span class=\"k\">.</span>htmlObj<span class=\"k\">.</span>style<span class=\"k\">.</span>height<span class=\"k\">,</span> <span class=\"s\">''</span><span class=\"k\">,</span> <span class=\"s\">\"Legend is initially NOT collapsed\"</span> <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\ttest<span class=\"k\">(</span> <span class=\"s\">\"Legend collapses on click\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> htmlobject <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementById<span class=\"k\">(</span><span class=\"s\">'legend'</span><span class=\"k\">);</span>","\t\t<span class=\"k\">var</span> legend <span class=\"k\">=</span> <span class=\"k\">new</span> Legend<span class=\"k\">(</span>htmlobject<span class=\"k\">);</span>","\t\t<span class=\"k\">var</span> legendtitle <span class=\"k\">=</span> legend<span class=\"k\">.</span>htmlObj<span class=\"k\">.</span>children<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">];</span>","","\t\t<span class=\"k\">var</span> old <span class=\"k\">=</span> legendtitle<span class=\"k\">.</span>onclick<span class=\"k\">;</span>","","\t\tlegendtitle<span class=\"k\">.</span>onclick<span class=\"k\">=</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","\t\t\told<span class=\"k\">();</span>","\t\t\tequal<span class=\"k\">(</span>legend<span class=\"k\">.</span>htmlObj<span class=\"k\">.</span>style<span class=\"k\">.</span>height<span class=\"k\">,</span> <span class=\"s\">'20px'</span><span class=\"k\">,</span> <span class=\"s\">\"Legend collapses on click\"</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","","\t\tlegendtitle<span class=\"k\">.</span>click<span class=\"k\">();</span>","","\t<span class=\"k\">}</span><span class=\"k\">);</span>","","module<span class=\"k\">(</span><span class=\"s\">'Map Module'</span><span class=\"k\">);</span>","\ttest<span class=\"k\">(</span> <span class=\"s\">\"Map.rad2zoom\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t","","\t\t","\t\tequal<span class=\"k\">(</span>Map<span class=\"k\">.</span>rad2zoom<span class=\"k\">(</span><span class=\"s\">.5</span><span class=\"k\">),</span><span class=\"s\">15</span> <span class=\"k\">,</span><span class=\"s\">\"Test Radius(.5) to Zoom(15)\"</span><span class=\"k\">);</span>","\t\tequal<span class=\"k\">(</span>Map<span class=\"k\">.</span>rad2zoom<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">),</span><span class=\"s\">14</span> <span class=\"k\">,</span><span class=\"s\">\"Test Radius(1) to Zoom(14)\"</span><span class=\"k\">);</span>","\t\tequal<span class=\"k\">(</span>Map<span class=\"k\">.</span>rad2zoom<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">),</span><span class=\"s\">13</span> <span class=\"k\">,</span><span class=\"s\">\"Test Radius(2) to Zoom(13)\"</span><span class=\"k\">);</span>","\t\tequal<span class=\"k\">(</span>Map<span class=\"k\">.</span>rad2zoom<span class=\"k\">(</span><span class=\"s\">4</span><span class=\"k\">),</span><span class=\"s\">12</span> <span class=\"k\">,</span><span class=\"s\">\"Test Radius(4) to Zoom(12)\"</span><span class=\"k\">);</span>","\t\tequal<span class=\"k\">(</span>Map<span class=\"k\">.</span>rad2zoom<span class=\"k\">(</span><span class=\"s\">8</span><span class=\"k\">),</span><span class=\"s\">11</span> <span class=\"k\">,</span><span class=\"s\">\"Test Radius(8) to Zoom(11)\"</span><span class=\"k\">);</span>","\t\tequal<span class=\"k\">(</span>Map<span class=\"k\">.</span>rad2zoom<span class=\"k\">(</span><span class=\"s\">16</span><span class=\"k\">),</span><span class=\"s\">10</span> <span class=\"k\">,</span><span class=\"s\">\"Test Radius(16) to Zoom(10)\"</span><span class=\"k\">);</span>","\t\tequal<span class=\"k\">(</span>Map<span class=\"k\">.</span>rad2zoom<span class=\"k\">(</span><span class=\"s\">32</span><span class=\"k\">),</span><span class=\"s\">9</span> <span class=\"k\">,</span><span class=\"s\">\"Test Radius(32) to Zoom(9)\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\ttest<span class=\"k\">(</span> <span class=\"s\">\"Map.zoom2rad\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t","\t\tequal<span class=\"k\">(</span>Map<span class=\"k\">.</span>zoom2rad<span class=\"k\">(</span><span class=\"s\">15</span><span class=\"k\">),</span> <span class=\"s\">.5</span><span class=\"k\">,</span> <span class=\"s\">\"Test Zoom(15) to Radius(.5)\"</span><span class=\"k\">);</span>","\t\tequal<span class=\"k\">(</span>Map<span class=\"k\">.</span>zoom2rad<span class=\"k\">(</span><span class=\"s\">14</span><span class=\"k\">),</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"Test Zoom(14) to Radius(1)\"</span><span class=\"k\">);</span>","\t\tequal<span class=\"k\">(</span>Map<span class=\"k\">.</span>zoom2rad<span class=\"k\">(</span><span class=\"s\">13</span><span class=\"k\">),</span> <span class=\"s\">2</span><span class=\"k\">,</span> <span class=\"s\">\"Test Zoom(13) to Radius(2)\"</span><span class=\"k\">);</span>","\t\tequal<span class=\"k\">(</span>Map<span class=\"k\">.</span>zoom2rad<span class=\"k\">(</span><span class=\"s\">12</span><span class=\"k\">),</span> <span class=\"s\">4</span><span class=\"k\">,</span> <span class=\"s\">\"Test Zoom(12) to Radius(4)\"</span><span class=\"k\">);</span>","\t\tequal<span class=\"k\">(</span>Map<span class=\"k\">.</span>zoom2rad<span class=\"k\">(</span><span class=\"s\">11</span><span class=\"k\">),</span> <span class=\"s\">8</span><span class=\"k\">,</span> <span class=\"s\">\"Test Zoom(11) to Radius(8)\"</span><span class=\"k\">);</span>","\t\tequal<span class=\"k\">(</span>Map<span class=\"k\">.</span>zoom2rad<span class=\"k\">(</span><span class=\"s\">10</span><span class=\"k\">),</span> <span class=\"s\">16</span><span class=\"k\">,</span> <span class=\"s\">\"Test Zoom(10) to Radius(16)\"</span><span class=\"k\">);</span>","\t\tequal<span class=\"k\">(</span>Map<span class=\"k\">.</span>zoom2rad<span class=\"k\">(</span><span class=\"s\">9</span><span class=\"k\">),</span> <span class=\"s\">32</span><span class=\"k\">,</span> <span class=\"s\">\"Test Zoom(9) to Radius(32)\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\ttest<span class=\"k\">(</span> <span class=\"s\">\"Test equality between zoom and radius\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">// TEST Google Map's 20 zoom levels</span>","\t\t<span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i<span class=\"k\">=</span><span class=\"s\">0</span><span class=\"k\">;</span>i<span class=\"k\">&lt;=</span><span class=\"s\">20</span><span class=\"k\">;</span>i<span class=\"k\">++)</span><span class=\"k\">{</span>","\t\t\tequal<span class=\"k\">(</span>Map<span class=\"k\">.</span>zoom2rad<span class=\"k\">(</span>i<span class=\"k\">),</span>Map<span class=\"k\">.</span>zoom2rad<span class=\"k\">(</span>Map<span class=\"k\">.</span>rad2zoom<span class=\"k\">(</span>Map<span class=\"k\">.</span>zoom2rad<span class=\"k\">(</span>i<span class=\"k\">)))</span> <span class=\"k\">,</span><span class=\"s\">\"Test Zoom(\"</span><span class=\"k\">+</span>i<span class=\"k\">+</span><span class=\"s\">\") == Zoom(Radius(Zoom(\"</span><span class=\"k\">+</span>i<span class=\"k\">+</span><span class=\"s\">\")))\"</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t","module<span class=\"k\">(</span><span class=\"s\">'Module A'</span><span class=\"k\">);</span>","\ttest<span class=\"k\">(</span> <span class=\"s\">\"initialize() Completes\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\tnotEqual<span class=\"k\">(</span>undefined<span class=\"k\">,</span>map<span class=\"k\">,</span> <span class=\"s\">\"initialize() defined a google.maps.Map object\"</span> <span class=\"k\">);</span>","\t\tnotEqual<span class=\"k\">(</span>undefined<span class=\"k\">,</span>legend<span class=\"k\">,</span> <span class=\"s\">\"initialize() defined a Legend object\"</span> <span class=\"k\">);</span>","\t\tnotEqual<span class=\"k\">(</span>undefined<span class=\"k\">,</span>compass<span class=\"k\">,</span> <span class=\"s\">\"initialize() defined a Compass object\"</span> <span class=\"k\">);</span>","\t\tnotEqual<span class=\"k\">(</span>undefined<span class=\"k\">,</span>places<span class=\"k\">,</span> <span class=\"s\">\"initialize() defined a Places object\"</span> <span class=\"k\">);</span>","\t\tnotEqual<span class=\"k\">(</span>undefined<span class=\"k\">,</span>geocoder<span class=\"k\">,</span> <span class=\"s\">\"initialize() defined a google.maps.Geocoder object\"</span> <span class=\"k\">);</span>","\t\tnotEqual<span class=\"k\">(</span>undefined<span class=\"k\">,</span>manager<span class=\"k\">,</span> <span class=\"s\">\"initialize() defined a MarkerManager object\"</span> <span class=\"k\">);</span>","\t\tequal<span class=\"k\">(</span> initialize<span class=\"k\">(),</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">\"initialize() terminated :)\"</span> <span class=\"k\">);</span>","","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t","","module<span class=\"k\">(</span><span class=\"s\">'EmPANaDa map System Test'</span><span class=\"k\">);</span>","\tasyncTest<span class=\"k\">(</span> <span class=\"s\">\"moving the map test: 15 second later!\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> x<span class=\"k\">=</span><span class=\"s\">25.778</span><span class=\"k\">;</span>","\t\t<span class=\"k\">var</span> y<span class=\"k\">=-</span><span class=\"s\">80.337</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">var</span> newcenter<span class=\"k\">=</span><span class=\"k\">new</span> google<span class=\"k\">.</span>maps<span class=\"k\">.</span>LatLng<span class=\"k\">(</span>x<span class=\"k\">,</span> y<span class=\"k\">);</span>\t","\t\t","\t\tnotEqual<span class=\"k\">(</span> map<span class=\"k\">.</span>getCenter<span class=\"k\">(),</span>newcenter<span class=\"k\">,</span> <span class=\"s\">\"map initially not at lat=\"</span><span class=\"k\">+</span>x<span class=\"k\">+</span><span class=\"s\">\" lng=\"</span><span class=\"k\">+</span>y <span class=\"k\">);</span>","\t","\t\tmap<span class=\"k\">.</span>setCenter<span class=\"k\">(</span>newcenter<span class=\"k\">);</span>","\t\t","\t\tequal<span class=\"k\">(</span> map<span class=\"k\">.</span>getCenter<span class=\"k\">(),</span>newcenter<span class=\"k\">,</span> <span class=\"s\">\"map is moved to lat=\"</span><span class=\"k\">+</span>x<span class=\"k\">+</span><span class=\"s\">\" lng=\"</span><span class=\"k\">+</span>y <span class=\"k\">);</span>","","\t\tsetTimeout<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\tnotEqual<span class=\"k\">(</span>Markers<span class=\"k\">.</span>markers<span class=\"k\">.</span>length<span class=\"k\">,</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">\"markers requested, got \"</span> <span class=\"k\">+</span>Markers<span class=\"k\">.</span>markers<span class=\"k\">.</span>length<span class=\"k\">+</span><span class=\"s\">\" markers\"</span> <span class=\"k\">);</span>","\t\t\tstart<span class=\"k\">();</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"s\">15000</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","","\t","","module<span class=\"k\">(</span><span class=\"s\">'Google Places System Test'</span><span class=\"k\">);</span>","\tasyncTest<span class=\"k\">(</span> <span class=\"s\">\"nearby search\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t","\t\tplaces<span class=\"k\">.</span>searchNear <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">var</span> request <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\t\tlocation<span class=\"k\">:</span> <span class=\"k\">new</span> google<span class=\"k\">.</span>maps<span class=\"k\">.</span>LatLng<span class=\"k\">(</span>lat<span class=\"k\">,</span> lng<span class=\"k\">),</span>","\t\t\t\tradius<span class=\"k\">:</span> <span class=\"s\">500</span><span class=\"k\">,</span>","\t\t\t\tkeyword<span class=\"k\">:</span> obj<span class=\"k\">.</span>value","\t\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">var</span> service <span class=\"k\">=</span> <span class=\"k\">new</span> google<span class=\"k\">.</span>maps<span class=\"k\">.</span>places<span class=\"k\">.</span>PlacesService<span class=\"k\">(</span>map<span class=\"k\">);</span>","\t\t\tservice<span class=\"k\">.</span>nearbySearch<span class=\"k\">(</span>request<span class=\"k\">,</span> mycallback <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t\t","\t\t<span class=\"k\">function</span> mycallback<span class=\"k\">(</span>results<span class=\"k\">,</span> status<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"c\">//alert(results.length);</span>","\t\t\tnotEqual<span class=\"k\">(</span>results<span class=\"k\">.</span>length<span class=\"k\">,</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">\"querying for nearby google places, got \"</span> <span class=\"k\">+</span>results<span class=\"k\">.</span>length<span class=\"k\">+</span><span class=\"s\">\" results\"</span> <span class=\"k\">);</span>","\t\t\tstart<span class=\"k\">();</span>","\t\t<span class=\"k\">}</span>","","\t\tplaces<span class=\"k\">.</span>searchNear<span class=\"k\">(</span><span class=\"k\">{</span>value<span class=\"k\">:</span><span class=\"s\">\"\"</span><span class=\"k\">}</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","","","module<span class=\"k\">(</span><span class=\"s\">'Google Geocoding System Test'</span><span class=\"k\">);</span>","\tasyncTest<span class=\"k\">(</span> <span class=\"s\">\"place name to location: 5 second later!\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","","\t\t<span class=\"k\">var</span> center<span class=\"k\">=</span>map<span class=\"k\">.</span>getCenter<span class=\"k\">();</span>","\t\t","\t\tequal<span class=\"k\">(</span>map<span class=\"k\">.</span>getCenter<span class=\"k\">(),</span>center<span class=\"k\">,</span> <span class=\"s\">\"map's initial lat=\"</span><span class=\"k\">+</span>map<span class=\"k\">.</span>getCenter<span class=\"k\">().</span>lat<span class=\"k\">()+</span><span class=\"s\">\" lng=\"</span><span class=\"k\">+</span>map<span class=\"k\">.</span>getCenter<span class=\"k\">().</span>lng<span class=\"k\">()</span> <span class=\"k\">);</span>","\t\t","\t\tequal<span class=\"k\">(</span>Map<span class=\"k\">.</span>codeAddress<span class=\"k\">(</span><span class=\"s\">\"MIA Airport\"</span><span class=\"k\">),</span><span class=\"k\">null</span><span class=\"k\">,</span><span class=\"s\">\"queried Google's reverse geocode API\"</span><span class=\"k\">);</span>","\t\t","\t\tsetTimeout<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\tnotEqual<span class=\"k\">(</span>map<span class=\"k\">.</span>getCenter<span class=\"k\">(),</span>center<span class=\"k\">,</span> <span class=\"s\">\"map's final lat=\"</span><span class=\"k\">+</span>map<span class=\"k\">.</span>getCenter<span class=\"k\">().</span>lat<span class=\"k\">()+</span><span class=\"s\">\" lng=\"</span><span class=\"k\">+</span>map<span class=\"k\">.</span>getCenter<span class=\"k\">().</span>lng<span class=\"k\">()</span> <span class=\"k\">);</span>","\t\t\tstart<span class=\"k\">();</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"s\">5000</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","","module<span class=\"k\">(</span><span class=\"s\">'Google Map System Test'</span><span class=\"k\">);</span>","\tasyncTest<span class=\"k\">(</span> <span class=\"s\">\"moving the map test: 10 second later!\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> x<span class=\"k\">=</span><span class=\"s\">26.0</span><span class=\"k\">;</span>","\t\t<span class=\"k\">var</span> y<span class=\"k\">=-</span><span class=\"s\">81.0</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">var</span> newcenter<span class=\"k\">=</span><span class=\"k\">new</span> google<span class=\"k\">.</span>maps<span class=\"k\">.</span>LatLng<span class=\"k\">(</span>x<span class=\"k\">,</span> y<span class=\"k\">);</span>\t","\t\t","\t\tnotEqual<span class=\"k\">(</span> map<span class=\"k\">.</span>getCenter<span class=\"k\">(),</span>newcenter<span class=\"k\">,</span> <span class=\"s\">\"map initially not at lat=\"</span><span class=\"k\">+</span>x<span class=\"k\">+</span><span class=\"s\">\" lng=\"</span><span class=\"k\">+</span>y <span class=\"k\">);</span>","\t","\t\tmap<span class=\"k\">.</span>setCenter<span class=\"k\">(</span>newcenter<span class=\"k\">);</span>","\t\t","\t\tequal<span class=\"k\">(</span> map<span class=\"k\">.</span>getCenter<span class=\"k\">(),</span>newcenter<span class=\"k\">,</span> <span class=\"s\">\"map is moved to lat=\"</span><span class=\"k\">+</span>x<span class=\"k\">+</span><span class=\"s\">\" lng=\"</span><span class=\"k\">+</span>y <span class=\"k\">);</span>","","\t\tgoogle<span class=\"k\">.</span>maps<span class=\"k\">.</span>event<span class=\"k\">.</span>addListener<span class=\"k\">(</span>map<span class=\"k\">,</span> <span class=\"s\">\"tilesloaded\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span> ","\t\t\tnotEqual<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">,</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">\"map tiles finished loading\"</span> <span class=\"k\">);</span>","\t\t\tstart<span class=\"k\">();</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>"];
_$jscoverage['qunit/tests.js'][4]++;
if (((typeof QUnit) == "undefined")) {
  _$jscoverage['qunit/tests.js'][5]++;
  QUnit = require("qunit-cli");
}
_$jscoverage['qunit/tests.js'][7]++;
module("Compass Module");
_$jscoverage['qunit/tests.js'][8]++;
test("Constructor", (function () {
  _$jscoverage['qunit/tests.js'][9]++;
  var htmlobject = document.getElementById("compass");
  _$jscoverage['qunit/tests.js'][10]++;
  var compass = new Compass(htmlobject);
  _$jscoverage['qunit/tests.js'][12]++;
  notEqual(undefined, compass, "Compass constructor does not return undefined");
  _$jscoverage['qunit/tests.js'][13]++;
  equal(htmlobject, compass.htmlObj, "Compass object returns original html object");
}));
_$jscoverage['qunit/tests.js'][16]++;
test("Compass Toggling", (function () {
  _$jscoverage['qunit/tests.js'][17]++;
  var htmlobject = document.getElementById("compass");
  _$jscoverage['qunit/tests.js'][18]++;
  var compass = new Compass(htmlobject);
  _$jscoverage['qunit/tests.js'][20]++;
  equal(compass.status(), false, "Compass is initially OFF");
  _$jscoverage['qunit/tests.js'][23]++;
  var old = htmlobject.onclick;
  _$jscoverage['qunit/tests.js'][26]++;
  htmlobject.onclick = (function () {
  _$jscoverage['qunit/tests.js'][27]++;
  old();
  _$jscoverage['qunit/tests.js'][28]++;
  equal(compass.status(), true, "Compass was toggled ON");
  _$jscoverage['qunit/tests.js'][30]++;
  old();
  _$jscoverage['qunit/tests.js'][31]++;
  equal(compass.status(), false, "... then OFF");
});
  _$jscoverage['qunit/tests.js'][36]++;
  htmlobject.click();
}));
_$jscoverage['qunit/tests.js'][42]++;
module("Legend Module");
_$jscoverage['qunit/tests.js'][43]++;
test("Constuctor", (function () {
  _$jscoverage['qunit/tests.js'][44]++;
  var htmlobject = document.getElementById("legend");
  _$jscoverage['qunit/tests.js'][45]++;
  var legend = new Legend(htmlobject);
  _$jscoverage['qunit/tests.js'][47]++;
  notEqual(undefined, legend, "Legend constructor does not return undefined");
  _$jscoverage['qunit/tests.js'][48]++;
  equal(htmlobject, legend.htmlObj, "Legend object turns original html object");
}));
_$jscoverage['qunit/tests.js'][51]++;
test("Legend is initially not collapsed", (function () {
  _$jscoverage['qunit/tests.js'][52]++;
  var htmlobject = document.getElementById("legend");
  _$jscoverage['qunit/tests.js'][53]++;
  var legendtitle = document.getElementById("legendtitle");
  _$jscoverage['qunit/tests.js'][54]++;
  var legend = new Legend(htmlobject);
  _$jscoverage['qunit/tests.js'][56]++;
  equal(legend.htmlObj.style.height, "", "Legend is initially NOT collapsed");
}));
_$jscoverage['qunit/tests.js'][58]++;
test("Legend collapses on click", (function () {
  _$jscoverage['qunit/tests.js'][59]++;
  var htmlobject = document.getElementById("legend");
  _$jscoverage['qunit/tests.js'][60]++;
  var legend = new Legend(htmlobject);
  _$jscoverage['qunit/tests.js'][61]++;
  var legendtitle = legend.htmlObj.children[0];
  _$jscoverage['qunit/tests.js'][63]++;
  var old = legendtitle.onclick;
  _$jscoverage['qunit/tests.js'][65]++;
  legendtitle.onclick = (function () {
  _$jscoverage['qunit/tests.js'][66]++;
  old();
  _$jscoverage['qunit/tests.js'][67]++;
  equal(legend.htmlObj.style.height, "20px", "Legend collapses on click");
});
  _$jscoverage['qunit/tests.js'][70]++;
  legendtitle.click();
}));
_$jscoverage['qunit/tests.js'][74]++;
module("Map Module");
_$jscoverage['qunit/tests.js'][75]++;
test("Map.rad2zoom", (function () {
  _$jscoverage['qunit/tests.js'][79]++;
  equal(Map.rad2zoom(0.5), 15, "Test Radius(.5) to Zoom(15)");
  _$jscoverage['qunit/tests.js'][80]++;
  equal(Map.rad2zoom(1), 14, "Test Radius(1) to Zoom(14)");
  _$jscoverage['qunit/tests.js'][81]++;
  equal(Map.rad2zoom(2), 13, "Test Radius(2) to Zoom(13)");
  _$jscoverage['qunit/tests.js'][82]++;
  equal(Map.rad2zoom(4), 12, "Test Radius(4) to Zoom(12)");
  _$jscoverage['qunit/tests.js'][83]++;
  equal(Map.rad2zoom(8), 11, "Test Radius(8) to Zoom(11)");
  _$jscoverage['qunit/tests.js'][84]++;
  equal(Map.rad2zoom(16), 10, "Test Radius(16) to Zoom(10)");
  _$jscoverage['qunit/tests.js'][85]++;
  equal(Map.rad2zoom(32), 9, "Test Radius(32) to Zoom(9)");
}));
_$jscoverage['qunit/tests.js'][87]++;
test("Map.zoom2rad", (function () {
  _$jscoverage['qunit/tests.js'][89]++;
  equal(Map.zoom2rad(15), 0.5, "Test Zoom(15) to Radius(.5)");
  _$jscoverage['qunit/tests.js'][90]++;
  equal(Map.zoom2rad(14), 1, "Test Zoom(14) to Radius(1)");
  _$jscoverage['qunit/tests.js'][91]++;
  equal(Map.zoom2rad(13), 2, "Test Zoom(13) to Radius(2)");
  _$jscoverage['qunit/tests.js'][92]++;
  equal(Map.zoom2rad(12), 4, "Test Zoom(12) to Radius(4)");
  _$jscoverage['qunit/tests.js'][93]++;
  equal(Map.zoom2rad(11), 8, "Test Zoom(11) to Radius(8)");
  _$jscoverage['qunit/tests.js'][94]++;
  equal(Map.zoom2rad(10), 16, "Test Zoom(10) to Radius(16)");
  _$jscoverage['qunit/tests.js'][95]++;
  equal(Map.zoom2rad(9), 32, "Test Zoom(9) to Radius(32)");
}));
_$jscoverage['qunit/tests.js'][97]++;
test("Test equality between zoom and radius", (function () {
  _$jscoverage['qunit/tests.js'][99]++;
  for (var i = 0; (i <= 20); (i++)) {
    _$jscoverage['qunit/tests.js'][100]++;
    equal(Map.zoom2rad(i), Map.zoom2rad(Map.rad2zoom(Map.zoom2rad(i))), ("Test Zoom(" + i + ") == Zoom(Radius(Zoom(" + i + ")))"));
}
}));
_$jscoverage['qunit/tests.js'][105]++;
module("Module A");
_$jscoverage['qunit/tests.js'][106]++;
test("initialize() Completes", (function () {
  _$jscoverage['qunit/tests.js'][107]++;
  notEqual(undefined, map, "initialize() defined a google.maps.Map object");
  _$jscoverage['qunit/tests.js'][108]++;
  notEqual(undefined, legend, "initialize() defined a Legend object");
  _$jscoverage['qunit/tests.js'][109]++;
  notEqual(undefined, compass, "initialize() defined a Compass object");
  _$jscoverage['qunit/tests.js'][110]++;
  notEqual(undefined, places, "initialize() defined a Places object");
  _$jscoverage['qunit/tests.js'][111]++;
  notEqual(undefined, geocoder, "initialize() defined a google.maps.Geocoder object");
  _$jscoverage['qunit/tests.js'][112]++;
  notEqual(undefined, manager, "initialize() defined a MarkerManager object");
  _$jscoverage['qunit/tests.js'][113]++;
  equal(initialize(), 0, "initialize() terminated :)");
}));
_$jscoverage['qunit/tests.js'][118]++;
module("EmPANaDa map System Test");
_$jscoverage['qunit/tests.js'][119]++;
asyncTest("moving the map test: 15 second later!", (function () {
  _$jscoverage['qunit/tests.js'][120]++;
  var x = 25.777999999999999;
  _$jscoverage['qunit/tests.js'][121]++;
  var y = -80.337000000000003;
  _$jscoverage['qunit/tests.js'][123]++;
  var newcenter = new (google.maps.LatLng)(x, y);
  _$jscoverage['qunit/tests.js'][125]++;
  notEqual(map.getCenter(), newcenter, ("map initially not at lat=" + x + " lng=" + y));
  _$jscoverage['qunit/tests.js'][127]++;
  map.setCenter(newcenter);
  _$jscoverage['qunit/tests.js'][129]++;
  equal(map.getCenter(), newcenter, ("map is moved to lat=" + x + " lng=" + y));
  _$jscoverage['qunit/tests.js'][131]++;
  setTimeout((function () {
  _$jscoverage['qunit/tests.js'][132]++;
  notEqual(Markers.markers.length, 0, ("markers requested, got " + Markers.markers.length + " markers"));
  _$jscoverage['qunit/tests.js'][133]++;
  start();
}), 15000);
}));
_$jscoverage['qunit/tests.js'][139]++;
module("Google Places System Test");
_$jscoverage['qunit/tests.js'][140]++;
asyncTest("nearby search", (function () {
  _$jscoverage['qunit/tests.js'][142]++;
  places.searchNear = (function (obj) {
  _$jscoverage['qunit/tests.js'][143]++;
  var request = {location: new (google.maps.LatLng)(lat, lng), radius: 500, keyword: obj.value};
  _$jscoverage['qunit/tests.js'][148]++;
  var service = new (google.maps.places.PlacesService)(map);
  _$jscoverage['qunit/tests.js'][149]++;
  service.nearbySearch(request, mycallback);
});
  _$jscoverage['qunit/tests.js'][152]++;
  function mycallback(results, status) {
    _$jscoverage['qunit/tests.js'][154]++;
    notEqual(results.length, 0, ("querying for nearby google places, got " + results.length + " results"));
    _$jscoverage['qunit/tests.js'][155]++;
    start();
}
  _$jscoverage['qunit/tests.js'][158]++;
  places.searchNear({value: ""});
}));
_$jscoverage['qunit/tests.js'][162]++;
module("Google Geocoding System Test");
_$jscoverage['qunit/tests.js'][163]++;
asyncTest("place name to location: 5 second later!", (function () {
  _$jscoverage['qunit/tests.js'][165]++;
  var center = map.getCenter();
  _$jscoverage['qunit/tests.js'][167]++;
  equal(map.getCenter(), center, ("map's initial lat=" + map.getCenter().lat() + " lng=" + map.getCenter().lng()));
  _$jscoverage['qunit/tests.js'][169]++;
  equal(Map.codeAddress("MIA Airport"), null, "queried Google's reverse geocode API");
  _$jscoverage['qunit/tests.js'][171]++;
  setTimeout((function () {
  _$jscoverage['qunit/tests.js'][172]++;
  notEqual(map.getCenter(), center, ("map's final lat=" + map.getCenter().lat() + " lng=" + map.getCenter().lng()));
  _$jscoverage['qunit/tests.js'][173]++;
  start();
}), 5000);
}));
_$jscoverage['qunit/tests.js'][177]++;
module("Google Map System Test");
_$jscoverage['qunit/tests.js'][178]++;
asyncTest("moving the map test: 10 second later!", (function () {
  _$jscoverage['qunit/tests.js'][179]++;
  var x = 26;
  _$jscoverage['qunit/tests.js'][180]++;
  var y = -81;
  _$jscoverage['qunit/tests.js'][182]++;
  var newcenter = new (google.maps.LatLng)(x, y);
  _$jscoverage['qunit/tests.js'][184]++;
  notEqual(map.getCenter(), newcenter, ("map initially not at lat=" + x + " lng=" + y));
  _$jscoverage['qunit/tests.js'][186]++;
  map.setCenter(newcenter);
  _$jscoverage['qunit/tests.js'][188]++;
  equal(map.getCenter(), newcenter, ("map is moved to lat=" + x + " lng=" + y));
  _$jscoverage['qunit/tests.js'][190]++;
  google.maps.event.addListener(map, "tilesloaded", (function () {
  _$jscoverage['qunit/tests.js'][191]++;
  notEqual(true, 0, "map tiles finished loading");
  _$jscoverage['qunit/tests.js'][192]++;
  start();
}));
}));
