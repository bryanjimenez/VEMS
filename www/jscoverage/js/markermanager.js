/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['js/markermanager.js']) {
  _$jscoverage['js/markermanager.js'] = [];
  _$jscoverage['js/markermanager.js'][74] = 0;
  _$jscoverage['js/markermanager.js'][75] = 0;
  _$jscoverage['js/markermanager.js'][76] = 0;
  _$jscoverage['js/markermanager.js'][77] = 0;
  _$jscoverage['js/markermanager.js'][79] = 0;
  _$jscoverage['js/markermanager.js'][80] = 0;
  _$jscoverage['js/markermanager.js'][81] = 0;
  _$jscoverage['js/markermanager.js'][82] = 0;
  _$jscoverage['js/markermanager.js'][87] = 0;
  _$jscoverage['js/markermanager.js'][88] = 0;
  _$jscoverage['js/markermanager.js'][90] = 0;
  _$jscoverage['js/markermanager.js'][91] = 0;
  _$jscoverage['js/markermanager.js'][93] = 0;
  _$jscoverage['js/markermanager.js'][96] = 0;
  _$jscoverage['js/markermanager.js'][97] = 0;
  _$jscoverage['js/markermanager.js'][98] = 0;
  _$jscoverage['js/markermanager.js'][100] = 0;
  _$jscoverage['js/markermanager.js'][101] = 0;
  _$jscoverage['js/markermanager.js'][102] = 0;
  _$jscoverage['js/markermanager.js'][107] = 0;
  _$jscoverage['js/markermanager.js'][109] = 0;
  _$jscoverage['js/markermanager.js'][110] = 0;
  _$jscoverage['js/markermanager.js'][112] = 0;
  _$jscoverage['js/markermanager.js'][113] = 0;
  _$jscoverage['js/markermanager.js'][114] = 0;
  _$jscoverage['js/markermanager.js'][116] = 0;
  _$jscoverage['js/markermanager.js'][119] = 0;
  _$jscoverage['js/markermanager.js'][120] = 0;
  _$jscoverage['js/markermanager.js'][121] = 0;
  _$jscoverage['js/markermanager.js'][123] = 0;
  _$jscoverage['js/markermanager.js'][125] = 0;
  _$jscoverage['js/markermanager.js'][126] = 0;
  _$jscoverage['js/markermanager.js'][127] = 0;
  _$jscoverage['js/markermanager.js'][128] = 0;
  _$jscoverage['js/markermanager.js'][131] = 0;
  _$jscoverage['js/markermanager.js'][132] = 0;
  _$jscoverage['js/markermanager.js'][135] = 0;
  _$jscoverage['js/markermanager.js'][136] = 0;
  _$jscoverage['js/markermanager.js'][139] = 0;
  _$jscoverage['js/markermanager.js'][140] = 0;
  _$jscoverage['js/markermanager.js'][151] = 0;
  _$jscoverage['js/markermanager.js'][152] = 0;
  _$jscoverage['js/markermanager.js'][153] = 0;
  _$jscoverage['js/markermanager.js'][162] = 0;
  _$jscoverage['js/markermanager.js'][163] = 0;
  _$jscoverage['js/markermanager.js'][164] = 0;
  _$jscoverage['js/markermanager.js'][165] = 0;
  _$jscoverage['js/markermanager.js'][169] = 0;
  _$jscoverage['js/markermanager.js'][170] = 0;
  _$jscoverage['js/markermanager.js'][172] = 0;
  _$jscoverage['js/markermanager.js'][174] = 0;
  _$jscoverage['js/markermanager.js'][181] = 0;
  _$jscoverage['js/markermanager.js'][187] = 0;
  _$jscoverage['js/markermanager.js'][192] = 0;
  _$jscoverage['js/markermanager.js'][199] = 0;
  _$jscoverage['js/markermanager.js'][200] = 0;
  _$jscoverage['js/markermanager.js'][201] = 0;
  _$jscoverage['js/markermanager.js'][202] = 0;
  _$jscoverage['js/markermanager.js'][203] = 0;
  _$jscoverage['js/markermanager.js'][204] = 0;
  _$jscoverage['js/markermanager.js'][205] = 0;
  _$jscoverage['js/markermanager.js'][214] = 0;
  _$jscoverage['js/markermanager.js'][215] = 0;
  _$jscoverage['js/markermanager.js'][216] = 0;
  _$jscoverage['js/markermanager.js'][231] = 0;
  _$jscoverage['js/markermanager.js'][233] = 0;
  _$jscoverage['js/markermanager.js'][235] = 0;
  _$jscoverage['js/markermanager.js'][240] = 0;
  _$jscoverage['js/markermanager.js'][253] = 0;
  _$jscoverage['js/markermanager.js'][254] = 0;
  _$jscoverage['js/markermanager.js'][256] = 0;
  _$jscoverage['js/markermanager.js'][257] = 0;
  _$jscoverage['js/markermanager.js'][262] = 0;
  _$jscoverage['js/markermanager.js'][263] = 0;
  _$jscoverage['js/markermanager.js'][264] = 0;
  _$jscoverage['js/markermanager.js'][268] = 0;
  _$jscoverage['js/markermanager.js'][270] = 0;
  _$jscoverage['js/markermanager.js'][271] = 0;
  _$jscoverage['js/markermanager.js'][272] = 0;
  _$jscoverage['js/markermanager.js'][274] = 0;
  _$jscoverage['js/markermanager.js'][275] = 0;
  _$jscoverage['js/markermanager.js'][289] = 0;
  _$jscoverage['js/markermanager.js'][290] = 0;
  _$jscoverage['js/markermanager.js'][292] = 0;
  _$jscoverage['js/markermanager.js'][293] = 0;
  _$jscoverage['js/markermanager.js'][294] = 0;
  _$jscoverage['js/markermanager.js'][297] = 0;
  _$jscoverage['js/markermanager.js'][298] = 0;
  _$jscoverage['js/markermanager.js'][300] = 0;
  _$jscoverage['js/markermanager.js'][313] = 0;
  _$jscoverage['js/markermanager.js'][317] = 0;
  _$jscoverage['js/markermanager.js'][318] = 0;
  _$jscoverage['js/markermanager.js'][319] = 0;
  _$jscoverage['js/markermanager.js'][320] = 0;
  _$jscoverage['js/markermanager.js'][321] = 0;
  _$jscoverage['js/markermanager.js'][322] = 0;
  _$jscoverage['js/markermanager.js'][323] = 0;
  _$jscoverage['js/markermanager.js'][324] = 0;
  _$jscoverage['js/markermanager.js'][325] = 0;
  _$jscoverage['js/markermanager.js'][332] = 0;
  _$jscoverage['js/markermanager.js'][333] = 0;
  _$jscoverage['js/markermanager.js'][334] = 0;
  _$jscoverage['js/markermanager.js'][335] = 0;
  _$jscoverage['js/markermanager.js'][336] = 0;
  _$jscoverage['js/markermanager.js'][339] = 0;
  _$jscoverage['js/markermanager.js'][340] = 0;
  _$jscoverage['js/markermanager.js'][341] = 0;
  _$jscoverage['js/markermanager.js'][345] = 0;
  _$jscoverage['js/markermanager.js'][346] = 0;
  _$jscoverage['js/markermanager.js'][347] = 0;
  _$jscoverage['js/markermanager.js'][348] = 0;
  _$jscoverage['js/markermanager.js'][349] = 0;
  _$jscoverage['js/markermanager.js'][351] = 0;
  _$jscoverage['js/markermanager.js'][352] = 0;
  _$jscoverage['js/markermanager.js'][362] = 0;
  _$jscoverage['js/markermanager.js'][363] = 0;
  _$jscoverage['js/markermanager.js'][364] = 0;
  _$jscoverage['js/markermanager.js'][365] = 0;
  _$jscoverage['js/markermanager.js'][366] = 0;
  _$jscoverage['js/markermanager.js'][367] = 0;
  _$jscoverage['js/markermanager.js'][368] = 0;
  _$jscoverage['js/markermanager.js'][370] = 0;
  _$jscoverage['js/markermanager.js'][371] = 0;
  _$jscoverage['js/markermanager.js'][376] = 0;
  _$jscoverage['js/markermanager.js'][377] = 0;
  _$jscoverage['js/markermanager.js'][378] = 0;
  _$jscoverage['js/markermanager.js'][379] = 0;
  _$jscoverage['js/markermanager.js'][382] = 0;
  _$jscoverage['js/markermanager.js'][383] = 0;
  _$jscoverage['js/markermanager.js'][384] = 0;
  _$jscoverage['js/markermanager.js'][386] = 0;
  _$jscoverage['js/markermanager.js'][387] = 0;
  _$jscoverage['js/markermanager.js'][389] = 0;
  _$jscoverage['js/markermanager.js'][401] = 0;
  _$jscoverage['js/markermanager.js'][402] = 0;
  _$jscoverage['js/markermanager.js'][403] = 0;
  _$jscoverage['js/markermanager.js'][404] = 0;
  _$jscoverage['js/markermanager.js'][407] = 0;
  _$jscoverage['js/markermanager.js'][418] = 0;
  _$jscoverage['js/markermanager.js'][419] = 0;
  _$jscoverage['js/markermanager.js'][429] = 0;
  _$jscoverage['js/markermanager.js'][430] = 0;
  _$jscoverage['js/markermanager.js'][431] = 0;
  _$jscoverage['js/markermanager.js'][432] = 0;
  _$jscoverage['js/markermanager.js'][434] = 0;
  _$jscoverage['js/markermanager.js'][447] = 0;
  _$jscoverage['js/markermanager.js'][448] = 0;
  _$jscoverage['js/markermanager.js'][449] = 0;
  _$jscoverage['js/markermanager.js'][452] = 0;
  _$jscoverage['js/markermanager.js'][454] = 0;
  _$jscoverage['js/markermanager.js'][455] = 0;
  _$jscoverage['js/markermanager.js'][463] = 0;
  _$jscoverage['js/markermanager.js'][464] = 0;
  _$jscoverage['js/markermanager.js'][465] = 0;
  _$jscoverage['js/markermanager.js'][468] = 0;
  _$jscoverage['js/markermanager.js'][478] = 0;
  _$jscoverage['js/markermanager.js'][479] = 0;
  _$jscoverage['js/markermanager.js'][480] = 0;
  _$jscoverage['js/markermanager.js'][481] = 0;
  _$jscoverage['js/markermanager.js'][482] = 0;
  _$jscoverage['js/markermanager.js'][485] = 0;
  _$jscoverage['js/markermanager.js'][486] = 0;
  _$jscoverage['js/markermanager.js'][488] = 0;
  _$jscoverage['js/markermanager.js'][497] = 0;
  _$jscoverage['js/markermanager.js'][500] = 0;
  _$jscoverage['js/markermanager.js'][501] = 0;
  _$jscoverage['js/markermanager.js'][502] = 0;
  _$jscoverage['js/markermanager.js'][503] = 0;
  _$jscoverage['js/markermanager.js'][512] = 0;
  _$jscoverage['js/markermanager.js'][513] = 0;
  _$jscoverage['js/markermanager.js'][514] = 0;
  _$jscoverage['js/markermanager.js'][516] = 0;
  _$jscoverage['js/markermanager.js'][525] = 0;
  _$jscoverage['js/markermanager.js'][526] = 0;
  _$jscoverage['js/markermanager.js'][527] = 0;
  _$jscoverage['js/markermanager.js'][540] = 0;
  _$jscoverage['js/markermanager.js'][541] = 0;
  _$jscoverage['js/markermanager.js'][542] = 0;
  _$jscoverage['js/markermanager.js'][543] = 0;
  _$jscoverage['js/markermanager.js'][545] = 0;
  _$jscoverage['js/markermanager.js'][546] = 0;
  _$jscoverage['js/markermanager.js'][547] = 0;
  _$jscoverage['js/markermanager.js'][548] = 0;
  _$jscoverage['js/markermanager.js'][550] = 0;
  _$jscoverage['js/markermanager.js'][551] = 0;
  _$jscoverage['js/markermanager.js'][552] = 0;
  _$jscoverage['js/markermanager.js'][554] = 0;
  _$jscoverage['js/markermanager.js'][568] = 0;
  _$jscoverage['js/markermanager.js'][569] = 0;
  _$jscoverage['js/markermanager.js'][571] = 0;
  _$jscoverage['js/markermanager.js'][572] = 0;
  _$jscoverage['js/markermanager.js'][574] = 0;
  _$jscoverage['js/markermanager.js'][575] = 0;
  _$jscoverage['js/markermanager.js'][590] = 0;
  _$jscoverage['js/markermanager.js'][591] = 0;
  _$jscoverage['js/markermanager.js'][593] = 0;
  _$jscoverage['js/markermanager.js'][594] = 0;
  _$jscoverage['js/markermanager.js'][595] = 0;
  _$jscoverage['js/markermanager.js'][597] = 0;
  _$jscoverage['js/markermanager.js'][598] = 0;
  _$jscoverage['js/markermanager.js'][601] = 0;
  _$jscoverage['js/markermanager.js'][602] = 0;
  _$jscoverage['js/markermanager.js'][604] = 0;
  _$jscoverage['js/markermanager.js'][606] = 0;
  _$jscoverage['js/markermanager.js'][607] = 0;
  _$jscoverage['js/markermanager.js'][610] = 0;
  _$jscoverage['js/markermanager.js'][611] = 0;
  _$jscoverage['js/markermanager.js'][613] = 0;
  _$jscoverage['js/markermanager.js'][622] = 0;
  _$jscoverage['js/markermanager.js'][623] = 0;
  _$jscoverage['js/markermanager.js'][634] = 0;
  _$jscoverage['js/markermanager.js'][635] = 0;
  _$jscoverage['js/markermanager.js'][653] = 0;
  _$jscoverage['js/markermanager.js'][654] = 0;
  _$jscoverage['js/markermanager.js'][655] = 0;
  _$jscoverage['js/markermanager.js'][667] = 0;
  _$jscoverage['js/markermanager.js'][668] = 0;
  _$jscoverage['js/markermanager.js'][677] = 0;
  _$jscoverage['js/markermanager.js'][678] = 0;
  _$jscoverage['js/markermanager.js'][685] = 0;
  _$jscoverage['js/markermanager.js'][686] = 0;
  _$jscoverage['js/markermanager.js'][687] = 0;
  _$jscoverage['js/markermanager.js'][694] = 0;
  _$jscoverage['js/markermanager.js'][695] = 0;
  _$jscoverage['js/markermanager.js'][696] = 0;
  _$jscoverage['js/markermanager.js'][703] = 0;
  _$jscoverage['js/markermanager.js'][704] = 0;
  _$jscoverage['js/markermanager.js'][705] = 0;
  _$jscoverage['js/markermanager.js'][716] = 0;
  _$jscoverage['js/markermanager.js'][717] = 0;
  _$jscoverage['js/markermanager.js'][718] = 0;
  _$jscoverage['js/markermanager.js'][721] = 0;
  _$jscoverage['js/markermanager.js'][722] = 0;
  _$jscoverage['js/markermanager.js'][724] = 0;
  _$jscoverage['js/markermanager.js'][731] = 0;
  _$jscoverage['js/markermanager.js'][732] = 0;
  _$jscoverage['js/markermanager.js'][733] = 0;
  _$jscoverage['js/markermanager.js'][737] = 0;
  _$jscoverage['js/markermanager.js'][738] = 0;
  _$jscoverage['js/markermanager.js'][741] = 0;
  _$jscoverage['js/markermanager.js'][742] = 0;
  _$jscoverage['js/markermanager.js'][743] = 0;
  _$jscoverage['js/markermanager.js'][744] = 0;
  _$jscoverage['js/markermanager.js'][748] = 0;
  _$jscoverage['js/markermanager.js'][751] = 0;
  _$jscoverage['js/markermanager.js'][752] = 0;
  _$jscoverage['js/markermanager.js'][755] = 0;
  _$jscoverage['js/markermanager.js'][757] = 0;
  _$jscoverage['js/markermanager.js'][764] = 0;
  _$jscoverage['js/markermanager.js'][765] = 0;
  _$jscoverage['js/markermanager.js'][775] = 0;
  _$jscoverage['js/markermanager.js'][776] = 0;
  _$jscoverage['js/markermanager.js'][777] = 0;
  _$jscoverage['js/markermanager.js'][778] = 0;
  _$jscoverage['js/markermanager.js'][792] = 0;
  _$jscoverage['js/markermanager.js'][793] = 0;
  _$jscoverage['js/markermanager.js'][794] = 0;
  _$jscoverage['js/markermanager.js'][795] = 0;
  _$jscoverage['js/markermanager.js'][796] = 0;
  _$jscoverage['js/markermanager.js'][809] = 0;
  _$jscoverage['js/markermanager.js'][810] = 0;
  _$jscoverage['js/markermanager.js'][821] = 0;
  _$jscoverage['js/markermanager.js'][822] = 0;
  _$jscoverage['js/markermanager.js'][838] = 0;
  _$jscoverage['js/markermanager.js'][839] = 0;
  _$jscoverage['js/markermanager.js'][840] = 0;
  _$jscoverage['js/markermanager.js'][841] = 0;
  _$jscoverage['js/markermanager.js'][854] = 0;
  _$jscoverage['js/markermanager.js'][855] = 0;
  _$jscoverage['js/markermanager.js'][856] = 0;
  _$jscoverage['js/markermanager.js'][857] = 0;
  _$jscoverage['js/markermanager.js'][858] = 0;
  _$jscoverage['js/markermanager.js'][859] = 0;
  _$jscoverage['js/markermanager.js'][860] = 0;
  _$jscoverage['js/markermanager.js'][861] = 0;
  _$jscoverage['js/markermanager.js'][862] = 0;
  _$jscoverage['js/markermanager.js'][864] = 0;
  _$jscoverage['js/markermanager.js'][865] = 0;
  _$jscoverage['js/markermanager.js'][867] = 0;
  _$jscoverage['js/markermanager.js'][868] = 0;
  _$jscoverage['js/markermanager.js'][871] = 0;
  _$jscoverage['js/markermanager.js'][873] = 0;
  _$jscoverage['js/markermanager.js'][877] = 0;
  _$jscoverage['js/markermanager.js'][880] = 0;
  _$jscoverage['js/markermanager.js'][882] = 0;
  _$jscoverage['js/markermanager.js'][885] = 0;
  _$jscoverage['js/markermanager.js'][887] = 0;
  _$jscoverage['js/markermanager.js'][901] = 0;
  _$jscoverage['js/markermanager.js'][902] = 0;
  _$jscoverage['js/markermanager.js'][903] = 0;
  _$jscoverage['js/markermanager.js'][904] = 0;
  _$jscoverage['js/markermanager.js'][905] = 0;
  _$jscoverage['js/markermanager.js'][906] = 0;
  _$jscoverage['js/markermanager.js'][909] = 0;
  _$jscoverage['js/markermanager.js'][924] = 0;
  _$jscoverage['js/markermanager.js'][926] = 0;
  _$jscoverage['js/markermanager.js'][928] = 0;
  _$jscoverage['js/markermanager.js'][929] = 0;
  _$jscoverage['js/markermanager.js'][930] = 0;
  _$jscoverage['js/markermanager.js'][932] = 0;
  _$jscoverage['js/markermanager.js'][933] = 0;
  _$jscoverage['js/markermanager.js'][934] = 0;
  _$jscoverage['js/markermanager.js'][941] = 0;
  _$jscoverage['js/markermanager.js'][948] = 0;
  _$jscoverage['js/markermanager.js'][949] = 0;
  _$jscoverage['js/markermanager.js'][957] = 0;
  _$jscoverage['js/markermanager.js'][958] = 0;
  _$jscoverage['js/markermanager.js'][959] = 0;
  _$jscoverage['js/markermanager.js'][968] = 0;
  _$jscoverage['js/markermanager.js'][969] = 0;
  _$jscoverage['js/markermanager.js'][970] = 0;
  _$jscoverage['js/markermanager.js'][971] = 0;
  _$jscoverage['js/markermanager.js'][972] = 0;
  _$jscoverage['js/markermanager.js'][981] = 0;
  _$jscoverage['js/markermanager.js'][982] = 0;
  _$jscoverage['js/markermanager.js'][983] = 0;
  _$jscoverage['js/markermanager.js'][984] = 0;
}
_$jscoverage['js/markermanager.js'].source = ["<span class=\"c\">/**</span>","<span class=\"c\"> * @name MarkerManager v3</span>","<span class=\"c\"> * @version 1.1</span>","<span class=\"c\"> * @copyright (c) 2007 Google Inc.</span>","<span class=\"c\"> * @author Doug Ricket, Bjorn Brala (port to v3), others,</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @fileoverview Marker manager is an interface between the map and the user,</span>","<span class=\"c\"> * designed to manage adding and removing many points when the viewport changes.</span>","<span class=\"c\"> * &lt;br /&gt;&lt;br /&gt;</span>","<span class=\"c\"> * &lt;b&gt;How it Works&lt;/b&gt;:&lt;br/&gt; </span>","<span class=\"c\"> * The MarkerManager places its markers onto a grid, similar to the map tiles.</span>","<span class=\"c\"> * When the user moves the viewport, it computes which grid cells have</span>","<span class=\"c\"> * entered or left the viewport, and shows or hides all the markers in those</span>","<span class=\"c\"> * cells.</span>","<span class=\"c\"> * (If the users scrolls the viewport beyond the markers that are loaded,</span>","<span class=\"c\"> * no markers will be visible until the &lt;code&gt;EVENT_moveend&lt;/code&gt; </span>","<span class=\"c\"> * triggers an update.)</span>","<span class=\"c\"> * In practical consequences, this allows 10,000 markers to be distributed over</span>","<span class=\"c\"> * a large area, and as long as only 100-200 are visible in any given viewport,</span>","<span class=\"c\"> * the user will see good performance corresponding to the 100 visible markers,</span>","<span class=\"c\"> * rather than poor performance corresponding to the total 10,000 markers.</span>","<span class=\"c\"> * Note that some code is optimized for speed over space,</span>","<span class=\"c\"> * with the goal of accommodating thousands of markers.</span>","<span class=\"c\"> */</span>","","<span class=\"c\">/*</span>","<span class=\"c\"> * Licensed under the Apache License, Version 2.0 (the \"License\");</span>","<span class=\"c\"> * you may not use this file except in compliance with the License.</span>","<span class=\"c\"> * You may obtain a copy of the License at</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *     http://www.apache.org/licenses/LICENSE-2.0</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Unless required by applicable law or agreed to in writing, software</span>","<span class=\"c\"> * distributed under the License is distributed on an \"AS IS\" BASIS,</span>","<span class=\"c\"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>","<span class=\"c\"> * See the License for the specific language governing permissions and</span>","<span class=\"c\"> * limitations under the License. </span>","<span class=\"c\"> */</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * @name MarkerManagerOptions</span>","<span class=\"c\"> * @class This class represents optional arguments to the {@link MarkerManager}</span>","<span class=\"c\"> *     constructor.</span>","<span class=\"c\"> * @property {Number} maxZoom Sets the maximum zoom level monitored by a</span>","<span class=\"c\"> *     marker manager. If not given, the manager assumes the maximum map zoom</span>","<span class=\"c\"> *     level. This value is also used when markers are added to the manager</span>","<span class=\"c\"> *     without the optional {@link maxZoom} parameter.</span>","<span class=\"c\"> * @property {Number} borderPadding Specifies, in pixels, the extra padding</span>","<span class=\"c\"> *     outside the map's current viewport monitored by a manager. Markers that</span>","<span class=\"c\"> *     fall within this padding are added to the map, even if they are not fully</span>","<span class=\"c\"> *     visible.</span>","<span class=\"c\"> * @property {Boolean} trackMarkers=false Indicates whether or not a marker</span>","<span class=\"c\"> *     manager should track markers' movements. If you wish to move managed</span>","<span class=\"c\"> *     markers using the {@link setPoint}/{@link setLatLng} methods, </span>","<span class=\"c\"> *     this option should be set to {@link true}.</span>","<span class=\"c\"> */</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Creates a new MarkerManager that will show/hide markers on a map.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Events:</span>","<span class=\"c\"> * @event changed (Parameters: shown bounds, shown markers) Notify listeners when the state of what is displayed changes.</span>","<span class=\"c\"> * @event loaded MarkerManager has succesfully been initialized.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @constructor</span>","<span class=\"c\"> * @param {Map} map The map to manage.</span>","<span class=\"c\"> * @param {Object} opt_opts A container for optional arguments:</span>","<span class=\"c\"> *   {Number} maxZoom The maximum zoom level for which to create tiles.</span>","<span class=\"c\"> *   {Number} borderPadding The width in pixels beyond the map border,</span>","<span class=\"c\"> *                   where markers should be display.</span>","<span class=\"c\"> *   {Boolean} trackMarkers Whether or not this manager should track marker</span>","<span class=\"c\"> *                   movements.</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> MarkerManager<span class=\"k\">(</span>map<span class=\"k\">,</span> opt_opts<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","  me<span class=\"k\">.</span>map_ <span class=\"k\">=</span> map<span class=\"k\">;</span>","  me<span class=\"k\">.</span>mapZoom_ <span class=\"k\">=</span> map<span class=\"k\">.</span>getZoom<span class=\"k\">();</span>","  ","  me<span class=\"k\">.</span>projectionHelper_ <span class=\"k\">=</span> <span class=\"k\">new</span> ProjectionHelperOverlay<span class=\"k\">(</span>map<span class=\"k\">);</span>","  google<span class=\"k\">.</span>maps<span class=\"k\">.</span>event<span class=\"k\">.</span>addListener<span class=\"k\">(</span>me<span class=\"k\">.</span>projectionHelper_<span class=\"k\">,</span> <span class=\"s\">'ready'</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    me<span class=\"k\">.</span>projection_ <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getProjection<span class=\"k\">();</span>","    me<span class=\"k\">.</span>initialize<span class=\"k\">(</span>map<span class=\"k\">,</span> opt_opts<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">);</span>","<span class=\"k\">}</span>","","  ","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>initialize <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>map<span class=\"k\">,</span> opt_opts<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","  ","  opt_opts <span class=\"k\">=</span> opt_opts <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  me<span class=\"k\">.</span>tileSize_ <span class=\"k\">=</span> MarkerManager<span class=\"k\">.</span>DEFAULT_TILE_SIZE_<span class=\"k\">;</span>","","  <span class=\"k\">var</span> mapTypes <span class=\"k\">=</span> map<span class=\"k\">.</span>mapTypes<span class=\"k\">;</span>","","  <span class=\"c\">// Find max zoom level</span>","  <span class=\"k\">var</span> mapMaxZoom <span class=\"k\">=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","  <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> sType <span class=\"k\">in</span> mapTypes <span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>mapTypes<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">(</span>sType<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span>","        mapTypes<span class=\"k\">.</span>get<span class=\"k\">(</span>sType<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> mapTypes<span class=\"k\">.</span>get<span class=\"k\">(</span>sType<span class=\"k\">).</span>maxZoom <span class=\"k\">===</span> <span class=\"s\">'number'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> mapTypeMaxZoom <span class=\"k\">=</span> map<span class=\"k\">.</span>mapTypes<span class=\"k\">.</span>get<span class=\"k\">(</span>sType<span class=\"k\">).</span>maxZoom<span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>mapTypeMaxZoom <span class=\"k\">&gt;</span> mapMaxZoom<span class=\"k\">)</span> <span class=\"k\">{</span>","        mapMaxZoom <span class=\"k\">=</span> mapTypeMaxZoom<span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","  ","  me<span class=\"k\">.</span>maxZoom_  <span class=\"k\">=</span> opt_opts<span class=\"k\">.</span>maxZoom <span class=\"k\">||</span> <span class=\"s\">19</span><span class=\"k\">;</span>","","  me<span class=\"k\">.</span>trackMarkers_ <span class=\"k\">=</span> opt_opts<span class=\"k\">.</span>trackMarkers<span class=\"k\">;</span>","  me<span class=\"k\">.</span>show_ <span class=\"k\">=</span> opt_opts<span class=\"k\">.</span>show <span class=\"k\">||</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","  <span class=\"k\">var</span> padding<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> opt_opts<span class=\"k\">.</span>borderPadding <span class=\"k\">===</span> <span class=\"s\">'number'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","    padding <span class=\"k\">=</span> opt_opts<span class=\"k\">.</span>borderPadding<span class=\"k\">;</span>","  <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","    padding <span class=\"k\">=</span> MarkerManager<span class=\"k\">.</span>DEFAULT_BORDER_PADDING_<span class=\"k\">;</span>","  <span class=\"k\">}</span>","  <span class=\"c\">// The padding in pixels beyond the viewport, where we will pre-load markers.</span>","  me<span class=\"k\">.</span>swPadding_ <span class=\"k\">=</span> <span class=\"k\">new</span> google<span class=\"k\">.</span>maps<span class=\"k\">.</span>Size<span class=\"k\">(-</span>padding<span class=\"k\">,</span> padding<span class=\"k\">);</span>","  me<span class=\"k\">.</span>nePadding_ <span class=\"k\">=</span> <span class=\"k\">new</span> google<span class=\"k\">.</span>maps<span class=\"k\">.</span>Size<span class=\"k\">(</span>padding<span class=\"k\">,</span> <span class=\"k\">-</span>padding<span class=\"k\">);</span>","  me<span class=\"k\">.</span>borderPadding_ <span class=\"k\">=</span> padding<span class=\"k\">;</span>","","  me<span class=\"k\">.</span>gridWidth_ <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","  me<span class=\"k\">.</span>grid_ <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  me<span class=\"k\">.</span>grid_<span class=\"k\">[</span>me<span class=\"k\">.</span>maxZoom_<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  me<span class=\"k\">.</span>numMarkers_ <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  me<span class=\"k\">.</span>numMarkers_<span class=\"k\">[</span>me<span class=\"k\">.</span>maxZoom_<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","","  google<span class=\"k\">.</span>maps<span class=\"k\">.</span>event<span class=\"k\">.</span>addListener<span class=\"k\">(</span>map<span class=\"k\">,</span> <span class=\"s\">'dragend'</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    me<span class=\"k\">.</span>onMapMoveEnd_<span class=\"k\">();</span>","  <span class=\"k\">}</span><span class=\"k\">);</span>","  ","  google<span class=\"k\">.</span>maps<span class=\"k\">.</span>event<span class=\"k\">.</span>addListener<span class=\"k\">(</span>map<span class=\"k\">,</span> <span class=\"s\">'idle'</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    me<span class=\"k\">.</span>onMapMoveEnd_<span class=\"k\">();</span>","  <span class=\"k\">}</span><span class=\"k\">);</span>","  ","  google<span class=\"k\">.</span>maps<span class=\"k\">.</span>event<span class=\"k\">.</span>addListener<span class=\"k\">(</span>map<span class=\"k\">,</span> <span class=\"s\">'zoom_changed'</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    me<span class=\"k\">.</span>onMapMoveEnd_<span class=\"k\">();</span>","  <span class=\"k\">}</span><span class=\"k\">);</span>","","","","  <span class=\"c\">/**</span>","<span class=\"c\">   * This closure provide easy access to the map.</span>","<span class=\"c\">   * They are used as callbacks, not as methods.</span>","<span class=\"c\">   * @param GMarker marker Marker to be removed from the map</span>","<span class=\"c\">   * @private</span>","<span class=\"c\">   */</span>","  me<span class=\"k\">.</span>removeOverlay_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>marker<span class=\"k\">)</span> <span class=\"k\">{</span>","    marker<span class=\"k\">.</span>setMap<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">);</span>","    me<span class=\"k\">.</span>shownMarkers_<span class=\"k\">--;</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  <span class=\"c\">/**</span>","<span class=\"c\">   * This closure provide easy access to the map.</span>","<span class=\"c\">   * They are used as callbacks, not as methods.</span>","<span class=\"c\">   * @param GMarker marker Marker to be added to the map</span>","<span class=\"c\">   * @private</span>","<span class=\"c\">   */</span>","  me<span class=\"k\">.</span>addOverlay_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>marker<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>me<span class=\"k\">.</span>show_<span class=\"k\">)</span> <span class=\"k\">{</span>","      marker<span class=\"k\">.</span>setMap<span class=\"k\">(</span>me<span class=\"k\">.</span>map_<span class=\"k\">);</span>","      me<span class=\"k\">.</span>shownMarkers_<span class=\"k\">++;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span><span class=\"k\">;</span>","","  me<span class=\"k\">.</span>resetManager_<span class=\"k\">();</span>","  me<span class=\"k\">.</span>shownMarkers_ <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","  me<span class=\"k\">.</span>shownBounds_ <span class=\"k\">=</span> me<span class=\"k\">.</span>getMapGridBounds_<span class=\"k\">();</span>","  ","  google<span class=\"k\">.</span>maps<span class=\"k\">.</span>event<span class=\"k\">.</span>trigger<span class=\"k\">(</span>me<span class=\"k\">,</span> <span class=\"s\">'loaded'</span><span class=\"k\">);</span>","  ","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Default tile size used for deviding the map into a grid.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>DEFAULT_TILE_SIZE_ <span class=\"k\">=</span> <span class=\"s\">1024</span><span class=\"k\">;</span>","","<span class=\"c\">/*</span>","<span class=\"c\"> *  How much extra space to show around the map border so</span>","<span class=\"c\"> *  dragging doesn't result in an empty place.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>DEFAULT_BORDER_PADDING_ <span class=\"k\">=</span> <span class=\"s\">100</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Default tilesize of single tile world.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>MERCATOR_ZOOM_LEVEL_ZERO_RANGE <span class=\"k\">=</span> <span class=\"s\">256</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Initializes MarkerManager arrays for all zoom levels</span>","<span class=\"c\"> * Called by constructor and by clearAllMarkers</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>resetManager_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> mapWidth <span class=\"k\">=</span> MarkerManager<span class=\"k\">.</span>MERCATOR_ZOOM_LEVEL_ZERO_RANGE<span class=\"k\">;</span>","  <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> zoom <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> zoom <span class=\"k\">&lt;=</span> <span class=\"k\">this</span><span class=\"k\">.</span>maxZoom_<span class=\"k\">;</span> <span class=\"k\">++</span>zoom<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>grid_<span class=\"k\">[</span>zoom<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>numMarkers_<span class=\"k\">[</span>zoom<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>gridWidth_<span class=\"k\">[</span>zoom<span class=\"k\">]</span> <span class=\"k\">=</span> Math<span class=\"k\">.</span>ceil<span class=\"k\">(</span>mapWidth <span class=\"k\">/</span> <span class=\"k\">this</span><span class=\"k\">.</span>tileSize_<span class=\"k\">);</span>","    mapWidth <span class=\"k\">&lt;&lt;=</span> <span class=\"s\">1</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>","","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Removes all markers in the manager, and</span>","<span class=\"c\"> * removes any visible markers from the map.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>clearMarkers <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>processAll_<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>shownBounds_<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>removeOverlay_<span class=\"k\">);</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>resetManager_<span class=\"k\">();</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Gets the tile coordinate for a given latlng point.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {LatLng} latlng The geographical point.</span>","<span class=\"c\"> * @param {Number} zoom The zoom level.</span>","<span class=\"c\"> * @param {google.maps.Size} padding The padding used to shift the pixel coordinate.</span>","<span class=\"c\"> *               Used for expanding a bounds to include an extra padding</span>","<span class=\"c\"> *               of pixels surrounding the bounds.</span>","<span class=\"c\"> * @return {GPoint} The point in tile coordinates.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getTilePoint_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>latlng<span class=\"k\">,</span> zoom<span class=\"k\">,</span> padding<span class=\"k\">)</span> <span class=\"k\">{</span>","","  <span class=\"k\">var</span> pixelPoint <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>projectionHelper_<span class=\"k\">.</span>LatLngToPixel<span class=\"k\">(</span>latlng<span class=\"k\">,</span> zoom<span class=\"k\">);</span>","","  <span class=\"k\">var</span> point <span class=\"k\">=</span> <span class=\"k\">new</span> google<span class=\"k\">.</span>maps<span class=\"k\">.</span>Point<span class=\"k\">(</span>","    Math<span class=\"k\">.</span>floor<span class=\"k\">((</span>pixelPoint<span class=\"k\">.</span>x <span class=\"k\">+</span> padding<span class=\"k\">.</span>width<span class=\"k\">)</span> <span class=\"k\">/</span> <span class=\"k\">this</span><span class=\"k\">.</span>tileSize_<span class=\"k\">),</span>","    Math<span class=\"k\">.</span>floor<span class=\"k\">((</span>pixelPoint<span class=\"k\">.</span>y <span class=\"k\">+</span> padding<span class=\"k\">.</span>height<span class=\"k\">)</span> <span class=\"k\">/</span> <span class=\"k\">this</span><span class=\"k\">.</span>tileSize_<span class=\"k\">)</span>","  <span class=\"k\">);</span>","","  <span class=\"k\">return</span> point<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Finds the appropriate place to add the marker to the grid.</span>","<span class=\"c\"> * Optimized for speed; does not actually add the marker to the map.</span>","<span class=\"c\"> * Designed for batch-processing thousands of markers.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Marker} marker The marker to add.</span>","<span class=\"c\"> * @param {Number} minZoom The minimum zoom for displaying the marker.</span>","<span class=\"c\"> * @param {Number} maxZoom The maximum zoom for displaying the marker.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addMarkerBatch_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>marker<span class=\"k\">,</span> minZoom<span class=\"k\">,</span> maxZoom<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","","  <span class=\"k\">var</span> mPoint <span class=\"k\">=</span> marker<span class=\"k\">.</span>getPosition<span class=\"k\">();</span>","  marker<span class=\"k\">.</span>MarkerManager_minZoom <span class=\"k\">=</span> minZoom<span class=\"k\">;</span>","  ","  ","  <span class=\"c\">// Tracking markers is expensive, so we do this only if the</span>","  <span class=\"c\">// user explicitly requested it when creating marker manager.</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>trackMarkers_<span class=\"k\">)</span> <span class=\"k\">{</span>","    google<span class=\"k\">.</span>maps<span class=\"k\">.</span>event<span class=\"k\">.</span>addListener<span class=\"k\">(</span>marker<span class=\"k\">,</span> <span class=\"s\">'changed'</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">,</span> c<span class=\"k\">)</span> <span class=\"k\">{</span>","      me<span class=\"k\">.</span>onMarkerMoved_<span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">,</span> c<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">);</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">var</span> gridPoint <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getTilePoint_<span class=\"k\">(</span>mPoint<span class=\"k\">,</span> maxZoom<span class=\"k\">,</span> <span class=\"k\">new</span> google<span class=\"k\">.</span>maps<span class=\"k\">.</span>Size<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">));</span>","","  <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> zoom <span class=\"k\">=</span> maxZoom<span class=\"k\">;</span> zoom <span class=\"k\">&gt;=</span> minZoom<span class=\"k\">;</span> zoom<span class=\"k\">--)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> cell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getGridCellCreate_<span class=\"k\">(</span>gridPoint<span class=\"k\">.</span>x<span class=\"k\">,</span> gridPoint<span class=\"k\">.</span>y<span class=\"k\">,</span> zoom<span class=\"k\">);</span>","    cell<span class=\"k\">.</span>push<span class=\"k\">(</span>marker<span class=\"k\">);</span>","","    gridPoint<span class=\"k\">.</span>x <span class=\"k\">=</span> gridPoint<span class=\"k\">.</span>x <span class=\"k\">&gt;&gt;</span> <span class=\"s\">1</span><span class=\"k\">;</span>","    gridPoint<span class=\"k\">.</span>y <span class=\"k\">=</span> gridPoint<span class=\"k\">.</span>y <span class=\"k\">&gt;&gt;</span> <span class=\"s\">1</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Returns whether or not the given point is visible in the shown bounds. This</span>","<span class=\"c\"> * is a helper method that takes care of the corner case, when shownBounds have</span>","<span class=\"c\"> * negative minX value.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Point} point a point on a grid.</span>","<span class=\"c\"> * @return {Boolean} Whether or not the given point is visible in the currently</span>","<span class=\"c\"> * shown bounds.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>isGridPointVisible_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>point<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> vertical <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>shownBounds_<span class=\"k\">.</span>minY <span class=\"k\">&lt;=</span> point<span class=\"k\">.</span>y <span class=\"k\">&amp;&amp;</span>","      point<span class=\"k\">.</span>y <span class=\"k\">&lt;=</span> <span class=\"k\">this</span><span class=\"k\">.</span>shownBounds_<span class=\"k\">.</span>maxY<span class=\"k\">;</span>","  <span class=\"k\">var</span> minX <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>shownBounds_<span class=\"k\">.</span>minX<span class=\"k\">;</span>","  <span class=\"k\">var</span> horizontal <span class=\"k\">=</span> minX <span class=\"k\">&lt;=</span> point<span class=\"k\">.</span>x <span class=\"k\">&amp;&amp;</span> point<span class=\"k\">.</span>x <span class=\"k\">&lt;=</span> <span class=\"k\">this</span><span class=\"k\">.</span>shownBounds_<span class=\"k\">.</span>maxX<span class=\"k\">;</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>horizontal <span class=\"k\">&amp;&amp;</span> minX <span class=\"k\">&lt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"c\">// Shifts the negative part of the rectangle. As point.x is always less</span>","    <span class=\"c\">// than grid width, only test shifted minX .. 0 part of the shown bounds.</span>","    <span class=\"k\">var</span> width <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>gridWidth_<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>shownBounds_<span class=\"k\">.</span>z<span class=\"k\">];</span>","    horizontal <span class=\"k\">=</span> minX <span class=\"k\">+</span> width <span class=\"k\">&lt;=</span> point<span class=\"k\">.</span>x <span class=\"k\">&amp;&amp;</span> point<span class=\"k\">.</span>x <span class=\"k\">&lt;=</span> width <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>","  <span class=\"k\">return</span> vertical <span class=\"k\">&amp;&amp;</span> horizontal<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Reacts to a notification from a marker that it has moved to a new location.</span>","<span class=\"c\"> * It scans the grid all all zoom levels and moves the marker from the old grid</span>","<span class=\"c\"> * location to a new grid location.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Marker} marker The marker that moved.</span>","<span class=\"c\"> * @param {LatLng} oldPoint The old position of the marker.</span>","<span class=\"c\"> * @param {LatLng} newPoint The new position of the marker.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>onMarkerMoved_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>marker<span class=\"k\">,</span> oldPoint<span class=\"k\">,</span> newPoint<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"c\">// NOTE: We do not know the minimum or maximum zoom the marker was</span>","  <span class=\"c\">// added at, so we start at the absolute maximum. Whenever we successfully</span>","  <span class=\"c\">// remove a marker at a given zoom, we add it at the new grid coordinates.</span>","  <span class=\"k\">var</span> zoom <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>maxZoom_<span class=\"k\">;</span>","  <span class=\"k\">var</span> changed <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","  <span class=\"k\">var</span> oldGrid <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getTilePoint_<span class=\"k\">(</span>oldPoint<span class=\"k\">,</span> zoom<span class=\"k\">,</span> <span class=\"k\">new</span> google<span class=\"k\">.</span>maps<span class=\"k\">.</span>Size<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">));</span>","  <span class=\"k\">var</span> newGrid <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getTilePoint_<span class=\"k\">(</span>newPoint<span class=\"k\">,</span> zoom<span class=\"k\">,</span> <span class=\"k\">new</span> google<span class=\"k\">.</span>maps<span class=\"k\">.</span>Size<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">));</span>","  <span class=\"k\">while</span> <span class=\"k\">(</span>zoom <span class=\"k\">&gt;=</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>oldGrid<span class=\"k\">.</span>x <span class=\"k\">!==</span> newGrid<span class=\"k\">.</span>x <span class=\"k\">||</span> oldGrid<span class=\"k\">.</span>y <span class=\"k\">!==</span> newGrid<span class=\"k\">.</span>y<span class=\"k\">))</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> cell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getGridCellNoCreate_<span class=\"k\">(</span>oldGrid<span class=\"k\">.</span>x<span class=\"k\">,</span> oldGrid<span class=\"k\">.</span>y<span class=\"k\">,</span> zoom<span class=\"k\">);</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>cell<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>removeFromArray_<span class=\"k\">(</span>cell<span class=\"k\">,</span> marker<span class=\"k\">))</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>getGridCellCreate_<span class=\"k\">(</span>newGrid<span class=\"k\">.</span>x<span class=\"k\">,</span> newGrid<span class=\"k\">.</span>y<span class=\"k\">,</span> zoom<span class=\"k\">).</span>push<span class=\"k\">(</span>marker<span class=\"k\">);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    <span class=\"c\">// For the current zoom we also need to update the map. Markers that no</span>","    <span class=\"c\">// longer are visible are removed from the map. Markers that moved into</span>","    <span class=\"c\">// the shown bounds are added to the map. This also lets us keep the count</span>","    <span class=\"c\">// of visible markers up to date.</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>zoom <span class=\"k\">===</span> <span class=\"k\">this</span><span class=\"k\">.</span>mapZoom_<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>isGridPointVisible_<span class=\"k\">(</span>oldGrid<span class=\"k\">))</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>isGridPointVisible_<span class=\"k\">(</span>newGrid<span class=\"k\">))</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>removeOverlay_<span class=\"k\">(</span>marker<span class=\"k\">);</span>","          changed <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>isGridPointVisible_<span class=\"k\">(</span>newGrid<span class=\"k\">))</span> <span class=\"k\">{</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>addOverlay_<span class=\"k\">(</span>marker<span class=\"k\">);</span>","          changed <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    oldGrid<span class=\"k\">.</span>x <span class=\"k\">=</span> oldGrid<span class=\"k\">.</span>x <span class=\"k\">&gt;&gt;</span> <span class=\"s\">1</span><span class=\"k\">;</span>","    oldGrid<span class=\"k\">.</span>y <span class=\"k\">=</span> oldGrid<span class=\"k\">.</span>y <span class=\"k\">&gt;&gt;</span> <span class=\"s\">1</span><span class=\"k\">;</span>","    newGrid<span class=\"k\">.</span>x <span class=\"k\">=</span> newGrid<span class=\"k\">.</span>x <span class=\"k\">&gt;&gt;</span> <span class=\"s\">1</span><span class=\"k\">;</span>","    newGrid<span class=\"k\">.</span>y <span class=\"k\">=</span> newGrid<span class=\"k\">.</span>y <span class=\"k\">&gt;&gt;</span> <span class=\"s\">1</span><span class=\"k\">;</span>","    <span class=\"k\">--</span>zoom<span class=\"k\">;</span>","  <span class=\"k\">}</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>changed<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>notifyListeners_<span class=\"k\">();</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Removes marker from the manager and from the map</span>","<span class=\"c\"> * (if it's currently visible).</span>","<span class=\"c\"> * @param {GMarker} marker The marker to delete.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>removeMarker <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>marker<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> zoom <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>maxZoom_<span class=\"k\">;</span>","  <span class=\"k\">var</span> changed <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","  <span class=\"k\">var</span> point <span class=\"k\">=</span> marker<span class=\"k\">.</span>getPosition<span class=\"k\">();</span>","  <span class=\"k\">var</span> grid <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getTilePoint_<span class=\"k\">(</span>point<span class=\"k\">,</span> zoom<span class=\"k\">,</span> <span class=\"k\">new</span> google<span class=\"k\">.</span>maps<span class=\"k\">.</span>Size<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">));</span>","  <span class=\"k\">while</span> <span class=\"k\">(</span>zoom <span class=\"k\">&gt;=</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> cell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getGridCellNoCreate_<span class=\"k\">(</span>grid<span class=\"k\">.</span>x<span class=\"k\">,</span> grid<span class=\"k\">.</span>y<span class=\"k\">,</span> zoom<span class=\"k\">);</span>","","    <span class=\"k\">if</span> <span class=\"k\">(</span>cell<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>removeFromArray_<span class=\"k\">(</span>cell<span class=\"k\">,</span> marker<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"c\">// For the current zoom we also need to update the map. Markers that no</span>","    <span class=\"c\">// longer are visible are removed from the map. This also lets us keep the count</span>","    <span class=\"c\">// of visible markers up to date.</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>zoom <span class=\"k\">===</span> <span class=\"k\">this</span><span class=\"k\">.</span>mapZoom_<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>isGridPointVisible_<span class=\"k\">(</span>grid<span class=\"k\">))</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>removeOverlay_<span class=\"k\">(</span>marker<span class=\"k\">);</span>","        changed <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    grid<span class=\"k\">.</span>x <span class=\"k\">=</span> grid<span class=\"k\">.</span>x <span class=\"k\">&gt;&gt;</span> <span class=\"s\">1</span><span class=\"k\">;</span>","    grid<span class=\"k\">.</span>y <span class=\"k\">=</span> grid<span class=\"k\">.</span>y <span class=\"k\">&gt;&gt;</span> <span class=\"s\">1</span><span class=\"k\">;</span>","    <span class=\"k\">--</span>zoom<span class=\"k\">;</span>","  <span class=\"k\">}</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>changed<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>notifyListeners_<span class=\"k\">();</span>","  <span class=\"k\">}</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>numMarkers_<span class=\"k\">[</span>marker<span class=\"k\">.</span>MarkerManager_minZoom<span class=\"k\">]--;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Add many markers at once.</span>","<span class=\"c\"> * Does not actually update the map, just the internal grid.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Array of Marker} markers The markers to add.</span>","<span class=\"c\"> * @param {Number} minZoom The minimum zoom level to display the markers.</span>","<span class=\"c\"> * @param {Number} opt_maxZoom The maximum zoom level to display the markers.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addMarkers <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>markers<span class=\"k\">,</span> minZoom<span class=\"k\">,</span> opt_maxZoom<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> maxZoom <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getOptMaxZoom_<span class=\"k\">(</span>opt_maxZoom<span class=\"k\">);</span>","  <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> markers<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">;</span> i <span class=\"k\">&gt;=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">--)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>addMarkerBatch_<span class=\"k\">(</span>markers<span class=\"k\">[</span>i<span class=\"k\">],</span> minZoom<span class=\"k\">,</span> maxZoom<span class=\"k\">);</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">this</span><span class=\"k\">.</span>numMarkers_<span class=\"k\">[</span>minZoom<span class=\"k\">]</span> <span class=\"k\">+=</span> markers<span class=\"k\">.</span>length<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Returns the value of the optional maximum zoom. This method is defined so</span>","<span class=\"c\"> * that we have just one place where optional maximum zoom is calculated.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Number} opt_maxZoom The optinal maximum zoom.</span>","<span class=\"c\"> * @return The maximum zoom.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getOptMaxZoom_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>opt_maxZoom<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">return</span> opt_maxZoom <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>maxZoom_<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Calculates the total number of markers potentially visible at a given</span>","<span class=\"c\"> * zoom level.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Number} zoom The zoom level to check.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getMarkerCount <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>zoom<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> total <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","  <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> z <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> z <span class=\"k\">&lt;=</span> zoom<span class=\"k\">;</span> z<span class=\"k\">++)</span> <span class=\"k\">{</span>","    total <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>numMarkers_<span class=\"k\">[</span>z<span class=\"k\">];</span>","  <span class=\"k\">}</span>","  <span class=\"k\">return</span> total<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/** </span>","<span class=\"c\"> * Returns a marker given latitude, longitude and zoom. If the marker does not </span>","<span class=\"c\"> * exist, the method will return a new marker. If a new marker is created, </span>","<span class=\"c\"> * it will NOT be added to the manager. </span>","<span class=\"c\"> * </span>","<span class=\"c\"> * @param {Number} lat - the latitude of a marker. </span>","<span class=\"c\"> * @param {Number} lng - the longitude of a marker. </span>","<span class=\"c\"> * @param {Number} zoom - the zoom level </span>","<span class=\"c\"> * @return {GMarker} marker - the marker found at lat and lng </span>","<span class=\"c\"> */</span> ","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getMarker <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>lat<span class=\"k\">,</span> lng<span class=\"k\">,</span> zoom<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> mPoint <span class=\"k\">=</span> <span class=\"k\">new</span> google<span class=\"k\">.</span>maps<span class=\"k\">.</span>LatLng<span class=\"k\">(</span>lat<span class=\"k\">,</span> lng<span class=\"k\">);</span> ","  <span class=\"k\">var</span> gridPoint <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getTilePoint_<span class=\"k\">(</span>mPoint<span class=\"k\">,</span> zoom<span class=\"k\">,</span> <span class=\"k\">new</span> google<span class=\"k\">.</span>maps<span class=\"k\">.</span>Size<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">));</span>","","  <span class=\"c\">//var marker = new google.maps.Marker({position: mPoint}); </span>","  <span class=\"k\">var</span> marker <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span> ","    ","  <span class=\"k\">var</span> cellArray <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getGridCellNoCreate_<span class=\"k\">(</span>gridPoint<span class=\"k\">.</span>x<span class=\"k\">,</span> gridPoint<span class=\"k\">.</span>y<span class=\"k\">,</span> zoom<span class=\"k\">);</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>cellArray <span class=\"k\">!==</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"c\">/*for (var i = 0; i &lt; cellArray.length; i++) </span>","<span class=\"c\">    { </span>","<span class=\"c\">      if (lat === cellArray[i].getPosition().lat() &amp;&amp; lng === cellArray[i].getPosition().lng()) {</span>","<span class=\"c\">\t\t  console.log</span>","<span class=\"c\">        marker = cellArray[i]; </span>","<span class=\"c\">      } </span>","<span class=\"c\">    } */</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> cellArray<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>mPoint<span class=\"k\">.</span>equals<span class=\"k\">(</span>cellArray<span class=\"k\">[</span>i<span class=\"k\">].</span>getPosition<span class=\"k\">()))</span>","\t\tmarker <span class=\"k\">=</span> cellArray<span class=\"k\">[</span>i<span class=\"k\">];</span>","\t<span class=\"k\">}</span> ","  <span class=\"k\">}</span> ","  <span class=\"k\">return</span> marker<span class=\"k\">;</span> ","<span class=\"k\">}</span><span class=\"k\">;</span> ","","<span class=\"c\">/**</span>","<span class=\"c\"> * Add a single marker to the map.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Marker} marker The marker to add.</span>","<span class=\"c\"> * @param {Number} minZoom The minimum zoom level to display the marker.</span>","<span class=\"c\"> * @param {Number} opt_maxZoom The maximum zoom level to display the marker.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addMarker <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>marker<span class=\"k\">,</span> minZoom<span class=\"k\">,</span> opt_maxZoom<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> maxZoom <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getOptMaxZoom_<span class=\"k\">(</span>opt_maxZoom<span class=\"k\">);</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>addMarkerBatch_<span class=\"k\">(</span>marker<span class=\"k\">,</span> minZoom<span class=\"k\">,</span> maxZoom<span class=\"k\">);</span>","  <span class=\"k\">var</span> gridPoint <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getTilePoint_<span class=\"k\">(</span>marker<span class=\"k\">.</span>getPosition<span class=\"k\">(),</span> <span class=\"k\">this</span><span class=\"k\">.</span>mapZoom_<span class=\"k\">,</span> <span class=\"k\">new</span> google<span class=\"k\">.</span>maps<span class=\"k\">.</span>Size<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">));</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>isGridPointVisible_<span class=\"k\">(</span>gridPoint<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span>","      minZoom <span class=\"k\">&lt;=</span> <span class=\"k\">this</span><span class=\"k\">.</span>shownBounds_<span class=\"k\">.</span>z <span class=\"k\">&amp;&amp;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>shownBounds_<span class=\"k\">.</span>z <span class=\"k\">&lt;=</span> maxZoom<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>addOverlay_<span class=\"k\">(</span>marker<span class=\"k\">);</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>notifyListeners_<span class=\"k\">();</span>","  <span class=\"k\">}</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>numMarkers_<span class=\"k\">[</span>minZoom<span class=\"k\">]++;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Helper class to create a bounds of INT ranges.</span>","<span class=\"c\"> * @param bounds Array.&lt;Object.&lt;string, number&gt;&gt; Bounds object.</span>","<span class=\"c\"> * @constructor</span>","<span class=\"c\"> */</span>","<span class=\"k\">function</span> GridBounds<span class=\"k\">(</span>bounds<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"c\">// [sw, ne]</span>","  ","  <span class=\"k\">this</span><span class=\"k\">.</span>minX <span class=\"k\">=</span> Math<span class=\"k\">.</span>min<span class=\"k\">(</span>bounds<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>x<span class=\"k\">,</span> bounds<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>x<span class=\"k\">);</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>maxX <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span>bounds<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>x<span class=\"k\">,</span> bounds<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>x<span class=\"k\">);</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>minY <span class=\"k\">=</span> Math<span class=\"k\">.</span>min<span class=\"k\">(</span>bounds<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>y<span class=\"k\">,</span> bounds<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>y<span class=\"k\">);</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>maxY <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span>bounds<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>y<span class=\"k\">,</span> bounds<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>y<span class=\"k\">);</span>","      ","<span class=\"k\">}</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Returns true if this bounds equal the given bounds.</span>","<span class=\"c\"> * @param {GridBounds} gridBounds GridBounds The bounds to test.</span>","<span class=\"c\"> * @return {Boolean} This Bounds equals the given GridBounds.</span>","<span class=\"c\"> */</span>","GridBounds<span class=\"k\">.</span>prototype<span class=\"k\">.</span>equals <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>gridBounds<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>maxX <span class=\"k\">===</span> gridBounds<span class=\"k\">.</span>maxX <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>maxY <span class=\"k\">===</span> gridBounds<span class=\"k\">.</span>maxY <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>minX <span class=\"k\">===</span> gridBounds<span class=\"k\">.</span>minX <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>minY <span class=\"k\">===</span> gridBounds<span class=\"k\">.</span>minY<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>  ","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Returns true if this bounds (inclusively) contains the given point.</span>","<span class=\"c\"> * @param {Point} point  The point to test.</span>","<span class=\"c\"> * @return {Boolean} This Bounds contains the given Point.</span>","<span class=\"c\"> */</span>","GridBounds<span class=\"k\">.</span>prototype<span class=\"k\">.</span>containsPoint <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>point<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> outer <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","  <span class=\"k\">return</span> <span class=\"k\">(</span>outer<span class=\"k\">.</span>minX <span class=\"k\">&lt;=</span> point<span class=\"k\">.</span>x <span class=\"k\">&amp;&amp;</span> outer<span class=\"k\">.</span>maxX <span class=\"k\">&gt;=</span> point<span class=\"k\">.</span>x <span class=\"k\">&amp;&amp;</span> outer<span class=\"k\">.</span>minY <span class=\"k\">&lt;=</span> point<span class=\"k\">.</span>y <span class=\"k\">&amp;&amp;</span> outer<span class=\"k\">.</span>maxY <span class=\"k\">&gt;=</span> point<span class=\"k\">.</span>y<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Get a cell in the grid, creating it first if necessary.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Optimization candidate</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Number} x The x coordinate of the cell.</span>","<span class=\"c\"> * @param {Number} y The y coordinate of the cell.</span>","<span class=\"c\"> * @param {Number} z The z coordinate of the cell.</span>","<span class=\"c\"> * @return {Array} The cell in the array.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getGridCellCreate_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>x<span class=\"k\">,</span> y<span class=\"k\">,</span> z<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> grid <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>grid_<span class=\"k\">[</span>z<span class=\"k\">];</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>x <span class=\"k\">&lt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","    x <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>gridWidth_<span class=\"k\">[</span>z<span class=\"k\">];</span>","  <span class=\"k\">}</span>","  <span class=\"k\">var</span> gridCol <span class=\"k\">=</span> grid<span class=\"k\">[</span>x<span class=\"k\">];</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>gridCol<span class=\"k\">)</span> <span class=\"k\">{</span>","    gridCol <span class=\"k\">=</span> grid<span class=\"k\">[</span>x<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[];</span>","    <span class=\"k\">return</span> <span class=\"k\">(</span>gridCol<span class=\"k\">[</span>y<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[]);</span>","  <span class=\"k\">}</span>","  <span class=\"k\">var</span> gridCell <span class=\"k\">=</span> gridCol<span class=\"k\">[</span>y<span class=\"k\">];</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span>gridCell<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span> <span class=\"k\">(</span>gridCol<span class=\"k\">[</span>y<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">[]);</span>","  <span class=\"k\">}</span>","  <span class=\"k\">return</span> gridCell<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Get a cell in the grid, returning undefined if it does not exist.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * NOTE: Optimized for speed -- otherwise could combine with getGridCellCreate_.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Number} x The x coordinate of the cell.</span>","<span class=\"c\"> * @param {Number} y The y coordinate of the cell.</span>","<span class=\"c\"> * @param {Number} z The z coordinate of the cell.</span>","<span class=\"c\"> * @return {Array} The cell in the array.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getGridCellNoCreate_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>x<span class=\"k\">,</span> y<span class=\"k\">,</span> z<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> grid <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>grid_<span class=\"k\">[</span>z<span class=\"k\">];</span>","  ","  <span class=\"k\">if</span> <span class=\"k\">(</span>x <span class=\"k\">&lt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","    x <span class=\"k\">+=</span> <span class=\"k\">this</span><span class=\"k\">.</span>gridWidth_<span class=\"k\">[</span>z<span class=\"k\">];</span>","  <span class=\"k\">}</span>","  <span class=\"k\">var</span> gridCol <span class=\"k\">=</span> grid<span class=\"k\">[</span>x<span class=\"k\">];</span>","  <span class=\"k\">return</span> gridCol <span class=\"k\">?</span> gridCol<span class=\"k\">[</span>y<span class=\"k\">]</span> <span class=\"k\">:</span> undefined<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Turns at geographical bounds into a grid-space bounds.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {LatLngBounds} bounds The geographical bounds.</span>","<span class=\"c\"> * @param {Number} zoom The zoom level of the bounds.</span>","<span class=\"c\"> * @param {google.maps.Size} swPadding The padding in pixels to extend beyond the</span>","<span class=\"c\"> * given bounds.</span>","<span class=\"c\"> * @param {google.maps.Size} nePadding The padding in pixels to extend beyond the</span>","<span class=\"c\"> * given bounds.</span>","<span class=\"c\"> * @return {GridBounds} The bounds in grid space.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getGridBounds_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>bounds<span class=\"k\">,</span> zoom<span class=\"k\">,</span> swPadding<span class=\"k\">,</span> nePadding<span class=\"k\">)</span> <span class=\"k\">{</span>","  zoom <span class=\"k\">=</span> Math<span class=\"k\">.</span>min<span class=\"k\">(</span>zoom<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>maxZoom_<span class=\"k\">);</span>","","  <span class=\"k\">var</span> bl <span class=\"k\">=</span> bounds<span class=\"k\">.</span>getSouthWest<span class=\"k\">();</span>","  <span class=\"k\">var</span> tr <span class=\"k\">=</span> bounds<span class=\"k\">.</span>getNorthEast<span class=\"k\">();</span>","  <span class=\"k\">var</span> sw <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getTilePoint_<span class=\"k\">(</span>bl<span class=\"k\">,</span> zoom<span class=\"k\">,</span> swPadding<span class=\"k\">);</span>","","  <span class=\"k\">var</span> ne <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getTilePoint_<span class=\"k\">(</span>tr<span class=\"k\">,</span> zoom<span class=\"k\">,</span> nePadding<span class=\"k\">);</span>","  <span class=\"k\">var</span> gw <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>gridWidth_<span class=\"k\">[</span>zoom<span class=\"k\">];</span>","","  <span class=\"c\">// Crossing the prime meridian requires correction of bounds.</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>tr<span class=\"k\">.</span>lng<span class=\"k\">()</span> <span class=\"k\">&lt;</span> bl<span class=\"k\">.</span>lng<span class=\"k\">()</span> <span class=\"k\">||</span> ne<span class=\"k\">.</span>x <span class=\"k\">&lt;</span> sw<span class=\"k\">.</span>x<span class=\"k\">)</span> <span class=\"k\">{</span>","    sw<span class=\"k\">.</span>x <span class=\"k\">-=</span> gw<span class=\"k\">;</span>","  <span class=\"k\">}</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>ne<span class=\"k\">.</span>x <span class=\"k\">-</span> sw<span class=\"k\">.</span>x  <span class=\"k\">+</span> <span class=\"s\">1</span> <span class=\"k\">&gt;=</span> gw<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"c\">// Computed grid bounds are larger than the world; truncate.</span>","    sw<span class=\"k\">.</span>x <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","    ne<span class=\"k\">.</span>x <span class=\"k\">=</span> gw <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">var</span> gridBounds <span class=\"k\">=</span> <span class=\"k\">new</span> GridBounds<span class=\"k\">([</span>sw<span class=\"k\">,</span> ne<span class=\"k\">]);</span>","  gridBounds<span class=\"k\">.</span>z <span class=\"k\">=</span> zoom<span class=\"k\">;</span>","","  <span class=\"k\">return</span> gridBounds<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Gets the grid-space bounds for the current map viewport.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @return {Bounds} The bounds in grid space.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>getMapGridBounds_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","  <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>getGridBounds_<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>map_<span class=\"k\">.</span>getBounds<span class=\"k\">(),</span> <span class=\"k\">this</span><span class=\"k\">.</span>mapZoom_<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>swPadding_<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>nePadding_<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Event listener for map:movend.</span>","<span class=\"c\"> * NOTE: Use a timeout so that the user is not blocked</span>","<span class=\"c\"> * from moving the map.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Removed this because a a lack of a scopy override/callback function on events. </span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>onMapMoveEnd_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>objectSetTimeout_<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>updateMarkers_<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Call a function or evaluate an expression after a specified number of</span>","<span class=\"c\"> * milliseconds.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Equivalent to the standard window.setTimeout function, but the given</span>","<span class=\"c\"> * function executes as a method of this instance. So the function passed to</span>","<span class=\"c\"> * objectSetTimeout can contain references to this.</span>","<span class=\"c\"> *    objectSetTimeout(this, function () { alert(this.x) }, 1000);</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Object} object  The target object.</span>","<span class=\"c\"> * @param {Function} command  The command to run.</span>","<span class=\"c\"> * @param {Number} milliseconds  The delay.</span>","<span class=\"c\"> * @return {Boolean}  Success.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>objectSetTimeout_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>object<span class=\"k\">,</span> command<span class=\"k\">,</span> milliseconds<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">return</span> window<span class=\"k\">.</span>setTimeout<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    command<span class=\"k\">.</span>call<span class=\"k\">(</span>object<span class=\"k\">);</span>","  <span class=\"k\">}</span><span class=\"k\">,</span> milliseconds<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Is this layer visible?</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Returns visibility setting</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @return {Boolean} Visible</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>visible <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","  <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>show_ <span class=\"k\">?</span> <span class=\"k\">true</span> <span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Returns true if the manager is hidden.</span>","<span class=\"c\"> * Otherwise returns false.</span>","<span class=\"c\"> * @return {Boolean} Hidden</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>isHidden <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","  <span class=\"k\">return</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>show_<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Shows the manager if it's currently hidden.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>show <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>show_ <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>refresh<span class=\"k\">();</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Hides the manager if it's currently visible</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>hide <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>show_ <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>refresh<span class=\"k\">();</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Toggles the visibility of the manager.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>toggle <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>show_ <span class=\"k\">=</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>show_<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>refresh<span class=\"k\">();</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Refresh forces the marker-manager into a good state.</span>","<span class=\"c\"> * &lt;ol&gt;</span>","<span class=\"c\"> *   &lt;li&gt;If never before initialized, shows all the markers.&lt;/li&gt;</span>","<span class=\"c\"> *   &lt;li&gt;If previously initialized, removes and re-adds all markers.&lt;/li&gt;</span>","<span class=\"c\"> * &lt;/ol&gt;</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>refresh <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>shownMarkers_ <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>processAll_<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>shownBounds_<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>removeOverlay_<span class=\"k\">);</span>","  <span class=\"k\">}</span>","  <span class=\"c\">// An extra check on this.show_ to increase performance (no need to processAll_)</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>show_<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>processAll_<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>shownBounds_<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>addOverlay_<span class=\"k\">);</span>","  <span class=\"k\">}</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>notifyListeners_<span class=\"k\">();</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * After the viewport may have changed, add or remove markers as needed.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>updateMarkers_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>mapZoom_ <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>map_<span class=\"k\">.</span>getZoom<span class=\"k\">();</span>","  <span class=\"k\">var</span> newBounds <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getMapGridBounds_<span class=\"k\">();</span>","    ","  <span class=\"c\">// If the move does not include new grid sections,</span>","  <span class=\"c\">// we have no work to do:</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>newBounds<span class=\"k\">.</span>equals<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>shownBounds_<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> newBounds<span class=\"k\">.</span>z <span class=\"k\">===</span> <span class=\"k\">this</span><span class=\"k\">.</span>shownBounds_<span class=\"k\">.</span>z<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">return</span><span class=\"k\">;</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">if</span> <span class=\"k\">(</span>newBounds<span class=\"k\">.</span>z <span class=\"k\">!==</span> <span class=\"k\">this</span><span class=\"k\">.</span>shownBounds_<span class=\"k\">.</span>z<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>processAll_<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>shownBounds_<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>removeOverlay_<span class=\"k\">);</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>show_<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"c\">// performance</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>processAll_<span class=\"k\">(</span>newBounds<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>addOverlay_<span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","    <span class=\"c\">// Remove markers:</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>rectangleDiff_<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>shownBounds_<span class=\"k\">,</span> newBounds<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>removeCellMarkers_<span class=\"k\">);</span>","","    <span class=\"c\">// Add markers:</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>show_<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"c\">// performance</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>rectangleDiff_<span class=\"k\">(</span>newBounds<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>shownBounds_<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>addCellMarkers_<span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>shownBounds_ <span class=\"k\">=</span> newBounds<span class=\"k\">;</span>","","  <span class=\"k\">this</span><span class=\"k\">.</span>notifyListeners_<span class=\"k\">();</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Notify listeners when the state of what is displayed changes.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>notifyListeners_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","  google<span class=\"k\">.</span>maps<span class=\"k\">.</span>event<span class=\"k\">.</span>trigger<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"s\">'changed'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>shownBounds_<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>shownMarkers_<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Process all markers in the bounds provided, using a callback.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Bounds} bounds The bounds in grid space.</span>","<span class=\"c\"> * @param {Function} callback The function to call for each marker.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>processAll_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>bounds<span class=\"k\">,</span> callback<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> x <span class=\"k\">=</span> bounds<span class=\"k\">.</span>minX<span class=\"k\">;</span> x <span class=\"k\">&lt;=</span> bounds<span class=\"k\">.</span>maxX<span class=\"k\">;</span> x<span class=\"k\">++)</span> <span class=\"k\">{</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> y <span class=\"k\">=</span> bounds<span class=\"k\">.</span>minY<span class=\"k\">;</span> y <span class=\"k\">&lt;=</span> bounds<span class=\"k\">.</span>maxY<span class=\"k\">;</span> y<span class=\"k\">++)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>processCellMarkers_<span class=\"k\">(</span>x<span class=\"k\">,</span> y<span class=\"k\">,</span>  bounds<span class=\"k\">.</span>z<span class=\"k\">,</span> callback<span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Process all markers in the grid cell, using a callback.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Number} x The x coordinate of the cell.</span>","<span class=\"c\"> * @param {Number} y The y coordinate of the cell.</span>","<span class=\"c\"> * @param {Number} z The z coordinate of the cell.</span>","<span class=\"c\"> * @param {Function} callback The function to call for each marker.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>processCellMarkers_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>x<span class=\"k\">,</span> y<span class=\"k\">,</span> z<span class=\"k\">,</span> callback<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> cell <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getGridCellNoCreate_<span class=\"k\">(</span>x<span class=\"k\">,</span> y<span class=\"k\">,</span> z<span class=\"k\">);</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span>cell<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> cell<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">;</span> i <span class=\"k\">&gt;=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i<span class=\"k\">--)</span> <span class=\"k\">{</span>","      callback<span class=\"k\">(</span>cell<span class=\"k\">[</span>i<span class=\"k\">]);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Remove all markers in a grid cell.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Number} x The x coordinate of the cell.</span>","<span class=\"c\"> * @param {Number} y The y coordinate of the cell.</span>","<span class=\"c\"> * @param {Number} z The z coordinate of the cell.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>removeCellMarkers_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>x<span class=\"k\">,</span> y<span class=\"k\">,</span> z<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>processCellMarkers_<span class=\"k\">(</span>x<span class=\"k\">,</span> y<span class=\"k\">,</span> z<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>removeOverlay_<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Add all markers in a grid cell.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Number} x The x coordinate of the cell.</span>","<span class=\"c\"> * @param {Number} y The y coordinate of the cell.</span>","<span class=\"c\"> * @param {Number} z The z coordinate of the cell.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>addCellMarkers_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>x<span class=\"k\">,</span> y<span class=\"k\">,</span> z<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>processCellMarkers_<span class=\"k\">(</span>x<span class=\"k\">,</span> y<span class=\"k\">,</span> z<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>addOverlay_<span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Use the rectangleDiffCoords_ function to process all grid cells</span>","<span class=\"c\"> * that are in bounds1 but not bounds2, using a callback, and using</span>","<span class=\"c\"> * the current MarkerManager object as the instance.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Pass the z parameter to the callback in addition to x and y.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Bounds} bounds1 The bounds of all points we may process.</span>","<span class=\"c\"> * @param {Bounds} bounds2 The bounds of points to exclude.</span>","<span class=\"c\"> * @param {Function} callback The callback function to call</span>","<span class=\"c\"> *                   for each grid coordinate (x, y, z).</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>rectangleDiff_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>bounds1<span class=\"k\">,</span> bounds2<span class=\"k\">,</span> callback<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> me <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">;</span>","  me<span class=\"k\">.</span>rectangleDiffCoords_<span class=\"k\">(</span>bounds1<span class=\"k\">,</span> bounds2<span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>x<span class=\"k\">,</span> y<span class=\"k\">)</span> <span class=\"k\">{</span>","    callback<span class=\"k\">.</span>apply<span class=\"k\">(</span>me<span class=\"k\">,</span> <span class=\"k\">[</span>x<span class=\"k\">,</span> y<span class=\"k\">,</span> bounds1<span class=\"k\">.</span>z<span class=\"k\">]);</span>","  <span class=\"k\">}</span><span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Calls the function for all points in bounds1, not in bounds2</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Bounds} bounds1 The bounds of all points we may process.</span>","<span class=\"c\"> * @param {Bounds} bounds2 The bounds of points to exclude.</span>","<span class=\"c\"> * @param {Function} callback The callback function to call</span>","<span class=\"c\"> *                   for each grid coordinate.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>rectangleDiffCoords_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>bounds1<span class=\"k\">,</span> bounds2<span class=\"k\">,</span> callback<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> minX1 <span class=\"k\">=</span> bounds1<span class=\"k\">.</span>minX<span class=\"k\">;</span>","  <span class=\"k\">var</span> minY1 <span class=\"k\">=</span> bounds1<span class=\"k\">.</span>minY<span class=\"k\">;</span>","  <span class=\"k\">var</span> maxX1 <span class=\"k\">=</span> bounds1<span class=\"k\">.</span>maxX<span class=\"k\">;</span>","  <span class=\"k\">var</span> maxY1 <span class=\"k\">=</span> bounds1<span class=\"k\">.</span>maxY<span class=\"k\">;</span>","  <span class=\"k\">var</span> minX2 <span class=\"k\">=</span> bounds2<span class=\"k\">.</span>minX<span class=\"k\">;</span>","  <span class=\"k\">var</span> minY2 <span class=\"k\">=</span> bounds2<span class=\"k\">.</span>minY<span class=\"k\">;</span>","  <span class=\"k\">var</span> maxX2 <span class=\"k\">=</span> bounds2<span class=\"k\">.</span>maxX<span class=\"k\">;</span>","  <span class=\"k\">var</span> maxY2 <span class=\"k\">=</span> bounds2<span class=\"k\">.</span>maxY<span class=\"k\">;</span>","","  <span class=\"k\">var</span> x<span class=\"k\">,</span> y<span class=\"k\">;</span>","  <span class=\"k\">for</span> <span class=\"k\">(</span>x <span class=\"k\">=</span> minX1<span class=\"k\">;</span> x <span class=\"k\">&lt;=</span> maxX1<span class=\"k\">;</span> x<span class=\"k\">++)</span> <span class=\"k\">{</span>  <span class=\"c\">// All x in R1</span>","    <span class=\"c\">// All above:</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span>y <span class=\"k\">=</span> minY1<span class=\"k\">;</span> y <span class=\"k\">&lt;=</span> maxY1 <span class=\"k\">&amp;&amp;</span> y <span class=\"k\">&lt;</span> minY2<span class=\"k\">;</span> y<span class=\"k\">++)</span> <span class=\"k\">{</span>  <span class=\"c\">// y in R1 above R2</span>","      callback<span class=\"k\">(</span>x<span class=\"k\">,</span> y<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"c\">// All below:</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span>y <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span>maxY2 <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">,</span> minY1<span class=\"k\">);</span>  <span class=\"c\">// y in R1 below R2</span>","         y <span class=\"k\">&lt;=</span> maxY1<span class=\"k\">;</span> y<span class=\"k\">++)</span> <span class=\"k\">{</span>","      callback<span class=\"k\">(</span>x<span class=\"k\">,</span> y<span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","","  <span class=\"k\">for</span> <span class=\"k\">(</span>y <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span>minY1<span class=\"k\">,</span> minY2<span class=\"k\">);</span>","       y <span class=\"k\">&lt;=</span> Math<span class=\"k\">.</span>min<span class=\"k\">(</span>maxY1<span class=\"k\">,</span> maxY2<span class=\"k\">);</span> y<span class=\"k\">++)</span> <span class=\"k\">{</span>  <span class=\"c\">// All y in R2 and in R1</span>","    <span class=\"c\">// Strictly left:</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span>x <span class=\"k\">=</span> Math<span class=\"k\">.</span>min<span class=\"k\">(</span>maxX1 <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">,</span> minX2<span class=\"k\">)</span> <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">;</span>","         x <span class=\"k\">&gt;=</span> minX1<span class=\"k\">;</span> x<span class=\"k\">--)</span> <span class=\"k\">{</span>  <span class=\"c\">// x in R1 left of R2</span>","      callback<span class=\"k\">(</span>x<span class=\"k\">,</span> y<span class=\"k\">);</span>","    <span class=\"k\">}</span>","    <span class=\"c\">// Strictly right:</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span>x <span class=\"k\">=</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span>minX1<span class=\"k\">,</span> maxX2 <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">);</span>  <span class=\"c\">// x in R1 right of R2</span>","         x <span class=\"k\">&lt;=</span> maxX1<span class=\"k\">;</span> x<span class=\"k\">++)</span> <span class=\"k\">{</span>","      callback<span class=\"k\">(</span>x<span class=\"k\">,</span> y<span class=\"k\">);</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Removes value from array. O(N).</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @param {Array} array  The array to modify.</span>","<span class=\"c\"> * @param {any} value  The value to remove.</span>","<span class=\"c\"> * @param {Boolean} opt_notype  Flag to disable type checking in equality.</span>","<span class=\"c\"> * @return {Number}  The number of instances of value that were removed.</span>","<span class=\"c\"> */</span>","MarkerManager<span class=\"k\">.</span>prototype<span class=\"k\">.</span>removeFromArray_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>array<span class=\"k\">,</span> value<span class=\"k\">,</span> opt_notype<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> shift <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","  <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> array<span class=\"k\">.</span>length<span class=\"k\">;</span> <span class=\"k\">++</span>i<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span>array<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">===</span> value <span class=\"k\">||</span> <span class=\"k\">(</span>opt_notype <span class=\"k\">&amp;&amp;</span> array<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">===</span> value<span class=\"k\">))</span> <span class=\"k\">{</span>","      array<span class=\"k\">.</span>splice<span class=\"k\">(</span>i<span class=\"k\">--,</span> <span class=\"s\">1</span><span class=\"k\">);</span>","      shift<span class=\"k\">++;</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","  <span class=\"k\">return</span> shift<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","","","","","","<span class=\"c\">/**</span>","<span class=\"c\">*   Projection overlay helper. Helps in calculating</span>","<span class=\"c\">*   that markers get into the right grid.</span>","<span class=\"c\">*   @constructor</span>","<span class=\"c\">*   @param {Map} map The map to manage.</span>","<span class=\"c\">**/</span>","<span class=\"k\">function</span> ProjectionHelperOverlay<span class=\"k\">(</span>map<span class=\"k\">)</span> <span class=\"k\">{</span>","  ","  <span class=\"k\">this</span><span class=\"k\">.</span>setMap<span class=\"k\">(</span>map<span class=\"k\">);</span>","","  <span class=\"k\">var</span> TILEFACTOR <span class=\"k\">=</span> <span class=\"s\">8</span><span class=\"k\">;</span>","  <span class=\"k\">var</span> TILESIDE <span class=\"k\">=</span> <span class=\"s\">1</span> <span class=\"k\">&lt;&lt;</span> TILEFACTOR<span class=\"k\">;</span>","  <span class=\"k\">var</span> RADIUS <span class=\"k\">=</span> <span class=\"s\">7</span><span class=\"k\">;</span>","","  <span class=\"k\">this</span><span class=\"k\">.</span>_map <span class=\"k\">=</span> map<span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>_zoom <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>_X0 <span class=\"k\">=</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>_Y0 <span class=\"k\">=</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>_X1 <span class=\"k\">=</span>","  <span class=\"k\">this</span><span class=\"k\">.</span>_Y1 <span class=\"k\">=</span> <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">;</span>","","  ","<span class=\"k\">}</span>","ProjectionHelperOverlay<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">new</span> google<span class=\"k\">.</span>maps<span class=\"k\">.</span>OverlayView<span class=\"k\">();</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Helper function to convert Lng to X</span>","<span class=\"c\"> *  @private</span>","<span class=\"c\"> *  @param {float} lng</span>","<span class=\"c\"> **/</span>","ProjectionHelperOverlay<span class=\"k\">.</span>prototype<span class=\"k\">.</span>LngToX_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>lng<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">return</span> <span class=\"k\">(</span><span class=\"s\">1</span> <span class=\"k\">+</span> lng <span class=\"k\">/</span> <span class=\"s\">180</span><span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *  Helper function to convert Lat to Y</span>","<span class=\"c\"> *  @private</span>","<span class=\"c\"> *  @param {float} lat</span>","<span class=\"c\"> **/</span>","ProjectionHelperOverlay<span class=\"k\">.</span>prototype<span class=\"k\">.</span>LatToY_ <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>lat<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> sinofphi <span class=\"k\">=</span> Math<span class=\"k\">.</span>sin<span class=\"k\">(</span>lat <span class=\"k\">*</span> Math<span class=\"k\">.</span>PI <span class=\"k\">/</span> <span class=\"s\">180</span><span class=\"k\">);</span>","  <span class=\"k\">return</span> <span class=\"k\">(</span><span class=\"s\">1</span> <span class=\"k\">-</span> <span class=\"s\">0.5</span> <span class=\"k\">/</span> Math<span class=\"k\">.</span>PI <span class=\"k\">*</span> Math<span class=\"k\">.</span>log<span class=\"k\">((</span><span class=\"s\">1</span> <span class=\"k\">+</span> sinofphi<span class=\"k\">)</span> <span class=\"k\">/</span> <span class=\"k\">(</span><span class=\"s\">1</span> <span class=\"k\">-</span> sinofphi<span class=\"k\">)));</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\">*   Old school LatLngToPixel</span>","<span class=\"c\">*   @param {LatLng} latlng google.maps.LatLng object</span>","<span class=\"c\">*   @param {Number} zoom Zoom level</span>","<span class=\"c\">*   @return {position} {x: pixelPositionX, y: pixelPositionY}</span>","<span class=\"c\">**/</span>","ProjectionHelperOverlay<span class=\"k\">.</span>prototype<span class=\"k\">.</span>LatLngToPixel <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>latlng<span class=\"k\">,</span> zoom<span class=\"k\">)</span> <span class=\"k\">{</span>","  <span class=\"k\">var</span> map <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>_map<span class=\"k\">;</span>","  <span class=\"k\">var</span> div <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>getProjection<span class=\"k\">().</span>fromLatLngToDivPixel<span class=\"k\">(</span>latlng<span class=\"k\">);</span>","  <span class=\"k\">var</span> abs <span class=\"k\">=</span> <span class=\"k\">{</span>x<span class=\"k\">:</span> <span class=\"k\">~~(</span><span class=\"s\">0.5</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>LngToX_<span class=\"k\">(</span>latlng<span class=\"k\">.</span>lng<span class=\"k\">())</span> <span class=\"k\">*</span> <span class=\"k\">(</span><span class=\"s\">2</span> <span class=\"k\">&lt;&lt;</span> <span class=\"k\">(</span>zoom <span class=\"k\">+</span> <span class=\"s\">6</span><span class=\"k\">))),</span> y<span class=\"k\">:</span> <span class=\"k\">~~(</span><span class=\"s\">0.5</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>LatToY_<span class=\"k\">(</span>latlng<span class=\"k\">.</span>lat<span class=\"k\">())</span> <span class=\"k\">*</span> <span class=\"k\">(</span><span class=\"s\">2</span> <span class=\"k\">&lt;&lt;</span> <span class=\"k\">(</span>zoom <span class=\"k\">+</span> <span class=\"s\">6</span><span class=\"k\">)))</span><span class=\"k\">}</span><span class=\"k\">;</span>","  <span class=\"k\">return</span> abs<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"c\">/**</span>","<span class=\"c\"> * Draw function only triggers a ready event for</span>","<span class=\"c\"> * MarkerManager to know projection can proceed to</span>","<span class=\"c\"> * initialize.</span>","<span class=\"c\"> */</span>","ProjectionHelperOverlay<span class=\"k\">.</span>prototype<span class=\"k\">.</span>draw <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","  <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>ready<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">this</span><span class=\"k\">.</span>ready <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","    google<span class=\"k\">.</span>maps<span class=\"k\">.</span>event<span class=\"k\">.</span>trigger<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"s\">'ready'</span><span class=\"k\">);</span>","  <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>"];
_$jscoverage['js/markermanager.js'][74]++;
function MarkerManager(map, opt_opts) {
  _$jscoverage['js/markermanager.js'][75]++;
  var me = this;
  _$jscoverage['js/markermanager.js'][76]++;
  me.map_ = map;
  _$jscoverage['js/markermanager.js'][77]++;
  me.mapZoom_ = map.getZoom();
  _$jscoverage['js/markermanager.js'][79]++;
  me.projectionHelper_ = new ProjectionHelperOverlay(map);
  _$jscoverage['js/markermanager.js'][80]++;
  google.maps.event.addListener(me.projectionHelper_, "ready", (function () {
  _$jscoverage['js/markermanager.js'][81]++;
  me.projection_ = this.getProjection();
  _$jscoverage['js/markermanager.js'][82]++;
  me.initialize(map, opt_opts);
}));
}
_$jscoverage['js/markermanager.js'][87]++;
MarkerManager.prototype.initialize = (function (map, opt_opts) {
  _$jscoverage['js/markermanager.js'][88]++;
  var me = this;
  _$jscoverage['js/markermanager.js'][90]++;
  opt_opts = (opt_opts || {});
  _$jscoverage['js/markermanager.js'][91]++;
  me.tileSize_ = MarkerManager.DEFAULT_TILE_SIZE_;
  _$jscoverage['js/markermanager.js'][93]++;
  var mapTypes = map.mapTypes;
  _$jscoverage['js/markermanager.js'][96]++;
  var mapMaxZoom = 1;
  _$jscoverage['js/markermanager.js'][97]++;
  for (var sType in mapTypes) {
    _$jscoverage['js/markermanager.js'][98]++;
    if ((mapTypes.hasOwnProperty(sType) && mapTypes.get(sType) && (mapTypes.get(sType).maxZoom === "number"))) {
      _$jscoverage['js/markermanager.js'][100]++;
      var mapTypeMaxZoom = map.mapTypes.get(sType).maxZoom;
      _$jscoverage['js/markermanager.js'][101]++;
      if ((mapTypeMaxZoom > mapMaxZoom)) {
        _$jscoverage['js/markermanager.js'][102]++;
        mapMaxZoom = mapTypeMaxZoom;
      }
    }
}
  _$jscoverage['js/markermanager.js'][107]++;
  me.maxZoom_ = (opt_opts.maxZoom || 19);
  _$jscoverage['js/markermanager.js'][109]++;
  me.trackMarkers_ = opt_opts.trackMarkers;
  _$jscoverage['js/markermanager.js'][110]++;
  me.show_ = (opt_opts.show || true);
  _$jscoverage['js/markermanager.js'][112]++;
  var padding;
  _$jscoverage['js/markermanager.js'][113]++;
  if (((typeof opt_opts.borderPadding) === "number")) {
    _$jscoverage['js/markermanager.js'][114]++;
    padding = opt_opts.borderPadding;
  }
  else {
    _$jscoverage['js/markermanager.js'][116]++;
    padding = MarkerManager.DEFAULT_BORDER_PADDING_;
  }
  _$jscoverage['js/markermanager.js'][119]++;
  me.swPadding_ = new (google.maps.Size)((- padding), padding);
  _$jscoverage['js/markermanager.js'][120]++;
  me.nePadding_ = new (google.maps.Size)(padding, (- padding));
  _$jscoverage['js/markermanager.js'][121]++;
  me.borderPadding_ = padding;
  _$jscoverage['js/markermanager.js'][123]++;
  me.gridWidth_ = {};
  _$jscoverage['js/markermanager.js'][125]++;
  me.grid_ = {};
  _$jscoverage['js/markermanager.js'][126]++;
  me.grid_[me.maxZoom_] = {};
  _$jscoverage['js/markermanager.js'][127]++;
  me.numMarkers_ = {};
  _$jscoverage['js/markermanager.js'][128]++;
  me.numMarkers_[me.maxZoom_] = 0;
  _$jscoverage['js/markermanager.js'][131]++;
  google.maps.event.addListener(map, "dragend", (function () {
  _$jscoverage['js/markermanager.js'][132]++;
  me.onMapMoveEnd_();
}));
  _$jscoverage['js/markermanager.js'][135]++;
  google.maps.event.addListener(map, "idle", (function () {
  _$jscoverage['js/markermanager.js'][136]++;
  me.onMapMoveEnd_();
}));
  _$jscoverage['js/markermanager.js'][139]++;
  google.maps.event.addListener(map, "zoom_changed", (function () {
  _$jscoverage['js/markermanager.js'][140]++;
  me.onMapMoveEnd_();
}));
  _$jscoverage['js/markermanager.js'][151]++;
  me.removeOverlay_ = (function (marker) {
  _$jscoverage['js/markermanager.js'][152]++;
  marker.setMap(null);
  _$jscoverage['js/markermanager.js'][153]++;
  (me.shownMarkers_--);
});
  _$jscoverage['js/markermanager.js'][162]++;
  me.addOverlay_ = (function (marker) {
  _$jscoverage['js/markermanager.js'][163]++;
  if (me.show_) {
    _$jscoverage['js/markermanager.js'][164]++;
    marker.setMap(me.map_);
    _$jscoverage['js/markermanager.js'][165]++;
    (me.shownMarkers_++);
  }
});
  _$jscoverage['js/markermanager.js'][169]++;
  me.resetManager_();
  _$jscoverage['js/markermanager.js'][170]++;
  me.shownMarkers_ = 0;
  _$jscoverage['js/markermanager.js'][172]++;
  me.shownBounds_ = me.getMapGridBounds_();
  _$jscoverage['js/markermanager.js'][174]++;
  google.maps.event.trigger(me, "loaded");
});
_$jscoverage['js/markermanager.js'][181]++;
MarkerManager.DEFAULT_TILE_SIZE_ = 1024;
_$jscoverage['js/markermanager.js'][187]++;
MarkerManager.DEFAULT_BORDER_PADDING_ = 100;
_$jscoverage['js/markermanager.js'][192]++;
MarkerManager.MERCATOR_ZOOM_LEVEL_ZERO_RANGE = 256;
_$jscoverage['js/markermanager.js'][199]++;
MarkerManager.prototype.resetManager_ = (function () {
  _$jscoverage['js/markermanager.js'][200]++;
  var mapWidth = MarkerManager.MERCATOR_ZOOM_LEVEL_ZERO_RANGE;
  _$jscoverage['js/markermanager.js'][201]++;
  for (var zoom = 0; (zoom <= this.maxZoom_); (++zoom)) {
    _$jscoverage['js/markermanager.js'][202]++;
    this.grid_[zoom] = {};
    _$jscoverage['js/markermanager.js'][203]++;
    this.numMarkers_[zoom] = 0;
    _$jscoverage['js/markermanager.js'][204]++;
    this.gridWidth_[zoom] = Math.ceil((mapWidth / this.tileSize_));
    _$jscoverage['js/markermanager.js'][205]++;
    mapWidth <<= 1;
}
});
_$jscoverage['js/markermanager.js'][214]++;
MarkerManager.prototype.clearMarkers = (function () {
  _$jscoverage['js/markermanager.js'][215]++;
  this.processAll_(this.shownBounds_, this.removeOverlay_);
  _$jscoverage['js/markermanager.js'][216]++;
  this.resetManager_();
});
_$jscoverage['js/markermanager.js'][231]++;
MarkerManager.prototype.getTilePoint_ = (function (latlng, zoom, padding) {
  _$jscoverage['js/markermanager.js'][233]++;
  var pixelPoint = this.projectionHelper_.LatLngToPixel(latlng, zoom);
  _$jscoverage['js/markermanager.js'][235]++;
  var point = new (google.maps.Point)(Math.floor(((pixelPoint.x + padding.width) / this.tileSize_)), Math.floor(((pixelPoint.y + padding.height) / this.tileSize_)));
  _$jscoverage['js/markermanager.js'][240]++;
  return point;
});
_$jscoverage['js/markermanager.js'][253]++;
MarkerManager.prototype.addMarkerBatch_ = (function (marker, minZoom, maxZoom) {
  _$jscoverage['js/markermanager.js'][254]++;
  var me = this;
  _$jscoverage['js/markermanager.js'][256]++;
  var mPoint = marker.getPosition();
  _$jscoverage['js/markermanager.js'][257]++;
  marker.MarkerManager_minZoom = minZoom;
  _$jscoverage['js/markermanager.js'][262]++;
  if (this.trackMarkers_) {
    _$jscoverage['js/markermanager.js'][263]++;
    google.maps.event.addListener(marker, "changed", (function (a, b, c) {
  _$jscoverage['js/markermanager.js'][264]++;
  me.onMarkerMoved_(a, b, c);
}));
  }
  _$jscoverage['js/markermanager.js'][268]++;
  var gridPoint = this.getTilePoint_(mPoint, maxZoom, new (google.maps.Size)(0, 0, 0, 0));
  _$jscoverage['js/markermanager.js'][270]++;
  for (var zoom = maxZoom; (zoom >= minZoom); (zoom--)) {
    _$jscoverage['js/markermanager.js'][271]++;
    var cell = this.getGridCellCreate_(gridPoint.x, gridPoint.y, zoom);
    _$jscoverage['js/markermanager.js'][272]++;
    cell.push(marker);
    _$jscoverage['js/markermanager.js'][274]++;
    gridPoint.x = (gridPoint.x >> 1);
    _$jscoverage['js/markermanager.js'][275]++;
    gridPoint.y = (gridPoint.y >> 1);
}
});
_$jscoverage['js/markermanager.js'][289]++;
MarkerManager.prototype.isGridPointVisible_ = (function (point) {
  _$jscoverage['js/markermanager.js'][290]++;
  var vertical = ((this.shownBounds_.minY <= point.y) && (point.y <= this.shownBounds_.maxY));
  _$jscoverage['js/markermanager.js'][292]++;
  var minX = this.shownBounds_.minX;
  _$jscoverage['js/markermanager.js'][293]++;
  var horizontal = ((minX <= point.x) && (point.x <= this.shownBounds_.maxX));
  _$jscoverage['js/markermanager.js'][294]++;
  if (((! horizontal) && (minX < 0))) {
    _$jscoverage['js/markermanager.js'][297]++;
    var width = this.gridWidth_[this.shownBounds_.z];
    _$jscoverage['js/markermanager.js'][298]++;
    horizontal = (((minX + width) <= point.x) && (point.x <= (width - 1)));
  }
  _$jscoverage['js/markermanager.js'][300]++;
  return (vertical && horizontal);
});
_$jscoverage['js/markermanager.js'][313]++;
MarkerManager.prototype.onMarkerMoved_ = (function (marker, oldPoint, newPoint) {
  _$jscoverage['js/markermanager.js'][317]++;
  var zoom = this.maxZoom_;
  _$jscoverage['js/markermanager.js'][318]++;
  var changed = false;
  _$jscoverage['js/markermanager.js'][319]++;
  var oldGrid = this.getTilePoint_(oldPoint, zoom, new (google.maps.Size)(0, 0, 0, 0));
  _$jscoverage['js/markermanager.js'][320]++;
  var newGrid = this.getTilePoint_(newPoint, zoom, new (google.maps.Size)(0, 0, 0, 0));
  _$jscoverage['js/markermanager.js'][321]++;
  while (((zoom >= 0) && ((oldGrid.x !== newGrid.x) || (oldGrid.y !== newGrid.y)))) {
    _$jscoverage['js/markermanager.js'][322]++;
    var cell = this.getGridCellNoCreate_(oldGrid.x, oldGrid.y, zoom);
    _$jscoverage['js/markermanager.js'][323]++;
    if (cell) {
      _$jscoverage['js/markermanager.js'][324]++;
      if (this.removeFromArray_(cell, marker)) {
        _$jscoverage['js/markermanager.js'][325]++;
        this.getGridCellCreate_(newGrid.x, newGrid.y, zoom).push(marker);
      }
    }
    _$jscoverage['js/markermanager.js'][332]++;
    if ((zoom === this.mapZoom_)) {
      _$jscoverage['js/markermanager.js'][333]++;
      if (this.isGridPointVisible_(oldGrid)) {
        _$jscoverage['js/markermanager.js'][334]++;
        if ((! this.isGridPointVisible_(newGrid))) {
          _$jscoverage['js/markermanager.js'][335]++;
          this.removeOverlay_(marker);
          _$jscoverage['js/markermanager.js'][336]++;
          changed = true;
        }
      }
      else {
        _$jscoverage['js/markermanager.js'][339]++;
        if (this.isGridPointVisible_(newGrid)) {
          _$jscoverage['js/markermanager.js'][340]++;
          this.addOverlay_(marker);
          _$jscoverage['js/markermanager.js'][341]++;
          changed = true;
        }
      }
    }
    _$jscoverage['js/markermanager.js'][345]++;
    oldGrid.x = (oldGrid.x >> 1);
    _$jscoverage['js/markermanager.js'][346]++;
    oldGrid.y = (oldGrid.y >> 1);
    _$jscoverage['js/markermanager.js'][347]++;
    newGrid.x = (newGrid.x >> 1);
    _$jscoverage['js/markermanager.js'][348]++;
    newGrid.y = (newGrid.y >> 1);
    _$jscoverage['js/markermanager.js'][349]++;
    (--zoom);
}
  _$jscoverage['js/markermanager.js'][351]++;
  if (changed) {
    _$jscoverage['js/markermanager.js'][352]++;
    this.notifyListeners_();
  }
});
_$jscoverage['js/markermanager.js'][362]++;
MarkerManager.prototype.removeMarker = (function (marker) {
  _$jscoverage['js/markermanager.js'][363]++;
  var zoom = this.maxZoom_;
  _$jscoverage['js/markermanager.js'][364]++;
  var changed = false;
  _$jscoverage['js/markermanager.js'][365]++;
  var point = marker.getPosition();
  _$jscoverage['js/markermanager.js'][366]++;
  var grid = this.getTilePoint_(point, zoom, new (google.maps.Size)(0, 0, 0, 0));
  _$jscoverage['js/markermanager.js'][367]++;
  while ((zoom >= 0)) {
    _$jscoverage['js/markermanager.js'][368]++;
    var cell = this.getGridCellNoCreate_(grid.x, grid.y, zoom);
    _$jscoverage['js/markermanager.js'][370]++;
    if (cell) {
      _$jscoverage['js/markermanager.js'][371]++;
      this.removeFromArray_(cell, marker);
    }
    _$jscoverage['js/markermanager.js'][376]++;
    if ((zoom === this.mapZoom_)) {
      _$jscoverage['js/markermanager.js'][377]++;
      if (this.isGridPointVisible_(grid)) {
        _$jscoverage['js/markermanager.js'][378]++;
        this.removeOverlay_(marker);
        _$jscoverage['js/markermanager.js'][379]++;
        changed = true;
      }
    }
    _$jscoverage['js/markermanager.js'][382]++;
    grid.x = (grid.x >> 1);
    _$jscoverage['js/markermanager.js'][383]++;
    grid.y = (grid.y >> 1);
    _$jscoverage['js/markermanager.js'][384]++;
    (--zoom);
}
  _$jscoverage['js/markermanager.js'][386]++;
  if (changed) {
    _$jscoverage['js/markermanager.js'][387]++;
    this.notifyListeners_();
  }
  _$jscoverage['js/markermanager.js'][389]++;
  (this.numMarkers_[marker.MarkerManager_minZoom]--);
});
_$jscoverage['js/markermanager.js'][401]++;
MarkerManager.prototype.addMarkers = (function (markers, minZoom, opt_maxZoom) {
  _$jscoverage['js/markermanager.js'][402]++;
  var maxZoom = this.getOptMaxZoom_(opt_maxZoom);
  _$jscoverage['js/markermanager.js'][403]++;
  for (var i = (markers.length - 1); (i >= 0); (i--)) {
    _$jscoverage['js/markermanager.js'][404]++;
    this.addMarkerBatch_(markers[i], minZoom, maxZoom);
}
  _$jscoverage['js/markermanager.js'][407]++;
  this.numMarkers_[minZoom] += markers.length;
});
_$jscoverage['js/markermanager.js'][418]++;
MarkerManager.prototype.getOptMaxZoom_ = (function (opt_maxZoom) {
  _$jscoverage['js/markermanager.js'][419]++;
  return (opt_maxZoom || this.maxZoom_);
});
_$jscoverage['js/markermanager.js'][429]++;
MarkerManager.prototype.getMarkerCount = (function (zoom) {
  _$jscoverage['js/markermanager.js'][430]++;
  var total = 0;
  _$jscoverage['js/markermanager.js'][431]++;
  for (var z = 0; (z <= zoom); (z++)) {
    _$jscoverage['js/markermanager.js'][432]++;
    total += this.numMarkers_[z];
}
  _$jscoverage['js/markermanager.js'][434]++;
  return total;
});
_$jscoverage['js/markermanager.js'][447]++;
MarkerManager.prototype.getMarker = (function (lat, lng, zoom) {
  _$jscoverage['js/markermanager.js'][448]++;
  var mPoint = new (google.maps.LatLng)(lat, lng);
  _$jscoverage['js/markermanager.js'][449]++;
  var gridPoint = this.getTilePoint_(mPoint, zoom, new (google.maps.Size)(0, 0, 0, 0));
  _$jscoverage['js/markermanager.js'][452]++;
  var marker = null;
  _$jscoverage['js/markermanager.js'][454]++;
  var cellArray = this.getGridCellNoCreate_(gridPoint.x, gridPoint.y, zoom);
  _$jscoverage['js/markermanager.js'][455]++;
  if ((cellArray !== undefined)) {
    _$jscoverage['js/markermanager.js'][463]++;
    for (var i = 0; (i < cellArray.length); (i++)) {
      _$jscoverage['js/markermanager.js'][464]++;
      if (mPoint.equals(cellArray[i].getPosition())) {
        _$jscoverage['js/markermanager.js'][465]++;
        marker = cellArray[i];
      }
}
  }
  _$jscoverage['js/markermanager.js'][468]++;
  return marker;
});
_$jscoverage['js/markermanager.js'][478]++;
MarkerManager.prototype.addMarker = (function (marker, minZoom, opt_maxZoom) {
  _$jscoverage['js/markermanager.js'][479]++;
  var maxZoom = this.getOptMaxZoom_(opt_maxZoom);
  _$jscoverage['js/markermanager.js'][480]++;
  this.addMarkerBatch_(marker, minZoom, maxZoom);
  _$jscoverage['js/markermanager.js'][481]++;
  var gridPoint = this.getTilePoint_(marker.getPosition(), this.mapZoom_, new (google.maps.Size)(0, 0, 0, 0));
  _$jscoverage['js/markermanager.js'][482]++;
  if ((this.isGridPointVisible_(gridPoint) && (minZoom <= this.shownBounds_.z) && (this.shownBounds_.z <= maxZoom))) {
    _$jscoverage['js/markermanager.js'][485]++;
    this.addOverlay_(marker);
    _$jscoverage['js/markermanager.js'][486]++;
    this.notifyListeners_();
  }
  _$jscoverage['js/markermanager.js'][488]++;
  (this.numMarkers_[minZoom]++);
});
_$jscoverage['js/markermanager.js'][497]++;
function GridBounds(bounds) {
  _$jscoverage['js/markermanager.js'][500]++;
  this.minX = Math.min(bounds[0].x, bounds[1].x);
  _$jscoverage['js/markermanager.js'][501]++;
  this.maxX = Math.max(bounds[0].x, bounds[1].x);
  _$jscoverage['js/markermanager.js'][502]++;
  this.minY = Math.min(bounds[0].y, bounds[1].y);
  _$jscoverage['js/markermanager.js'][503]++;
  this.maxY = Math.max(bounds[0].y, bounds[1].y);
}
_$jscoverage['js/markermanager.js'][512]++;
GridBounds.prototype.equals = (function (gridBounds) {
  _$jscoverage['js/markermanager.js'][513]++;
  if (((this.maxX === gridBounds.maxX) && (this.maxY === gridBounds.maxY) && (this.minX === gridBounds.minX) && (this.minY === gridBounds.minY))) {
    _$jscoverage['js/markermanager.js'][514]++;
    return true;
  }
  else {
    _$jscoverage['js/markermanager.js'][516]++;
    return false;
  }
});
_$jscoverage['js/markermanager.js'][525]++;
GridBounds.prototype.containsPoint = (function (point) {
  _$jscoverage['js/markermanager.js'][526]++;
  var outer = this;
  _$jscoverage['js/markermanager.js'][527]++;
  return ((outer.minX <= point.x) && (outer.maxX >= point.x) && (outer.minY <= point.y) && (outer.maxY >= point.y));
});
_$jscoverage['js/markermanager.js'][540]++;
MarkerManager.prototype.getGridCellCreate_ = (function (x, y, z) {
  _$jscoverage['js/markermanager.js'][541]++;
  var grid = this.grid_[z];
  _$jscoverage['js/markermanager.js'][542]++;
  if ((x < 0)) {
    _$jscoverage['js/markermanager.js'][543]++;
    x += this.gridWidth_[z];
  }
  _$jscoverage['js/markermanager.js'][545]++;
  var gridCol = grid[x];
  _$jscoverage['js/markermanager.js'][546]++;
  if ((! gridCol)) {
    _$jscoverage['js/markermanager.js'][547]++;
    gridCol = (grid[x] = []);
    _$jscoverage['js/markermanager.js'][548]++;
    return (gridCol[y] = []);
  }
  _$jscoverage['js/markermanager.js'][550]++;
  var gridCell = gridCol[y];
  _$jscoverage['js/markermanager.js'][551]++;
  if ((! gridCell)) {
    _$jscoverage['js/markermanager.js'][552]++;
    return (gridCol[y] = []);
  }
  _$jscoverage['js/markermanager.js'][554]++;
  return gridCell;
});
_$jscoverage['js/markermanager.js'][568]++;
MarkerManager.prototype.getGridCellNoCreate_ = (function (x, y, z) {
  _$jscoverage['js/markermanager.js'][569]++;
  var grid = this.grid_[z];
  _$jscoverage['js/markermanager.js'][571]++;
  if ((x < 0)) {
    _$jscoverage['js/markermanager.js'][572]++;
    x += this.gridWidth_[z];
  }
  _$jscoverage['js/markermanager.js'][574]++;
  var gridCol = grid[x];
  _$jscoverage['js/markermanager.js'][575]++;
  return (gridCol? gridCol[y]: undefined);
});
_$jscoverage['js/markermanager.js'][590]++;
MarkerManager.prototype.getGridBounds_ = (function (bounds, zoom, swPadding, nePadding) {
  _$jscoverage['js/markermanager.js'][591]++;
  zoom = Math.min(zoom, this.maxZoom_);
  _$jscoverage['js/markermanager.js'][593]++;
  var bl = bounds.getSouthWest();
  _$jscoverage['js/markermanager.js'][594]++;
  var tr = bounds.getNorthEast();
  _$jscoverage['js/markermanager.js'][595]++;
  var sw = this.getTilePoint_(bl, zoom, swPadding);
  _$jscoverage['js/markermanager.js'][597]++;
  var ne = this.getTilePoint_(tr, zoom, nePadding);
  _$jscoverage['js/markermanager.js'][598]++;
  var gw = this.gridWidth_[zoom];
  _$jscoverage['js/markermanager.js'][601]++;
  if (((tr.lng() < bl.lng()) || (ne.x < sw.x))) {
    _$jscoverage['js/markermanager.js'][602]++;
    sw.x -= gw;
  }
  _$jscoverage['js/markermanager.js'][604]++;
  if ((((ne.x - sw.x) + 1) >= gw)) {
    _$jscoverage['js/markermanager.js'][606]++;
    sw.x = 0;
    _$jscoverage['js/markermanager.js'][607]++;
    ne.x = (gw - 1);
  }
  _$jscoverage['js/markermanager.js'][610]++;
  var gridBounds = new GridBounds([sw, ne]);
  _$jscoverage['js/markermanager.js'][611]++;
  gridBounds.z = zoom;
  _$jscoverage['js/markermanager.js'][613]++;
  return gridBounds;
});
_$jscoverage['js/markermanager.js'][622]++;
MarkerManager.prototype.getMapGridBounds_ = (function () {
  _$jscoverage['js/markermanager.js'][623]++;
  return this.getGridBounds_(this.map_.getBounds(), this.mapZoom_, this.swPadding_, this.nePadding_);
});
_$jscoverage['js/markermanager.js'][634]++;
MarkerManager.prototype.onMapMoveEnd_ = (function () {
  _$jscoverage['js/markermanager.js'][635]++;
  this.objectSetTimeout_(this, this.updateMarkers_, 0);
});
_$jscoverage['js/markermanager.js'][653]++;
MarkerManager.prototype.objectSetTimeout_ = (function (object, command, milliseconds) {
  _$jscoverage['js/markermanager.js'][654]++;
  return window.setTimeout((function () {
  _$jscoverage['js/markermanager.js'][655]++;
  command.call(object);
}), milliseconds);
});
_$jscoverage['js/markermanager.js'][667]++;
MarkerManager.prototype.visible = (function () {
  _$jscoverage['js/markermanager.js'][668]++;
  return (this.show_? true: false);
});
_$jscoverage['js/markermanager.js'][677]++;
MarkerManager.prototype.isHidden = (function () {
  _$jscoverage['js/markermanager.js'][678]++;
  return (! this.show_);
});
_$jscoverage['js/markermanager.js'][685]++;
MarkerManager.prototype.show = (function () {
  _$jscoverage['js/markermanager.js'][686]++;
  this.show_ = true;
  _$jscoverage['js/markermanager.js'][687]++;
  this.refresh();
});
_$jscoverage['js/markermanager.js'][694]++;
MarkerManager.prototype.hide = (function () {
  _$jscoverage['js/markermanager.js'][695]++;
  this.show_ = false;
  _$jscoverage['js/markermanager.js'][696]++;
  this.refresh();
});
_$jscoverage['js/markermanager.js'][703]++;
MarkerManager.prototype.toggle = (function () {
  _$jscoverage['js/markermanager.js'][704]++;
  this.show_ = (! this.show_);
  _$jscoverage['js/markermanager.js'][705]++;
  this.refresh();
});
_$jscoverage['js/markermanager.js'][716]++;
MarkerManager.prototype.refresh = (function () {
  _$jscoverage['js/markermanager.js'][717]++;
  if ((this.shownMarkers_ > 0)) {
    _$jscoverage['js/markermanager.js'][718]++;
    this.processAll_(this.shownBounds_, this.removeOverlay_);
  }
  _$jscoverage['js/markermanager.js'][721]++;
  if (this.show_) {
    _$jscoverage['js/markermanager.js'][722]++;
    this.processAll_(this.shownBounds_, this.addOverlay_);
  }
  _$jscoverage['js/markermanager.js'][724]++;
  this.notifyListeners_();
});
_$jscoverage['js/markermanager.js'][731]++;
MarkerManager.prototype.updateMarkers_ = (function () {
  _$jscoverage['js/markermanager.js'][732]++;
  this.mapZoom_ = this.map_.getZoom();
  _$jscoverage['js/markermanager.js'][733]++;
  var newBounds = this.getMapGridBounds_();
  _$jscoverage['js/markermanager.js'][737]++;
  if ((newBounds.equals(this.shownBounds_) && (newBounds.z === this.shownBounds_.z))) {
    _$jscoverage['js/markermanager.js'][738]++;
    return;
  }
  _$jscoverage['js/markermanager.js'][741]++;
  if ((newBounds.z !== this.shownBounds_.z)) {
    _$jscoverage['js/markermanager.js'][742]++;
    this.processAll_(this.shownBounds_, this.removeOverlay_);
    _$jscoverage['js/markermanager.js'][743]++;
    if (this.show_) {
      _$jscoverage['js/markermanager.js'][744]++;
      this.processAll_(newBounds, this.addOverlay_);
    }
  }
  else {
    _$jscoverage['js/markermanager.js'][748]++;
    this.rectangleDiff_(this.shownBounds_, newBounds, this.removeCellMarkers_);
    _$jscoverage['js/markermanager.js'][751]++;
    if (this.show_) {
      _$jscoverage['js/markermanager.js'][752]++;
      this.rectangleDiff_(newBounds, this.shownBounds_, this.addCellMarkers_);
    }
  }
  _$jscoverage['js/markermanager.js'][755]++;
  this.shownBounds_ = newBounds;
  _$jscoverage['js/markermanager.js'][757]++;
  this.notifyListeners_();
});
_$jscoverage['js/markermanager.js'][764]++;
MarkerManager.prototype.notifyListeners_ = (function () {
  _$jscoverage['js/markermanager.js'][765]++;
  google.maps.event.trigger(this, "changed", this.shownBounds_, this.shownMarkers_);
});
_$jscoverage['js/markermanager.js'][775]++;
MarkerManager.prototype.processAll_ = (function (bounds, callback) {
  _$jscoverage['js/markermanager.js'][776]++;
  for (var x = bounds.minX; (x <= bounds.maxX); (x++)) {
    _$jscoverage['js/markermanager.js'][777]++;
    for (var y = bounds.minY; (y <= bounds.maxY); (y++)) {
      _$jscoverage['js/markermanager.js'][778]++;
      this.processCellMarkers_(x, y, bounds.z, callback);
}
}
});
_$jscoverage['js/markermanager.js'][792]++;
MarkerManager.prototype.processCellMarkers_ = (function (x, y, z, callback) {
  _$jscoverage['js/markermanager.js'][793]++;
  var cell = this.getGridCellNoCreate_(x, y, z);
  _$jscoverage['js/markermanager.js'][794]++;
  if (cell) {
    _$jscoverage['js/markermanager.js'][795]++;
    for (var i = (cell.length - 1); (i >= 0); (i--)) {
      _$jscoverage['js/markermanager.js'][796]++;
      callback(cell[i]);
}
  }
});
_$jscoverage['js/markermanager.js'][809]++;
MarkerManager.prototype.removeCellMarkers_ = (function (x, y, z) {
  _$jscoverage['js/markermanager.js'][810]++;
  this.processCellMarkers_(x, y, z, this.removeOverlay_);
});
_$jscoverage['js/markermanager.js'][821]++;
MarkerManager.prototype.addCellMarkers_ = (function (x, y, z) {
  _$jscoverage['js/markermanager.js'][822]++;
  this.processCellMarkers_(x, y, z, this.addOverlay_);
});
_$jscoverage['js/markermanager.js'][838]++;
MarkerManager.prototype.rectangleDiff_ = (function (bounds1, bounds2, callback) {
  _$jscoverage['js/markermanager.js'][839]++;
  var me = this;
  _$jscoverage['js/markermanager.js'][840]++;
  me.rectangleDiffCoords_(bounds1, bounds2, (function (x, y) {
  _$jscoverage['js/markermanager.js'][841]++;
  callback.apply(me, [x, y, bounds1.z]);
}));
});
_$jscoverage['js/markermanager.js'][854]++;
MarkerManager.prototype.rectangleDiffCoords_ = (function (bounds1, bounds2, callback) {
  _$jscoverage['js/markermanager.js'][855]++;
  var minX1 = bounds1.minX;
  _$jscoverage['js/markermanager.js'][856]++;
  var minY1 = bounds1.minY;
  _$jscoverage['js/markermanager.js'][857]++;
  var maxX1 = bounds1.maxX;
  _$jscoverage['js/markermanager.js'][858]++;
  var maxY1 = bounds1.maxY;
  _$jscoverage['js/markermanager.js'][859]++;
  var minX2 = bounds2.minX;
  _$jscoverage['js/markermanager.js'][860]++;
  var minY2 = bounds2.minY;
  _$jscoverage['js/markermanager.js'][861]++;
  var maxX2 = bounds2.maxX;
  _$jscoverage['js/markermanager.js'][862]++;
  var maxY2 = bounds2.maxY;
  _$jscoverage['js/markermanager.js'][864]++;
  var x, y;
  _$jscoverage['js/markermanager.js'][865]++;
  for (x = minX1; (x <= maxX1); (x++)) {
    _$jscoverage['js/markermanager.js'][867]++;
    for (y = minY1; ((y <= maxY1) && (y < minY2)); (y++)) {
      _$jscoverage['js/markermanager.js'][868]++;
      callback(x, y);
}
    _$jscoverage['js/markermanager.js'][871]++;
    for (y = Math.max((maxY2 + 1), minY1); (y <= maxY1); (y++)) {
      _$jscoverage['js/markermanager.js'][873]++;
      callback(x, y);
}
}
  _$jscoverage['js/markermanager.js'][877]++;
  for (y = Math.max(minY1, minY2); (y <= Math.min(maxY1, maxY2)); (y++)) {
    _$jscoverage['js/markermanager.js'][880]++;
    for (x = (Math.min((maxX1 + 1), minX2) - 1); (x >= minX1); (x--)) {
      _$jscoverage['js/markermanager.js'][882]++;
      callback(x, y);
}
    _$jscoverage['js/markermanager.js'][885]++;
    for (x = Math.max(minX1, (maxX2 + 1)); (x <= maxX1); (x++)) {
      _$jscoverage['js/markermanager.js'][887]++;
      callback(x, y);
}
}
});
_$jscoverage['js/markermanager.js'][901]++;
MarkerManager.prototype.removeFromArray_ = (function (array, value, opt_notype) {
  _$jscoverage['js/markermanager.js'][902]++;
  var shift = 0;
  _$jscoverage['js/markermanager.js'][903]++;
  for (var i = 0; (i < array.length); (++i)) {
    _$jscoverage['js/markermanager.js'][904]++;
    if (((array[i] === value) || (opt_notype && (array[i] === value)))) {
      _$jscoverage['js/markermanager.js'][905]++;
      array.splice((i--), 1);
      _$jscoverage['js/markermanager.js'][906]++;
      (shift++);
    }
}
  _$jscoverage['js/markermanager.js'][909]++;
  return shift;
});
_$jscoverage['js/markermanager.js'][924]++;
function ProjectionHelperOverlay(map) {
  _$jscoverage['js/markermanager.js'][926]++;
  this.setMap(map);
  _$jscoverage['js/markermanager.js'][928]++;
  var TILEFACTOR = 8;
  _$jscoverage['js/markermanager.js'][929]++;
  var TILESIDE = (1 << TILEFACTOR);
  _$jscoverage['js/markermanager.js'][930]++;
  var RADIUS = 7;
  _$jscoverage['js/markermanager.js'][932]++;
  this._map = map;
  _$jscoverage['js/markermanager.js'][933]++;
  this._zoom = -1;
  _$jscoverage['js/markermanager.js'][934]++;
  this._X0 = (this._Y0 = (this._X1 = (this._Y1 = -1)));
}
_$jscoverage['js/markermanager.js'][941]++;
ProjectionHelperOverlay.prototype = new (google.maps.OverlayView)();
_$jscoverage['js/markermanager.js'][948]++;
ProjectionHelperOverlay.prototype.LngToX_ = (function (lng) {
  _$jscoverage['js/markermanager.js'][949]++;
  return (1 + (lng / 180));
});
_$jscoverage['js/markermanager.js'][957]++;
ProjectionHelperOverlay.prototype.LatToY_ = (function (lat) {
  _$jscoverage['js/markermanager.js'][958]++;
  var sinofphi = Math.sin(((lat * Math.PI) / 180));
  _$jscoverage['js/markermanager.js'][959]++;
  return (1 - ((0.5 / Math.PI) * Math.log(((1 + sinofphi) / (1 - sinofphi)))));
});
_$jscoverage['js/markermanager.js'][968]++;
ProjectionHelperOverlay.prototype.LatLngToPixel = (function (latlng, zoom) {
  _$jscoverage['js/markermanager.js'][969]++;
  var map = this._map;
  _$jscoverage['js/markermanager.js'][970]++;
  var div = this.getProjection().fromLatLngToDivPixel(latlng);
  _$jscoverage['js/markermanager.js'][971]++;
  var abs = {x: (~ (~ (0.5 + (this.LngToX_(latlng.lng()) * (2 << (zoom + 6)))))), y: (~ (~ (0.5 + (this.LatToY_(latlng.lat()) * (2 << (zoom + 6))))))};
  _$jscoverage['js/markermanager.js'][972]++;
  return abs;
});
_$jscoverage['js/markermanager.js'][981]++;
ProjectionHelperOverlay.prototype.draw = (function () {
  _$jscoverage['js/markermanager.js'][982]++;
  if ((! this.ready)) {
    _$jscoverage['js/markermanager.js'][983]++;
    this.ready = true;
    _$jscoverage['js/markermanager.js'][984]++;
    google.maps.event.trigger(this, "ready");
  }
});
