/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['assets/js/jszip.js']) {
  _$jscoverage['assets/js/jszip.js'] = [];
  _$jscoverage['assets/js/jszip.js'][19] = 0;
  _$jscoverage['assets/js/jszip.js'][27] = 0;
  _$jscoverage['assets/js/jszip.js'][33] = 0;
  _$jscoverage['assets/js/jszip.js'][36] = 0;
  _$jscoverage['assets/js/jszip.js'][38] = 0;
  _$jscoverage['assets/js/jszip.js'][39] = 0;
  _$jscoverage['assets/js/jszip.js'][43] = 0;
  _$jscoverage['assets/js/jszip.js'][53] = 0;
  _$jscoverage['assets/js/jszip.js'][62] = 0;
  _$jscoverage['assets/js/jszip.js'][69] = 0;
  _$jscoverage['assets/js/jszip.js'][70] = 0;
  _$jscoverage['assets/js/jszip.js'][71] = 0;
  _$jscoverage['assets/js/jszip.js'][72] = 0;
  _$jscoverage['assets/js/jszip.js'][73] = 0;
  _$jscoverage['assets/js/jszip.js'][75] = 0;
  _$jscoverage['assets/js/jszip.js'][76] = 0;
  _$jscoverage['assets/js/jszip.js'][79] = 0;
  _$jscoverage['assets/js/jszip.js'][81] = 0;
  _$jscoverage['assets/js/jszip.js'][82] = 0;
  _$jscoverage['assets/js/jszip.js'][86] = 0;
  _$jscoverage['assets/js/jszip.js'][94] = 0;
  _$jscoverage['assets/js/jszip.js'][95] = 0;
  _$jscoverage['assets/js/jszip.js'][96] = 0;
  _$jscoverage['assets/js/jszip.js'][97] = 0;
  _$jscoverage['assets/js/jszip.js'][100] = 0;
  _$jscoverage['assets/js/jszip.js'][101] = 0;
  _$jscoverage['assets/js/jszip.js'][103] = 0;
  _$jscoverage['assets/js/jszip.js'][104] = 0;
  _$jscoverage['assets/js/jszip.js'][107] = 0;
  _$jscoverage['assets/js/jszip.js'][109] = 0;
  _$jscoverage['assets/js/jszip.js'][117] = 0;
  _$jscoverage['assets/js/jszip.js'][118] = 0;
  _$jscoverage['assets/js/jszip.js'][119] = 0;
  _$jscoverage['assets/js/jszip.js'][120] = 0;
  _$jscoverage['assets/js/jszip.js'][123] = 0;
  _$jscoverage['assets/js/jszip.js'][124] = 0;
  _$jscoverage['assets/js/jszip.js'][126] = 0;
  _$jscoverage['assets/js/jszip.js'][129] = 0;
  _$jscoverage['assets/js/jszip.js'][132] = 0;
  _$jscoverage['assets/js/jszip.js'][135] = 0;
  _$jscoverage['assets/js/jszip.js'][136] = 0;
  _$jscoverage['assets/js/jszip.js'][138] = 0;
  _$jscoverage['assets/js/jszip.js'][147] = 0;
  _$jscoverage['assets/js/jszip.js'][148] = 0;
  _$jscoverage['assets/js/jszip.js'][149] = 0;
  _$jscoverage['assets/js/jszip.js'][150] = 0;
  _$jscoverage['assets/js/jszip.js'][153] = 0;
  _$jscoverage['assets/js/jszip.js'][159] = 0;
  _$jscoverage['assets/js/jszip.js'][166] = 0;
  _$jscoverage['assets/js/jszip.js'][173] = 0;
  _$jscoverage['assets/js/jszip.js'][174] = 0;
  _$jscoverage['assets/js/jszip.js'][181] = 0;
  _$jscoverage['assets/js/jszip.js'][182] = 0;
  _$jscoverage['assets/js/jszip.js'][189] = 0;
  _$jscoverage['assets/js/jszip.js'][200] = 0;
  _$jscoverage['assets/js/jszip.js'][201] = 0;
  _$jscoverage['assets/js/jszip.js'][202] = 0;
  _$jscoverage['assets/js/jszip.js'][203] = 0;
  _$jscoverage['assets/js/jszip.js'][204] = 0;
  _$jscoverage['assets/js/jszip.js'][206] = 0;
  _$jscoverage['assets/js/jszip.js'][215] = 0;
  _$jscoverage['assets/js/jszip.js'][216] = 0;
  _$jscoverage['assets/js/jszip.js'][217] = 0;
  _$jscoverage['assets/js/jszip.js'][218] = 0;
  _$jscoverage['assets/js/jszip.js'][219] = 0;
  _$jscoverage['assets/js/jszip.js'][220] = 0;
  _$jscoverage['assets/js/jszip.js'][224] = 0;
  _$jscoverage['assets/js/jszip.js'][234] = 0;
  _$jscoverage['assets/js/jszip.js'][235] = 0;
  _$jscoverage['assets/js/jszip.js'][236] = 0;
  _$jscoverage['assets/js/jszip.js'][237] = 0;
  _$jscoverage['assets/js/jszip.js'][239] = 0;
  _$jscoverage['assets/js/jszip.js'][240] = 0;
  _$jscoverage['assets/js/jszip.js'][241] = 0;
  _$jscoverage['assets/js/jszip.js'][243] = 0;
  _$jscoverage['assets/js/jszip.js'][254] = 0;
  _$jscoverage['assets/js/jszip.js'][256] = 0;
  _$jscoverage['assets/js/jszip.js'][257] = 0;
  _$jscoverage['assets/js/jszip.js'][258] = 0;
  _$jscoverage['assets/js/jszip.js'][261] = 0;
  _$jscoverage['assets/js/jszip.js'][263] = 0;
  _$jscoverage['assets/js/jszip.js'][264] = 0;
  _$jscoverage['assets/js/jszip.js'][265] = 0;
  _$jscoverage['assets/js/jszip.js'][266] = 0;
  _$jscoverage['assets/js/jszip.js'][267] = 0;
  _$jscoverage['assets/js/jszip.js'][268] = 0;
  _$jscoverage['assets/js/jszip.js'][270] = 0;
  _$jscoverage['assets/js/jszip.js'][273] = 0;
  _$jscoverage['assets/js/jszip.js'][277] = 0;
  _$jscoverage['assets/js/jszip.js'][278] = 0;
  _$jscoverage['assets/js/jszip.js'][280] = 0;
  _$jscoverage['assets/js/jszip.js'][281] = 0;
  _$jscoverage['assets/js/jszip.js'][285] = 0;
  _$jscoverage['assets/js/jszip.js'][286] = 0;
  _$jscoverage['assets/js/jszip.js'][290] = 0;
  _$jscoverage['assets/js/jszip.js'][300] = 0;
  _$jscoverage['assets/js/jszip.js'][301] = 0;
  _$jscoverage['assets/js/jszip.js'][302] = 0;
  _$jscoverage['assets/js/jszip.js'][304] = 0;
  _$jscoverage['assets/js/jszip.js'][305] = 0;
  _$jscoverage['assets/js/jszip.js'][314] = 0;
  _$jscoverage['assets/js/jszip.js'][316] = 0;
  _$jscoverage['assets/js/jszip.js'][317] = 0;
  _$jscoverage['assets/js/jszip.js'][321] = 0;
  _$jscoverage['assets/js/jszip.js'][322] = 0;
  _$jscoverage['assets/js/jszip.js'][324] = 0;
  _$jscoverage['assets/js/jszip.js'][333] = 0;
  _$jscoverage['assets/js/jszip.js'][334] = 0;
  _$jscoverage['assets/js/jszip.js'][337] = 0;
  _$jscoverage['assets/js/jszip.js'][338] = 0;
  _$jscoverage['assets/js/jszip.js'][339] = 0;
  _$jscoverage['assets/js/jszip.js'][341] = 0;
  _$jscoverage['assets/js/jszip.js'][342] = 0;
  _$jscoverage['assets/js/jszip.js'][343] = 0;
  _$jscoverage['assets/js/jszip.js'][344] = 0;
  _$jscoverage['assets/js/jszip.js'][345] = 0;
  _$jscoverage['assets/js/jszip.js'][346] = 0;
  _$jscoverage['assets/js/jszip.js'][348] = 0;
  _$jscoverage['assets/js/jszip.js'][350] = 0;
  _$jscoverage['assets/js/jszip.js'][354] = 0;
  _$jscoverage['assets/js/jszip.js'][355] = 0;
  _$jscoverage['assets/js/jszip.js'][356] = 0;
  _$jscoverage['assets/js/jszip.js'][357] = 0;
  _$jscoverage['assets/js/jszip.js'][359] = 0;
  _$jscoverage['assets/js/jszip.js'][360] = 0;
  _$jscoverage['assets/js/jszip.js'][361] = 0;
  _$jscoverage['assets/js/jszip.js'][364] = 0;
  _$jscoverage['assets/js/jszip.js'][365] = 0;
  _$jscoverage['assets/js/jszip.js'][367] = 0;
  _$jscoverage['assets/js/jszip.js'][378] = 0;
  _$jscoverage['assets/js/jszip.js'][379] = 0;
  _$jscoverage['assets/js/jszip.js'][391] = 0;
  _$jscoverage['assets/js/jszip.js'][392] = 0;
  _$jscoverage['assets/js/jszip.js'][393] = 0;
  _$jscoverage['assets/js/jszip.js'][394] = 0;
  _$jscoverage['assets/js/jszip.js'][395] = 0;
  _$jscoverage['assets/js/jszip.js'][397] = 0;
  _$jscoverage['assets/js/jszip.js'][398] = 0;
  _$jscoverage['assets/js/jszip.js'][399] = 0;
  _$jscoverage['assets/js/jszip.js'][400] = 0;
  _$jscoverage['assets/js/jszip.js'][401] = 0;
  _$jscoverage['assets/js/jszip.js'][404] = 0;
  _$jscoverage['assets/js/jszip.js'][407] = 0;
  _$jscoverage['assets/js/jszip.js'][410] = 0;
  _$jscoverage['assets/js/jszip.js'][412] = 0;
  _$jscoverage['assets/js/jszip.js'][414] = 0;
  _$jscoverage['assets/js/jszip.js'][416] = 0;
  _$jscoverage['assets/js/jszip.js'][418] = 0;
  _$jscoverage['assets/js/jszip.js'][420] = 0;
  _$jscoverage['assets/js/jszip.js'][422] = 0;
  _$jscoverage['assets/js/jszip.js'][424] = 0;
  _$jscoverage['assets/js/jszip.js'][426] = 0;
  _$jscoverage['assets/js/jszip.js'][429] = 0;
  _$jscoverage['assets/js/jszip.js'][431] = 0;
  _$jscoverage['assets/js/jszip.js'][450] = 0;
  _$jscoverage['assets/js/jszip.js'][461] = 0;
  _$jscoverage['assets/js/jszip.js'][462] = 0;
  _$jscoverage['assets/js/jszip.js'][464] = 0;
  _$jscoverage['assets/js/jszip.js'][470] = 0;
  _$jscoverage['assets/js/jszip.js'][471] = 0;
  _$jscoverage['assets/js/jszip.js'][478] = 0;
  _$jscoverage['assets/js/jszip.js'][486] = 0;
  _$jscoverage['assets/js/jszip.js'][487] = 0;
  _$jscoverage['assets/js/jszip.js'][488] = 0;
  _$jscoverage['assets/js/jszip.js'][490] = 0;
  _$jscoverage['assets/js/jszip.js'][496] = 0;
  _$jscoverage['assets/js/jszip.js'][498] = 0;
  _$jscoverage['assets/js/jszip.js'][499] = 0;
  _$jscoverage['assets/js/jszip.js'][500] = 0;
  _$jscoverage['assets/js/jszip.js'][508] = 0;
  _$jscoverage['assets/js/jszip.js'][513] = 0;
  _$jscoverage['assets/js/jszip.js'][523] = 0;
  _$jscoverage['assets/js/jszip.js'][534] = 0;
  _$jscoverage['assets/js/jszip.js'][535] = 0;
  _$jscoverage['assets/js/jszip.js'][536] = 0;
  _$jscoverage['assets/js/jszip.js'][537] = 0;
  _$jscoverage['assets/js/jszip.js'][539] = 0;
  _$jscoverage['assets/js/jszip.js'][540] = 0;
  _$jscoverage['assets/js/jszip.js'][541] = 0;
  _$jscoverage['assets/js/jszip.js'][543] = 0;
  _$jscoverage['assets/js/jszip.js'][546] = 0;
  _$jscoverage['assets/js/jszip.js'][559] = 0;
  _$jscoverage['assets/js/jszip.js'][560] = 0;
  _$jscoverage['assets/js/jszip.js'][561] = 0;
  _$jscoverage['assets/js/jszip.js'][562] = 0;
  _$jscoverage['assets/js/jszip.js'][563] = 0;
  _$jscoverage['assets/js/jszip.js'][566] = 0;
  _$jscoverage['assets/js/jszip.js'][567] = 0;
  _$jscoverage['assets/js/jszip.js'][571] = 0;
  _$jscoverage['assets/js/jszip.js'][572] = 0;
  _$jscoverage['assets/js/jszip.js'][574] = 0;
  _$jscoverage['assets/js/jszip.js'][583] = 0;
  _$jscoverage['assets/js/jszip.js'][584] = 0;
  _$jscoverage['assets/js/jszip.js'][587] = 0;
  _$jscoverage['assets/js/jszip.js'][588] = 0;
  _$jscoverage['assets/js/jszip.js'][589] = 0;
  _$jscoverage['assets/js/jszip.js'][594] = 0;
  _$jscoverage['assets/js/jszip.js'][595] = 0;
  _$jscoverage['assets/js/jszip.js'][598] = 0;
  _$jscoverage['assets/js/jszip.js'][599] = 0;
  _$jscoverage['assets/js/jszip.js'][600] = 0;
  _$jscoverage['assets/js/jszip.js'][609] = 0;
  _$jscoverage['assets/js/jszip.js'][610] = 0;
  _$jscoverage['assets/js/jszip.js'][611] = 0;
  _$jscoverage['assets/js/jszip.js'][613] = 0;
  _$jscoverage['assets/js/jszip.js'][614] = 0;
  _$jscoverage['assets/js/jszip.js'][616] = 0;
  _$jscoverage['assets/js/jszip.js'][619] = 0;
  _$jscoverage['assets/js/jszip.js'][620] = 0;
  _$jscoverage['assets/js/jszip.js'][622] = 0;
  _$jscoverage['assets/js/jszip.js'][625] = 0;
  _$jscoverage['assets/js/jszip.js'][626] = 0;
  _$jscoverage['assets/js/jszip.js'][628] = 0;
  _$jscoverage['assets/js/jszip.js'][629] = 0;
  _$jscoverage['assets/js/jszip.js'][634] = 0;
  _$jscoverage['assets/js/jszip.js'][646] = 0;
  _$jscoverage['assets/js/jszip.js'][652] = 0;
  _$jscoverage['assets/js/jszip.js'][654] = 0;
  _$jscoverage['assets/js/jszip.js'][658] = 0;
  _$jscoverage['assets/js/jszip.js'][659] = 0;
  _$jscoverage['assets/js/jszip.js'][660] = 0;
  _$jscoverage['assets/js/jszip.js'][662] = 0;
  _$jscoverage['assets/js/jszip.js'][663] = 0;
  _$jscoverage['assets/js/jszip.js'][664] = 0;
  _$jscoverage['assets/js/jszip.js'][665] = 0;
  _$jscoverage['assets/js/jszip.js'][668] = 0;
  _$jscoverage['assets/js/jszip.js'][670] = 0;
  _$jscoverage['assets/js/jszip.js'][671] = 0;
  _$jscoverage['assets/js/jszip.js'][672] = 0;
  _$jscoverage['assets/js/jszip.js'][673] = 0;
  _$jscoverage['assets/js/jszip.js'][676] = 0;
  _$jscoverage['assets/js/jszip.js'][679] = 0;
  _$jscoverage['assets/js/jszip.js'][698] = 0;
  _$jscoverage['assets/js/jszip.js'][703] = 0;
  _$jscoverage['assets/js/jszip.js'][704] = 0;
  _$jscoverage['assets/js/jszip.js'][707] = 0;
  _$jscoverage['assets/js/jszip.js'][708] = 0;
  _$jscoverage['assets/js/jszip.js'][711] = 0;
  _$jscoverage['assets/js/jszip.js'][712] = 0;
  _$jscoverage['assets/js/jszip.js'][713] = 0;
  _$jscoverage['assets/js/jszip.js'][715] = 0;
  _$jscoverage['assets/js/jszip.js'][716] = 0;
  _$jscoverage['assets/js/jszip.js'][719] = 0;
  _$jscoverage['assets/js/jszip.js'][721] = 0;
  _$jscoverage['assets/js/jszip.js'][725] = 0;
  _$jscoverage['assets/js/jszip.js'][730] = 0;
  _$jscoverage['assets/js/jszip.js'][732] = 0;
  _$jscoverage['assets/js/jszip.js'][736] = 0;
  _$jscoverage['assets/js/jszip.js'][738] = 0;
  _$jscoverage['assets/js/jszip.js'][749] = 0;
  _$jscoverage['assets/js/jszip.js'][750] = 0;
  _$jscoverage['assets/js/jszip.js'][753] = 0;
  _$jscoverage['assets/js/jszip.js'][755] = 0;
  _$jscoverage['assets/js/jszip.js'][822] = 0;
  _$jscoverage['assets/js/jszip.js'][823] = 0;
  _$jscoverage['assets/js/jszip.js'][824] = 0;
  _$jscoverage['assets/js/jszip.js'][825] = 0;
  _$jscoverage['assets/js/jszip.js'][827] = 0;
  _$jscoverage['assets/js/jszip.js'][828] = 0;
  _$jscoverage['assets/js/jszip.js'][829] = 0;
  _$jscoverage['assets/js/jszip.js'][830] = 0;
  _$jscoverage['assets/js/jszip.js'][831] = 0;
  _$jscoverage['assets/js/jszip.js'][832] = 0;
  _$jscoverage['assets/js/jszip.js'][835] = 0;
  _$jscoverage['assets/js/jszip.js'][840] = 0;
  _$jscoverage['assets/js/jszip.js'][841] = 0;
  _$jscoverage['assets/js/jszip.js'][842] = 0;
  _$jscoverage['assets/js/jszip.js'][843] = 0;
  _$jscoverage['assets/js/jszip.js'][846] = 0;
  _$jscoverage['assets/js/jszip.js'][857] = 0;
  _$jscoverage['assets/js/jszip.js'][858] = 0;
  _$jscoverage['assets/js/jszip.js'][859] = 0;
  _$jscoverage['assets/js/jszip.js'][861] = 0;
  _$jscoverage['assets/js/jszip.js'][862] = 0;
  _$jscoverage['assets/js/jszip.js'][867] = 0;
  _$jscoverage['assets/js/jszip.js'][869] = 0;
  _$jscoverage['assets/js/jszip.js'][871] = 0;
  _$jscoverage['assets/js/jszip.js'][873] = 0;
  _$jscoverage['assets/js/jszip.js'][874] = 0;
  _$jscoverage['assets/js/jszip.js'][875] = 0;
  _$jscoverage['assets/js/jszip.js'][876] = 0;
  _$jscoverage['assets/js/jszip.js'][877] = 0;
  _$jscoverage['assets/js/jszip.js'][879] = 0;
  _$jscoverage['assets/js/jszip.js'][880] = 0;
  _$jscoverage['assets/js/jszip.js'][881] = 0;
  _$jscoverage['assets/js/jszip.js'][886] = 0;
  _$jscoverage['assets/js/jszip.js'][893] = 0;
  _$jscoverage['assets/js/jszip.js'][894] = 0;
  _$jscoverage['assets/js/jszip.js'][895] = 0;
  _$jscoverage['assets/js/jszip.js'][896] = 0;
  _$jscoverage['assets/js/jszip.js'][897] = 0;
  _$jscoverage['assets/js/jszip.js'][901] = 0;
  _$jscoverage['assets/js/jszip.js'][902] = 0;
  _$jscoverage['assets/js/jszip.js'][906] = 0;
  _$jscoverage['assets/js/jszip.js'][907] = 0;
  _$jscoverage['assets/js/jszip.js'][910] = 0;
  _$jscoverage['assets/js/jszip.js'][912] = 0;
  _$jscoverage['assets/js/jszip.js'][914] = 0;
  _$jscoverage['assets/js/jszip.js'][915] = 0;
  _$jscoverage['assets/js/jszip.js'][916] = 0;
  _$jscoverage['assets/js/jszip.js'][917] = 0;
  _$jscoverage['assets/js/jszip.js'][918] = 0;
  _$jscoverage['assets/js/jszip.js'][919] = 0;
  _$jscoverage['assets/js/jszip.js'][920] = 0;
  _$jscoverage['assets/js/jszip.js'][922] = 0;
  _$jscoverage['assets/js/jszip.js'][923] = 0;
  _$jscoverage['assets/js/jszip.js'][924] = 0;
  _$jscoverage['assets/js/jszip.js'][925] = 0;
  _$jscoverage['assets/js/jszip.js'][930] = 0;
  _$jscoverage['assets/js/jszip.js'][949] = 0;
  _$jscoverage['assets/js/jszip.js'][953] = 0;
  _$jscoverage['assets/js/jszip.js'][956] = 0;
  _$jscoverage['assets/js/jszip.js'][966] = 0;
  _$jscoverage['assets/js/jszip.js'][969] = 0;
  _$jscoverage['assets/js/jszip.js'][973] = 0;
  _$jscoverage['assets/js/jszip.js'][977] = 0;
  _$jscoverage['assets/js/jszip.js'][988] = 0;
  _$jscoverage['assets/js/jszip.js'][989] = 0;
  _$jscoverage['assets/js/jszip.js'][991] = 0;
  _$jscoverage['assets/js/jszip.js'][992] = 0;
  _$jscoverage['assets/js/jszip.js'][993] = 0;
  _$jscoverage['assets/js/jszip.js'][997] = 0;
  _$jscoverage['assets/js/jszip.js'][998] = 0;
  _$jscoverage['assets/js/jszip.js'][1000] = 0;
  _$jscoverage['assets/js/jszip.js'][1001] = 0;
  _$jscoverage['assets/js/jszip.js'][1005] = 0;
  _$jscoverage['assets/js/jszip.js'][1009] = 0;
  _$jscoverage['assets/js/jszip.js'][1010] = 0;
  _$jscoverage['assets/js/jszip.js'][1017] = 0;
  _$jscoverage['assets/js/jszip.js'][1018] = 0;
  _$jscoverage['assets/js/jszip.js'][1019] = 0;
  _$jscoverage['assets/js/jszip.js'][1021] = 0;
  _$jscoverage['assets/js/jszip.js'][1031] = 0;
  _$jscoverage['assets/js/jszip.js'][1042] = 0;
  _$jscoverage['assets/js/jszip.js'][1051] = 0;
  _$jscoverage['assets/js/jszip.js'][1053] = 0;
  _$jscoverage['assets/js/jszip.js'][1055] = 0;
  _$jscoverage['assets/js/jszip.js'][1059] = 0;
  _$jscoverage['assets/js/jszip.js'][1061] = 0;
  _$jscoverage['assets/js/jszip.js'][1063] = 0;
  _$jscoverage['assets/js/jszip.js'][1064] = 0;
  _$jscoverage['assets/js/jszip.js'][1069] = 0;
  _$jscoverage['assets/js/jszip.js'][1078] = 0;
  _$jscoverage['assets/js/jszip.js'][1079] = 0;
  _$jscoverage['assets/js/jszip.js'][1088] = 0;
  _$jscoverage['assets/js/jszip.js'][1089] = 0;
  _$jscoverage['assets/js/jszip.js'][1090] = 0;
  _$jscoverage['assets/js/jszip.js'][1098] = 0;
  _$jscoverage['assets/js/jszip.js'][1099] = 0;
  _$jscoverage['assets/js/jszip.js'][1100] = 0;
  _$jscoverage['assets/js/jszip.js'][1102] = 0;
  _$jscoverage['assets/js/jszip.js'][1103] = 0;
  _$jscoverage['assets/js/jszip.js'][1110] = 0;
  _$jscoverage['assets/js/jszip.js'][1120] = 0;
  _$jscoverage['assets/js/jszip.js'][1121] = 0;
  _$jscoverage['assets/js/jszip.js'][1123] = 0;
  _$jscoverage['assets/js/jszip.js'][1124] = 0;
  _$jscoverage['assets/js/jszip.js'][1125] = 0;
  _$jscoverage['assets/js/jszip.js'][1126] = 0;
  _$jscoverage['assets/js/jszip.js'][1128] = 0;
  _$jscoverage['assets/js/jszip.js'][1130] = 0;
  _$jscoverage['assets/js/jszip.js'][1132] = 0;
  _$jscoverage['assets/js/jszip.js'][1135] = 0;
  _$jscoverage['assets/js/jszip.js'][1136] = 0;
  _$jscoverage['assets/js/jszip.js'][1144] = 0;
  _$jscoverage['assets/js/jszip.js'][1145] = 0;
  _$jscoverage['assets/js/jszip.js'][1146] = 0;
  _$jscoverage['assets/js/jszip.js'][1148] = 0;
  _$jscoverage['assets/js/jszip.js'][1149] = 0;
  _$jscoverage['assets/js/jszip.js'][1152] = 0;
  _$jscoverage['assets/js/jszip.js'][1155] = 0;
  _$jscoverage['assets/js/jszip.js'][1158] = 0;
  _$jscoverage['assets/js/jszip.js'][1161] = 0;
  _$jscoverage['assets/js/jszip.js'][1164] = 0;
  _$jscoverage['assets/js/jszip.js'][1167] = 0;
  _$jscoverage['assets/js/jszip.js'][1172] = 0;
  _$jscoverage['assets/js/jszip.js'][1176] = 0;
  _$jscoverage['assets/js/jszip.js'][1179] = 0;
  _$jscoverage['assets/js/jszip.js'][1182] = 0;
  _$jscoverage['assets/js/jszip.js'][1187] = 0;
  _$jscoverage['assets/js/jszip.js'][1189] = 0;
  _$jscoverage['assets/js/jszip.js'][1192] = 0;
  _$jscoverage['assets/js/jszip.js'][1196] = 0;
  _$jscoverage['assets/js/jszip.js'][1199] = 0;
  _$jscoverage['assets/js/jszip.js'][1204] = 0;
  _$jscoverage['assets/js/jszip.js'][1207] = 0;
  _$jscoverage['assets/js/jszip.js'][1210] = 0;
  _$jscoverage['assets/js/jszip.js'][1214] = 0;
  _$jscoverage['assets/js/jszip.js'][1219] = 0;
  _$jscoverage['assets/js/jszip.js'][1222] = 0;
  _$jscoverage['assets/js/jszip.js'][1225] = 0;
  _$jscoverage['assets/js/jszip.js'][1228] = 0;
  _$jscoverage['assets/js/jszip.js'][1241] = 0;
  _$jscoverage['assets/js/jszip.js'][1242] = 0;
  _$jscoverage['assets/js/jszip.js'][1245] = 0;
  _$jscoverage['assets/js/jszip.js'][1247] = 0;
  _$jscoverage['assets/js/jszip.js'][1248] = 0;
  _$jscoverage['assets/js/jszip.js'][1250] = 0;
  _$jscoverage['assets/js/jszip.js'][1251] = 0;
  _$jscoverage['assets/js/jszip.js'][1252] = 0;
  _$jscoverage['assets/js/jszip.js'][1253] = 0;
  _$jscoverage['assets/js/jszip.js'][1262] = 0;
  _$jscoverage['assets/js/jszip.js'][1263] = 0;
  _$jscoverage['assets/js/jszip.js'][1264] = 0;
  _$jscoverage['assets/js/jszip.js'][1266] = 0;
  _$jscoverage['assets/js/jszip.js'][1267] = 0;
  _$jscoverage['assets/js/jszip.js'][1269] = 0;
  _$jscoverage['assets/js/jszip.js'][1270] = 0;
  _$jscoverage['assets/js/jszip.js'][1272] = 0;
  _$jscoverage['assets/js/jszip.js'][1273] = 0;
  _$jscoverage['assets/js/jszip.js'][1275] = 0;
  _$jscoverage['assets/js/jszip.js'][1276] = 0;
  _$jscoverage['assets/js/jszip.js'][1285] = 0;
  _$jscoverage['assets/js/jszip.js'][1286] = 0;
  _$jscoverage['assets/js/jszip.js'][1287] = 0;
  _$jscoverage['assets/js/jszip.js'][1289] = 0;
  _$jscoverage['assets/js/jszip.js'][1290] = 0;
  _$jscoverage['assets/js/jszip.js'][1292] = 0;
  _$jscoverage['assets/js/jszip.js'][1293] = 0;
  _$jscoverage['assets/js/jszip.js'][1295] = 0;
  _$jscoverage['assets/js/jszip.js'][1296] = 0;
  _$jscoverage['assets/js/jszip.js'][1298] = 0;
  _$jscoverage['assets/js/jszip.js'][1299] = 0;
  _$jscoverage['assets/js/jszip.js'][1301] = 0;
  _$jscoverage['assets/js/jszip.js'][1302] = 0;
  _$jscoverage['assets/js/jszip.js'][1309] = 0;
  _$jscoverage['assets/js/jszip.js'][1315] = 0;
  _$jscoverage['assets/js/jszip.js'][1316] = 0;
  _$jscoverage['assets/js/jszip.js'][1317] = 0;
  _$jscoverage['assets/js/jszip.js'][1318] = 0;
  _$jscoverage['assets/js/jszip.js'][1319] = 0;
  _$jscoverage['assets/js/jszip.js'][1320] = 0;
  _$jscoverage['assets/js/jszip.js'][1323] = 0;
  _$jscoverage['assets/js/jszip.js'][1330] = 0;
  _$jscoverage['assets/js/jszip.js'][1338] = 0;
  _$jscoverage['assets/js/jszip.js'][1350] = 0;
  _$jscoverage['assets/js/jszip.js'][1352] = 0;
  _$jscoverage['assets/js/jszip.js'][1354] = 0;
  _$jscoverage['assets/js/jszip.js'][1357] = 0;
  _$jscoverage['assets/js/jszip.js'][1358] = 0;
  _$jscoverage['assets/js/jszip.js'][1359] = 0;
  _$jscoverage['assets/js/jszip.js'][1361] = 0;
  _$jscoverage['assets/js/jszip.js'][1363] = 0;
  _$jscoverage['assets/js/jszip.js'][1364] = 0;
  _$jscoverage['assets/js/jszip.js'][1365] = 0;
  _$jscoverage['assets/js/jszip.js'][1367] = 0;
  _$jscoverage['assets/js/jszip.js'][1368] = 0;
  _$jscoverage['assets/js/jszip.js'][1369] = 0;
  _$jscoverage['assets/js/jszip.js'][1370] = 0;
  _$jscoverage['assets/js/jszip.js'][1372] = 0;
  _$jscoverage['assets/js/jszip.js'][1373] = 0;
  _$jscoverage['assets/js/jszip.js'][1374] = 0;
  _$jscoverage['assets/js/jszip.js'][1375] = 0;
  _$jscoverage['assets/js/jszip.js'][1378] = 0;
  _$jscoverage['assets/js/jszip.js'][1384] = 0;
  _$jscoverage['assets/js/jszip.js'][1389] = 0;
  _$jscoverage['assets/js/jszip.js'][1390] = 0;
  _$jscoverage['assets/js/jszip.js'][1391] = 0;
  _$jscoverage['assets/js/jszip.js'][1392] = 0;
  _$jscoverage['assets/js/jszip.js'][1394] = 0;
  _$jscoverage['assets/js/jszip.js'][1396] = 0;
  _$jscoverage['assets/js/jszip.js'][1398] = 0;
  _$jscoverage['assets/js/jszip.js'][1399] = 0;
  _$jscoverage['assets/js/jszip.js'][1400] = 0;
  _$jscoverage['assets/js/jszip.js'][1401] = 0;
  _$jscoverage['assets/js/jszip.js'][1403] = 0;
  _$jscoverage['assets/js/jszip.js'][1404] = 0;
  _$jscoverage['assets/js/jszip.js'][1405] = 0;
  _$jscoverage['assets/js/jszip.js'][1407] = 0;
  _$jscoverage['assets/js/jszip.js'][1409] = 0;
  _$jscoverage['assets/js/jszip.js'][1410] = 0;
  _$jscoverage['assets/js/jszip.js'][1412] = 0;
  _$jscoverage['assets/js/jszip.js'][1413] = 0;
  _$jscoverage['assets/js/jszip.js'][1418] = 0;
}
_$jscoverage['assets/js/jszip.js'].source = ["<span class=\"c\">/**</span>","","<span class=\"c\">JSZip - A Javascript class for generating and reading zip files</span>","<span class=\"c\">&lt;http://stuartk.com/jszip&gt;</span>","","<span class=\"c\">(c) 2009-2012 Stuart Knightley &lt;stuart [at] stuartk.com&gt;</span>","<span class=\"c\">Dual licenced under the MIT license or GPLv3. See LICENSE.markdown.</span>","","<span class=\"c\">Usage:</span>","<span class=\"c\">   zip = new JSZip();</span>","<span class=\"c\">   zip.file(\"hello.txt\", \"Hello, World!\").file(\"tempfile\", \"nothing\");</span>","<span class=\"c\">   zip.folder(\"images\").file(\"smile.gif\", base64Data, {base64: true});</span>","<span class=\"c\">   zip.file(\"Xmas.txt\", \"Ho ho ho !\", {date : new Date(\"December 25, 2007 00:00:01\")});</span>","<span class=\"c\">   zip.remove(\"tempfile\");</span>","","<span class=\"c\">   base64zip = zip.generate();</span>","","<span class=\"c\">**/</span>","<span class=\"s\">\"use strict\"</span><span class=\"k\">;</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * Representation a of zip file in js</span>","<span class=\"c\"> * @constructor</span>","<span class=\"c\"> * @param {String=|ArrayBuffer=|Uint8Array=|Buffer=} data the data to load, if any (optional).</span>","<span class=\"c\"> * @param {Object=} options the options for creating this objects (optional).</span>","<span class=\"c\"> */</span>","<span class=\"k\">var</span> JSZip <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>data<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","   <span class=\"c\">// object containing the files :</span>","   <span class=\"c\">// {</span>","   <span class=\"c\">//   \"folder/\" : {...},</span>","   <span class=\"c\">//   \"folder/data.txt\" : {...}</span>","   <span class=\"c\">// }</span>","   <span class=\"k\">this</span><span class=\"k\">.</span>files <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","   <span class=\"c\">// Where we are in the hierarchy</span>","   <span class=\"k\">this</span><span class=\"k\">.</span>root <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","","   <span class=\"k\">if</span> <span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>load<span class=\"k\">(</span>data<span class=\"k\">,</span> options<span class=\"k\">);</span>","   <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","JSZip<span class=\"k\">.</span>signature <span class=\"k\">=</span> <span class=\"k\">{</span>","   LOCAL_FILE_HEADER <span class=\"k\">:</span> <span class=\"s\">\"</span><span class=\"t\">\\x</span><span class=\"s\">50</span><span class=\"t\">\\x</span><span class=\"s\">4b</span><span class=\"t\">\\x</span><span class=\"s\">03</span><span class=\"t\">\\x</span><span class=\"s\">04\"</span><span class=\"k\">,</span>","   CENTRAL_FILE_HEADER <span class=\"k\">:</span> <span class=\"s\">\"</span><span class=\"t\">\\x</span><span class=\"s\">50</span><span class=\"t\">\\x</span><span class=\"s\">4b</span><span class=\"t\">\\x</span><span class=\"s\">01</span><span class=\"t\">\\x</span><span class=\"s\">02\"</span><span class=\"k\">,</span>","   CENTRAL_DIRECTORY_END <span class=\"k\">:</span> <span class=\"s\">\"</span><span class=\"t\">\\x</span><span class=\"s\">50</span><span class=\"t\">\\x</span><span class=\"s\">4b</span><span class=\"t\">\\x</span><span class=\"s\">05</span><span class=\"t\">\\x</span><span class=\"s\">06\"</span><span class=\"k\">,</span>","   ZIP64_CENTRAL_DIRECTORY_LOCATOR <span class=\"k\">:</span> <span class=\"s\">\"</span><span class=\"t\">\\x</span><span class=\"s\">50</span><span class=\"t\">\\x</span><span class=\"s\">4b</span><span class=\"t\">\\x</span><span class=\"s\">06</span><span class=\"t\">\\x</span><span class=\"s\">07\"</span><span class=\"k\">,</span>","   ZIP64_CENTRAL_DIRECTORY_END <span class=\"k\">:</span> <span class=\"s\">\"</span><span class=\"t\">\\x</span><span class=\"s\">50</span><span class=\"t\">\\x</span><span class=\"s\">4b</span><span class=\"t\">\\x</span><span class=\"s\">06</span><span class=\"t\">\\x</span><span class=\"s\">06\"</span><span class=\"k\">,</span>","   DATA_DESCRIPTOR <span class=\"k\">:</span> <span class=\"s\">\"</span><span class=\"t\">\\x</span><span class=\"s\">50</span><span class=\"t\">\\x</span><span class=\"s\">4b</span><span class=\"t\">\\x</span><span class=\"s\">07</span><span class=\"t\">\\x</span><span class=\"s\">08\"</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">// Default properties for a new file</span>","JSZip<span class=\"k\">.</span>defaults <span class=\"k\">=</span> <span class=\"k\">{</span>","   base64<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","   binary<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","   dir<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","   date<span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","   compression<span class=\"k\">:</span> <span class=\"k\">null</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","","JSZip<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","","   <span class=\"c\">/**</span>","<span class=\"c\">    * Returns the raw data of a ZipObject, decompress the content if necessary.</span>","<span class=\"c\">    * @param {ZipObject} file the file to use.</span>","<span class=\"c\">    * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.</span>","<span class=\"c\">    */</span>","   <span class=\"k\">var</span> getRawData <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>file<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>file<span class=\"k\">.</span>_data <span class=\"k\">instanceof</span> JSZip<span class=\"k\">.</span>CompressedObject<span class=\"k\">)</span> <span class=\"k\">{</span>","         file<span class=\"k\">.</span>_data <span class=\"k\">=</span> file<span class=\"k\">.</span>_data<span class=\"k\">.</span>getContent<span class=\"k\">();</span>","         file<span class=\"k\">.</span>options<span class=\"k\">.</span>binary <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","         file<span class=\"k\">.</span>options<span class=\"k\">.</span>base64 <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","         <span class=\"k\">if</span> <span class=\"k\">(</span>JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>getTypeOf<span class=\"k\">(</span>file<span class=\"k\">.</span>_data<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"uint8array\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> copy <span class=\"k\">=</span> file<span class=\"k\">.</span>_data<span class=\"k\">;</span>","            <span class=\"c\">// when reading an arraybuffer, the CompressedObject mechanism will keep it and subarray() a Uint8Array.</span>","            <span class=\"c\">// if we request a file in the same format, we might get the same Uint8Array or its ArrayBuffer (the original zip file).</span>","            file<span class=\"k\">.</span>_data <span class=\"k\">=</span> <span class=\"k\">new</span> Uint8Array<span class=\"k\">(</span>copy<span class=\"k\">.</span>length<span class=\"k\">);</span>","            <span class=\"c\">// with an empty Uint8Array, Opera fails with a \"Offset larger than array size\"</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>copy<span class=\"k\">.</span>length <span class=\"k\">!==</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","               file<span class=\"k\">.</span>_data<span class=\"k\">.</span>set<span class=\"k\">(</span>copy<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","         <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> file<span class=\"k\">.</span>_data<span class=\"k\">;</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","   <span class=\"c\">/**</span>","<span class=\"c\">    * Returns the data of a ZipObject in a binary form. If the content is an unicode string, encode it.</span>","<span class=\"c\">    * @param {ZipObject} file the file to use.</span>","<span class=\"c\">    * @return {String|ArrayBuffer|Uint8Array|Buffer} the data.</span>","<span class=\"c\">    */</span>","   <span class=\"k\">var</span> getBinaryData <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>file<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> result <span class=\"k\">=</span> getRawData<span class=\"k\">(</span>file<span class=\"k\">),</span> type <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>getTypeOf<span class=\"k\">(</span>result<span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>type <span class=\"k\">===</span> <span class=\"s\">\"string\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">if</span> <span class=\"k\">(!</span>file<span class=\"k\">.</span>options<span class=\"k\">.</span>binary<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// unicode text !</span>","            <span class=\"c\">// unicode string =&gt; binary string is a painful process, check if we can avoid it.</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>JSZip<span class=\"k\">.</span>support<span class=\"k\">.</span>uint8array <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> TextEncoder <span class=\"k\">===</span> <span class=\"s\">\"function\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","               <span class=\"k\">return</span> TextEncoder<span class=\"k\">(</span><span class=\"s\">\"utf-8\"</span><span class=\"k\">).</span>encode<span class=\"k\">(</span>result<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>JSZip<span class=\"k\">.</span>support<span class=\"k\">.</span>nodebuffer<span class=\"k\">)</span> <span class=\"k\">{</span>","               <span class=\"k\">return</span> <span class=\"k\">new</span> Buffer<span class=\"k\">(</span>result<span class=\"k\">,</span> <span class=\"s\">\"utf-8\"</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","         <span class=\"k\">}</span>","         <span class=\"k\">return</span> file<span class=\"k\">.</span>asBinary<span class=\"k\">();</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> result<span class=\"k\">;</span>","   <span class=\"k\">}</span>","","   <span class=\"c\">/**</span>","<span class=\"c\">    * Transform this._data into a string.</span>","<span class=\"c\">    * @param {function} filter a function String -&gt; String, applied if not null on the result.</span>","<span class=\"c\">    * @return {String} the string representing this._data.</span>","<span class=\"c\">    */</span>","   <span class=\"k\">var</span> dataToString <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>asUTF8<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> result <span class=\"k\">=</span> getRawData<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>result <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">||</span> <span class=\"k\">typeof</span> result <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"c\">// if the data is a base64 string, we decode it before checking the encoding !</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>base64<span class=\"k\">)</span> <span class=\"k\">{</span>","         result <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>base64<span class=\"k\">.</span>decode<span class=\"k\">(</span>result<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>asUTF8 <span class=\"k\">&amp;&amp;</span> <span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>binary<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"c\">// JSZip.prototype.utf8decode supports arrays as input</span>","         <span class=\"c\">// skip to array =&gt; string step, utf8decode will do it.</span>","         result <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>prototype<span class=\"k\">.</span>utf8decode<span class=\"k\">(</span>result<span class=\"k\">);</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","         <span class=\"c\">// no utf8 transformation, do the array =&gt; string step.</span>","         result <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>transformTo<span class=\"k\">(</span><span class=\"s\">\"string\"</span><span class=\"k\">,</span> result<span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">if</span> <span class=\"k\">(!</span>asUTF8 <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>options<span class=\"k\">.</span>binary<span class=\"k\">)</span> <span class=\"k\">{</span>","         result <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>prototype<span class=\"k\">.</span>utf8encode<span class=\"k\">(</span>result<span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> result<span class=\"k\">;</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","   <span class=\"c\">/**</span>","<span class=\"c\">    * A simple object representing a file in the zip file.</span>","<span class=\"c\">    * @constructor</span>","<span class=\"c\">    * @param {string} name the name of the file</span>","<span class=\"c\">    * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data</span>","<span class=\"c\">    * @param {Object} options the options of the file</span>","<span class=\"c\">    */</span>","   <span class=\"k\">var</span> ZipObject <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">,</span> data<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>name <span class=\"k\">=</span> name<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>_data <span class=\"k\">=</span> data<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>options <span class=\"k\">=</span> options<span class=\"k\">;</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","   ZipObject<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","      <span class=\"c\">/**</span>","<span class=\"c\">       * Return the content as UTF8 string.</span>","<span class=\"c\">       * @return {string} the UTF8 string.</span>","<span class=\"c\">       */</span>","      asText <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> dataToString<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      <span class=\"c\">/**</span>","<span class=\"c\">       * Returns the binary content.</span>","<span class=\"c\">       * @return {string} the content as binary.</span>","<span class=\"c\">       */</span>","      asBinary <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> dataToString<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      <span class=\"c\">/**</span>","<span class=\"c\">       * Returns the content as a nodejs Buffer.</span>","<span class=\"c\">       * @return {Buffer} the content as a Buffer.</span>","<span class=\"c\">       */</span>","      asNodeBuffer <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","         <span class=\"k\">var</span> result <span class=\"k\">=</span> getBinaryData<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","         <span class=\"k\">return</span> JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>transformTo<span class=\"k\">(</span><span class=\"s\">\"nodebuffer\"</span><span class=\"k\">,</span> result<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      <span class=\"c\">/**</span>","<span class=\"c\">       * Returns the content as an Uint8Array.</span>","<span class=\"c\">       * @return {Uint8Array} the content as an Uint8Array.</span>","<span class=\"c\">       */</span>","      asUint8Array <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","         <span class=\"k\">var</span> result <span class=\"k\">=</span> getBinaryData<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","         <span class=\"k\">return</span> JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>transformTo<span class=\"k\">(</span><span class=\"s\">\"uint8array\"</span><span class=\"k\">,</span> result<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      <span class=\"c\">/**</span>","<span class=\"c\">       * Returns the content as an ArrayBuffer.</span>","<span class=\"c\">       * @return {ArrayBuffer} the content as an ArrayBufer.</span>","<span class=\"c\">       */</span>","      asArrayBuffer <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>asUint8Array<span class=\"k\">().</span>buffer<span class=\"k\">;</span>","      <span class=\"k\">}</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","   <span class=\"c\">/**</span>","<span class=\"c\">    * Transform an integer into a string in hexadecimal.</span>","<span class=\"c\">    * @private</span>","<span class=\"c\">    * @param {number} dec the number to convert.</span>","<span class=\"c\">    * @param {number} bytes the number of bytes to generate.</span>","<span class=\"c\">    * @returns {string} the result.</span>","<span class=\"c\">    */</span>","   <span class=\"k\">var</span> decToHex <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>dec<span class=\"k\">,</span> bytes<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> hex <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> i<span class=\"k\">;</span>","      <span class=\"k\">for</span><span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> bytes<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","         hex <span class=\"k\">+=</span> String<span class=\"k\">.</span>fromCharCode<span class=\"k\">(</span>dec<span class=\"k\">&amp;</span><span class=\"s\">0xff</span><span class=\"k\">);</span>","         dec<span class=\"k\">=</span>dec<span class=\"k\">&gt;&gt;&gt;</span><span class=\"s\">8</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> hex<span class=\"k\">;</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","   <span class=\"c\">/**</span>","<span class=\"c\">    * Merge the objects passed as parameters into a new one.</span>","<span class=\"c\">    * @private</span>","<span class=\"c\">    * @param {...Object} var_args All objects to merge.</span>","<span class=\"c\">    * @return {Object} a new object with the data of the others.</span>","<span class=\"c\">    */</span>","   <span class=\"k\">var</span> extend <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">,</span> i<span class=\"k\">,</span> attr<span class=\"k\">;</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> arguments<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span> <span class=\"c\">// arguments is not enumerable in some browsers</span>","         <span class=\"k\">for</span> <span class=\"k\">(</span>attr <span class=\"k\">in</span> arguments<span class=\"k\">[</span>i<span class=\"k\">])</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>arguments<span class=\"k\">[</span>i<span class=\"k\">].</span>hasOwnProperty<span class=\"k\">(</span>attr<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> result<span class=\"k\">[</span>attr<span class=\"k\">]</span> <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","               result<span class=\"k\">[</span>attr<span class=\"k\">]</span> <span class=\"k\">=</span> arguments<span class=\"k\">[</span>i<span class=\"k\">][</span>attr<span class=\"k\">];</span>","            <span class=\"k\">}</span>","         <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> result<span class=\"k\">;</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","   <span class=\"c\">/**</span>","<span class=\"c\">    * Transforms the (incomplete) options from the user into the complete</span>","<span class=\"c\">    * set of options to create a file.</span>","<span class=\"c\">    * @private</span>","<span class=\"c\">    * @param {Object} o the options from the user.</span>","<span class=\"c\">    * @return {Object} the complete set of options.</span>","<span class=\"c\">    */</span>","   <span class=\"k\">var</span> prepareFileAttrs <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>o<span class=\"k\">)</span> <span class=\"k\">{</span>","      o <span class=\"k\">=</span> o <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>o<span class=\"k\">.</span>base64 <span class=\"k\">===</span> <span class=\"k\">true</span> <span class=\"k\">&amp;&amp;</span> o<span class=\"k\">.</span>binary <span class=\"k\">==</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","         o<span class=\"k\">.</span>binary <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      o <span class=\"k\">=</span> extend<span class=\"k\">(</span>o<span class=\"k\">,</span> JSZip<span class=\"k\">.</span>defaults<span class=\"k\">);</span>","      o<span class=\"k\">.</span>date <span class=\"k\">=</span> o<span class=\"k\">.</span>date <span class=\"k\">||</span> <span class=\"k\">new</span> Date<span class=\"k\">();</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>o<span class=\"k\">.</span>compression <span class=\"k\">!==</span> <span class=\"k\">null</span><span class=\"k\">)</span> o<span class=\"k\">.</span>compression <span class=\"k\">=</span> o<span class=\"k\">.</span>compression<span class=\"k\">.</span>toUpperCase<span class=\"k\">();</span>","","      <span class=\"k\">return</span> o<span class=\"k\">;</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","   <span class=\"c\">/**</span>","<span class=\"c\">    * Add a file in the current folder.</span>","<span class=\"c\">    * @private</span>","<span class=\"c\">    * @param {string} name the name of the file</span>","<span class=\"c\">    * @param {String|ArrayBuffer|Uint8Array|Buffer} data the data of the file</span>","<span class=\"c\">    * @param {Object} o the options of the file</span>","<span class=\"c\">    * @return {Object} the new file.</span>","<span class=\"c\">    */</span>","   <span class=\"k\">var</span> fileAdd <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">,</span> data<span class=\"k\">,</span> o<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"c\">// be sure sub folders exist</span>","      <span class=\"k\">var</span> parent <span class=\"k\">=</span> parentFolder<span class=\"k\">(</span>name<span class=\"k\">),</span> dataType <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>getTypeOf<span class=\"k\">(</span>data<span class=\"k\">);</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>parent<span class=\"k\">)</span> <span class=\"k\">{</span>","         folderAdd<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> parent<span class=\"k\">);</span>","      <span class=\"k\">}</span>","","      o <span class=\"k\">=</span> prepareFileAttrs<span class=\"k\">(</span>o<span class=\"k\">);</span>","","      <span class=\"k\">if</span> <span class=\"k\">(</span>o<span class=\"k\">.</span>dir <span class=\"k\">||</span> data <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">||</span> <span class=\"k\">typeof</span> data <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","         o<span class=\"k\">.</span>base64 <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","         o<span class=\"k\">.</span>binary <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","         data <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>dataType <span class=\"k\">===</span> <span class=\"s\">\"string\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">if</span> <span class=\"k\">(</span>o<span class=\"k\">.</span>binary <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>o<span class=\"k\">.</span>base64<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// optimizedBinaryString == true means that the file has already been filtered with a 0xFF mask</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>o<span class=\"k\">.</span>optimizedBinaryString <span class=\"k\">!==</span> <span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">{</span>","               <span class=\"c\">// this is a string, not in a base64 format.</span>","               <span class=\"c\">// Be sure that this is a correct \"binary string\"</span>","               data <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>string2binary<span class=\"k\">(</span>data<span class=\"k\">);</span>","            <span class=\"k\">}</span>","         <span class=\"k\">}</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span> <span class=\"c\">// arraybuffer, uint8array, ...</span>","         o<span class=\"k\">.</span>base64 <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","         o<span class=\"k\">.</span>binary <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","         <span class=\"k\">if</span> <span class=\"k\">(!</span>dataType <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!(</span>data <span class=\"k\">instanceof</span> JSZip<span class=\"k\">.</span>CompressedObject<span class=\"k\">))</span> <span class=\"k\">{</span>","            <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"The data of '\"</span> <span class=\"k\">+</span> name <span class=\"k\">+</span> <span class=\"s\">\"' is in an unsupported format !\"</span><span class=\"k\">);</span>","         <span class=\"k\">}</span>","","         <span class=\"c\">// special case : it's way easier to work with Uint8Array than with ArrayBuffer</span>","         <span class=\"k\">if</span> <span class=\"k\">(</span>dataType <span class=\"k\">===</span> <span class=\"s\">\"arraybuffer\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            data <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>transformTo<span class=\"k\">(</span><span class=\"s\">\"uint8array\"</span><span class=\"k\">,</span> data<span class=\"k\">);</span>","         <span class=\"k\">}</span>","      <span class=\"k\">}</span>","","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>files<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">new</span> ZipObject<span class=\"k\">(</span>name<span class=\"k\">,</span> data<span class=\"k\">,</span> o<span class=\"k\">);</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","","   <span class=\"c\">/**</span>","<span class=\"c\">    * Find the parent folder of the path.</span>","<span class=\"c\">    * @private</span>","<span class=\"c\">    * @param {string} path the path to use</span>","<span class=\"c\">    * @return {string} the parent folder, or \"\"</span>","<span class=\"c\">    */</span>","   <span class=\"k\">var</span> parentFolder <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>path<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>path<span class=\"k\">.</span>slice<span class=\"k\">(-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">==</span> <span class=\"s\">'/'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","         path <span class=\"k\">=</span> path<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> path<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">var</span> lastSlash <span class=\"k\">=</span> path<span class=\"k\">.</span>lastIndexOf<span class=\"k\">(</span><span class=\"s\">'/'</span><span class=\"k\">);</span>","      <span class=\"k\">return</span> <span class=\"k\">(</span>lastSlash <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">?</span> path<span class=\"k\">.</span>substring<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> lastSlash<span class=\"k\">)</span> <span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","   <span class=\"c\">/**</span>","<span class=\"c\">    * Add a (sub) folder in the current folder.</span>","<span class=\"c\">    * @private</span>","<span class=\"c\">    * @param {string} name the folder's name</span>","<span class=\"c\">    * @return {Object} the new folder.</span>","<span class=\"c\">    */</span>","   <span class=\"k\">var</span> folderAdd <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"c\">// Check the name ends with a /</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>name<span class=\"k\">.</span>slice<span class=\"k\">(-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"s\">\"/\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","         name <span class=\"k\">+=</span> <span class=\"s\">\"/\"</span><span class=\"k\">;</span> <span class=\"c\">// IE doesn't like substr(-1)</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// Does this folder already exist?</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span><span class=\"k\">this</span><span class=\"k\">.</span>files<span class=\"k\">[</span>name<span class=\"k\">])</span> <span class=\"k\">{</span>","         fileAdd<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> name<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"k\">{</span>dir<span class=\"k\">:</span><span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>files<span class=\"k\">[</span>name<span class=\"k\">];</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","   <span class=\"c\">/**</span>","<span class=\"c\">    * Generate a JSZip.CompressedObject for a given zipOject.</span>","<span class=\"c\">    * @param {ZipObject} file the object to read.</span>","<span class=\"c\">    * @param {JSZip.compression} compression the compression to use.</span>","<span class=\"c\">    * @return {JSZip.CompressedObject} the compressed result.</span>","<span class=\"c\">    */</span>","   <span class=\"k\">var</span> generateCompressedObjectFrom <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>file<span class=\"k\">,</span> compression<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">new</span> JSZip<span class=\"k\">.</span>CompressedObject<span class=\"k\">(),</span> content<span class=\"k\">;</span>","","      <span class=\"c\">// the data has not been decompressed, we might reuse things !</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>file<span class=\"k\">.</span>_data <span class=\"k\">instanceof</span> JSZip<span class=\"k\">.</span>CompressedObject<span class=\"k\">)</span> <span class=\"k\">{</span>","         result<span class=\"k\">.</span>uncompressedSize <span class=\"k\">=</span> file<span class=\"k\">.</span>_data<span class=\"k\">.</span>uncompressedSize<span class=\"k\">;</span>","         result<span class=\"k\">.</span>crc32 <span class=\"k\">=</span> file<span class=\"k\">.</span>_data<span class=\"k\">.</span>crc32<span class=\"k\">;</span>","","         <span class=\"k\">if</span> <span class=\"k\">(</span>result<span class=\"k\">.</span>uncompressedSize <span class=\"k\">===</span> <span class=\"s\">0</span> <span class=\"k\">||</span> file<span class=\"k\">.</span>options<span class=\"k\">.</span>dir<span class=\"k\">)</span> <span class=\"k\">{</span>","            compression <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>compressions<span class=\"k\">[</span><span class=\"s\">'STORE'</span><span class=\"k\">];</span>","            result<span class=\"k\">.</span>compressedContent <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","            result<span class=\"k\">.</span>crc32 <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","         <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>file<span class=\"k\">.</span>_data<span class=\"k\">.</span>compressionMethod <span class=\"k\">===</span> compression<span class=\"k\">.</span>magic<span class=\"k\">)</span> <span class=\"k\">{</span>","            result<span class=\"k\">.</span>compressedContent <span class=\"k\">=</span> file<span class=\"k\">.</span>_data<span class=\"k\">.</span>getCompressedContent<span class=\"k\">();</span>","         <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            content <span class=\"k\">=</span> file<span class=\"k\">.</span>_data<span class=\"k\">.</span>getContent<span class=\"k\">()</span>","            <span class=\"c\">// need to decompress / recompress</span>","            result<span class=\"k\">.</span>compressedContent <span class=\"k\">=</span> compression<span class=\"k\">.</span>compress<span class=\"k\">(</span>JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>transformTo<span class=\"k\">(</span>compression<span class=\"k\">.</span>compressInputType<span class=\"k\">,</span> content<span class=\"k\">));</span>","         <span class=\"k\">}</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","         <span class=\"c\">// have uncompressed data</span>","         content <span class=\"k\">=</span> getBinaryData<span class=\"k\">(</span>file<span class=\"k\">);</span>","         <span class=\"k\">if</span> <span class=\"k\">(!</span>content <span class=\"k\">||</span> content<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">0</span> <span class=\"k\">||</span> file<span class=\"k\">.</span>options<span class=\"k\">.</span>dir<span class=\"k\">)</span> <span class=\"k\">{</span>","            compression <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>compressions<span class=\"k\">[</span><span class=\"s\">'STORE'</span><span class=\"k\">];</span>","            content <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","         <span class=\"k\">}</span>","         result<span class=\"k\">.</span>uncompressedSize <span class=\"k\">=</span> content<span class=\"k\">.</span>length<span class=\"k\">;</span>","         result<span class=\"k\">.</span>crc32 <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>crc32<span class=\"k\">(</span>content<span class=\"k\">);</span>","         result<span class=\"k\">.</span>compressedContent <span class=\"k\">=</span> compression<span class=\"k\">.</span>compress<span class=\"k\">(</span>JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>transformTo<span class=\"k\">(</span>compression<span class=\"k\">.</span>compressInputType<span class=\"k\">,</span> content<span class=\"k\">));</span>","      <span class=\"k\">}</span>","","      result<span class=\"k\">.</span>compressedSize <span class=\"k\">=</span> result<span class=\"k\">.</span>compressedContent<span class=\"k\">.</span>length<span class=\"k\">;</span>","      result<span class=\"k\">.</span>compressionMethod <span class=\"k\">=</span> compression<span class=\"k\">.</span>magic<span class=\"k\">;</span>","","      <span class=\"k\">return</span> result<span class=\"k\">;</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","   <span class=\"c\">/**</span>","<span class=\"c\">    * Generate the various parts used in the construction of the final zip file.</span>","<span class=\"c\">    * @param {string} name the file name.</span>","<span class=\"c\">    * @param {ZipObject} file the file content.</span>","<span class=\"c\">    * @param {JSZip.CompressedObject} compressedObject the compressed object.</span>","<span class=\"c\">    * @param {number} offset the current offset from the start of the zip file.</span>","<span class=\"c\">    * @return {object} the zip parts.</span>","<span class=\"c\">    */</span>","   <span class=\"k\">var</span> generateZipParts <span class=\"k\">=</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">,</span> file<span class=\"k\">,</span> compressedObject<span class=\"k\">,</span> offset<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> data <span class=\"k\">=</span> compressedObject<span class=\"k\">.</span>compressedContent<span class=\"k\">,</span>","          utfEncodedFileName <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>utf8encode<span class=\"k\">(</span>file<span class=\"k\">.</span>name<span class=\"k\">),</span>","          useUTF8 <span class=\"k\">=</span> utfEncodedFileName <span class=\"k\">!==</span> file<span class=\"k\">.</span>name<span class=\"k\">,</span>","          o       <span class=\"k\">=</span> file<span class=\"k\">.</span>options<span class=\"k\">,</span>","          dosTime<span class=\"k\">,</span>","          dosDate<span class=\"k\">;</span>","","      <span class=\"c\">// date</span>","      <span class=\"c\">// @see http://www.delorie.com/djgpp/doc/rbinter/it/52/13.html</span>","      <span class=\"c\">// @see http://www.delorie.com/djgpp/doc/rbinter/it/65/16.html</span>","      <span class=\"c\">// @see http://www.delorie.com/djgpp/doc/rbinter/it/66/16.html</span>","","      dosTime <span class=\"k\">=</span> o<span class=\"k\">.</span>date<span class=\"k\">.</span>getHours<span class=\"k\">();</span>","      dosTime <span class=\"k\">=</span> dosTime <span class=\"k\">&lt;&lt;</span> <span class=\"s\">6</span><span class=\"k\">;</span>","      dosTime <span class=\"k\">=</span> dosTime <span class=\"k\">|</span> o<span class=\"k\">.</span>date<span class=\"k\">.</span>getMinutes<span class=\"k\">();</span>","      dosTime <span class=\"k\">=</span> dosTime <span class=\"k\">&lt;&lt;</span> <span class=\"s\">5</span><span class=\"k\">;</span>","      dosTime <span class=\"k\">=</span> dosTime <span class=\"k\">|</span> o<span class=\"k\">.</span>date<span class=\"k\">.</span>getSeconds<span class=\"k\">()</span> <span class=\"k\">/</span> <span class=\"s\">2</span><span class=\"k\">;</span>","","      dosDate <span class=\"k\">=</span> o<span class=\"k\">.</span>date<span class=\"k\">.</span>getFullYear<span class=\"k\">()</span> <span class=\"k\">-</span> <span class=\"s\">1980</span><span class=\"k\">;</span>","      dosDate <span class=\"k\">=</span> dosDate <span class=\"k\">&lt;&lt;</span> <span class=\"s\">4</span><span class=\"k\">;</span>","      dosDate <span class=\"k\">=</span> dosDate <span class=\"k\">|</span> <span class=\"k\">(</span>o<span class=\"k\">.</span>date<span class=\"k\">.</span>getMonth<span class=\"k\">()</span> <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">);</span>","      dosDate <span class=\"k\">=</span> dosDate <span class=\"k\">&lt;&lt;</span> <span class=\"s\">5</span><span class=\"k\">;</span>","      dosDate <span class=\"k\">=</span> dosDate <span class=\"k\">|</span> o<span class=\"k\">.</span>date<span class=\"k\">.</span>getDate<span class=\"k\">();</span>","","","      <span class=\"k\">var</span> header <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","","      <span class=\"c\">// version needed to extract</span>","      header <span class=\"k\">+=</span> <span class=\"s\">\"</span><span class=\"t\">\\x</span><span class=\"s\">0A</span><span class=\"t\">\\x</span><span class=\"s\">00\"</span><span class=\"k\">;</span>","      <span class=\"c\">// general purpose bit flag</span>","      <span class=\"c\">// set bit 11 if utf8</span>","      header <span class=\"k\">+=</span> useUTF8 <span class=\"k\">?</span> <span class=\"s\">\"</span><span class=\"t\">\\x</span><span class=\"s\">00</span><span class=\"t\">\\x</span><span class=\"s\">08\"</span> <span class=\"k\">:</span> <span class=\"s\">\"</span><span class=\"t\">\\x</span><span class=\"s\">00</span><span class=\"t\">\\x</span><span class=\"s\">00\"</span><span class=\"k\">;</span>","      <span class=\"c\">// compression method</span>","      header <span class=\"k\">+=</span> compressedObject<span class=\"k\">.</span>compressionMethod<span class=\"k\">;</span>","      <span class=\"c\">// last mod file time</span>","      header <span class=\"k\">+=</span> decToHex<span class=\"k\">(</span>dosTime<span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">);</span>","      <span class=\"c\">// last mod file date</span>","      header <span class=\"k\">+=</span> decToHex<span class=\"k\">(</span>dosDate<span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">);</span>","      <span class=\"c\">// crc-32</span>","      header <span class=\"k\">+=</span> decToHex<span class=\"k\">(</span>compressedObject<span class=\"k\">.</span>crc32<span class=\"k\">,</span> <span class=\"s\">4</span><span class=\"k\">);</span>","      <span class=\"c\">// compressed size</span>","      header <span class=\"k\">+=</span> decToHex<span class=\"k\">(</span>compressedObject<span class=\"k\">.</span>compressedSize<span class=\"k\">,</span> <span class=\"s\">4</span><span class=\"k\">);</span>","      <span class=\"c\">// uncompressed size</span>","      header <span class=\"k\">+=</span> decToHex<span class=\"k\">(</span>compressedObject<span class=\"k\">.</span>uncompressedSize<span class=\"k\">,</span> <span class=\"s\">4</span><span class=\"k\">);</span>","      <span class=\"c\">// file name length</span>","      header <span class=\"k\">+=</span> decToHex<span class=\"k\">(</span>utfEncodedFileName<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">);</span>","      <span class=\"c\">// extra field length</span>","      header <span class=\"k\">+=</span> <span class=\"s\">\"</span><span class=\"t\">\\x</span><span class=\"s\">00</span><span class=\"t\">\\x</span><span class=\"s\">00\"</span><span class=\"k\">;</span>","","","      <span class=\"k\">var</span> fileRecord <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>signature<span class=\"k\">.</span>LOCAL_FILE_HEADER <span class=\"k\">+</span> header <span class=\"k\">+</span> utfEncodedFileName<span class=\"k\">;</span>","","      <span class=\"k\">var</span> dirRecord <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>signature<span class=\"k\">.</span>CENTRAL_FILE_HEADER <span class=\"k\">+</span>","      <span class=\"c\">// version made by (00: DOS)</span>","      <span class=\"s\">\"</span><span class=\"t\">\\x</span><span class=\"s\">14</span><span class=\"t\">\\x</span><span class=\"s\">00\"</span> <span class=\"k\">+</span>","      <span class=\"c\">// file header (common to file and central directory)</span>","      header <span class=\"k\">+</span>","      <span class=\"c\">// file comment length</span>","      <span class=\"s\">\"</span><span class=\"t\">\\x</span><span class=\"s\">00</span><span class=\"t\">\\x</span><span class=\"s\">00\"</span> <span class=\"k\">+</span>","      <span class=\"c\">// disk number start</span>","      <span class=\"s\">\"</span><span class=\"t\">\\x</span><span class=\"s\">00</span><span class=\"t\">\\x</span><span class=\"s\">00\"</span> <span class=\"k\">+</span>","      <span class=\"c\">// internal file attributes TODO</span>","      <span class=\"s\">\"</span><span class=\"t\">\\x</span><span class=\"s\">00</span><span class=\"t\">\\x</span><span class=\"s\">00\"</span> <span class=\"k\">+</span>","      <span class=\"c\">// external file attributes</span>","      <span class=\"k\">(</span>file<span class=\"k\">.</span>options<span class=\"k\">.</span>dir<span class=\"k\">===</span><span class=\"k\">true</span><span class=\"k\">?</span><span class=\"s\">\"</span><span class=\"t\">\\x</span><span class=\"s\">10</span><span class=\"t\">\\x</span><span class=\"s\">00</span><span class=\"t\">\\x</span><span class=\"s\">00</span><span class=\"t\">\\x</span><span class=\"s\">00\"</span><span class=\"k\">:</span><span class=\"s\">\"</span><span class=\"t\">\\x</span><span class=\"s\">00</span><span class=\"t\">\\x</span><span class=\"s\">00</span><span class=\"t\">\\x</span><span class=\"s\">00</span><span class=\"t\">\\x</span><span class=\"s\">00\"</span><span class=\"k\">)+</span>","      <span class=\"c\">// relative offset of local header</span>","      decToHex<span class=\"k\">(</span>offset<span class=\"k\">,</span> <span class=\"s\">4</span><span class=\"k\">)</span> <span class=\"k\">+</span>","      <span class=\"c\">// file name</span>","      utfEncodedFileName<span class=\"k\">;</span>","","","      <span class=\"k\">return</span> <span class=\"k\">{</span>","         fileRecord <span class=\"k\">:</span> fileRecord<span class=\"k\">,</span>","         dirRecord <span class=\"k\">:</span> dirRecord<span class=\"k\">,</span>","         compressedObject <span class=\"k\">:</span> compressedObject","      <span class=\"k\">}</span><span class=\"k\">;</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","   <span class=\"c\">/**</span>","<span class=\"c\">    * An object to write any content to a string.</span>","<span class=\"c\">    * @constructor</span>","<span class=\"c\">    */</span>","   <span class=\"k\">var</span> StringWriter <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>data <span class=\"k\">=</span> <span class=\"k\">[];</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","   StringWriter<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","      <span class=\"c\">/**</span>","<span class=\"c\">       * Append any content to the current string.</span>","<span class=\"c\">       * @param {Object} input the content to add.</span>","<span class=\"c\">       */</span>","      append <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","         input <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>transformTo<span class=\"k\">(</span><span class=\"s\">\"string\"</span><span class=\"k\">,</span> input<span class=\"k\">);</span>","         <span class=\"k\">this</span><span class=\"k\">.</span>data<span class=\"k\">.</span>push<span class=\"k\">(</span>input<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      <span class=\"c\">/**</span>","<span class=\"c\">       * Finalize the construction an return the result.</span>","<span class=\"c\">       * @return {string} the generated string.</span>","<span class=\"c\">       */</span>","      finalize <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>data<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\"\"</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","   <span class=\"c\">/**</span>","<span class=\"c\">    * An object to write any content to an Uint8Array.</span>","<span class=\"c\">    * @constructor</span>","<span class=\"c\">    * @param {number} length The length of the array.</span>","<span class=\"c\">    */</span>","   <span class=\"k\">var</span> Uint8ArrayWriter <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>data <span class=\"k\">=</span> <span class=\"k\">new</span> Uint8Array<span class=\"k\">(</span>length<span class=\"k\">);</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>index <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","   Uint8ArrayWriter<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","      <span class=\"c\">/**</span>","<span class=\"c\">       * Append any content to the current array.</span>","<span class=\"c\">       * @param {Object} input the content to add.</span>","<span class=\"c\">       */</span>","      append <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">if</span> <span class=\"k\">(</span>input<span class=\"k\">.</span>length <span class=\"k\">!==</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// with an empty Uint8Array, Opera fails with a \"Offset larger than array size\"</span>","            input <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>transformTo<span class=\"k\">(</span><span class=\"s\">\"uint8array\"</span><span class=\"k\">,</span> input<span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>data<span class=\"k\">.</span>set<span class=\"k\">(</span>input<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>index<span class=\"k\">);</span>","            <span class=\"k\">this</span><span class=\"k\">.</span>index <span class=\"k\">+=</span> input<span class=\"k\">.</span>length<span class=\"k\">;</span>","         <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      <span class=\"c\">/**</span>","<span class=\"c\">       * Finalize the construction an return the result.</span>","<span class=\"c\">       * @return {Uint8Array} the generated array.</span>","<span class=\"c\">       */</span>","      finalize <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>data<span class=\"k\">;</span>","      <span class=\"k\">}</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","   <span class=\"c\">// return the actual prototype of JSZip</span>","   <span class=\"k\">return</span> <span class=\"k\">{</span>","      <span class=\"c\">/**</span>","<span class=\"c\">       * Read an existing zip and merge the data in the current JSZip object.</span>","<span class=\"c\">       * The implementation is in jszip-load.js, don't forget to include it.</span>","<span class=\"c\">       * @param {String|ArrayBuffer|Uint8Array|Buffer} stream  The stream to load</span>","<span class=\"c\">       * @param {Object} options Options for loading the stream.</span>","<span class=\"c\">       *  options.base64 : is the stream in base64 ? default : false</span>","<span class=\"c\">       * @return {JSZip} the current JSZip object</span>","<span class=\"c\">       */</span>","      load <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>stream<span class=\"k\">,</span> options<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"Load method is not defined. Is the file jszip-load.js included ?\"</span><span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * Filter nested files/folders with the specified function.</span>","<span class=\"c\">       * @param {Function} search the predicate to use :</span>","<span class=\"c\">       * function (relativePath, file) {...}</span>","<span class=\"c\">       * It takes 2 arguments : the relative path and the file.</span>","<span class=\"c\">       * @return {Array} An array of matching elements.</span>","<span class=\"c\">       */</span>","      filter <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>search<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">[],</span> filename<span class=\"k\">,</span> relativePath<span class=\"k\">,</span> file<span class=\"k\">,</span> fileClone<span class=\"k\">;</span>","         <span class=\"k\">for</span> <span class=\"k\">(</span>filename <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>files<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>files<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">(</span>filename<span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","            file <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>files<span class=\"k\">[</span>filename<span class=\"k\">];</span>","            <span class=\"c\">// return a new object, don't let the user mess with our internal objects :)</span>","            fileClone <span class=\"k\">=</span> <span class=\"k\">new</span> ZipObject<span class=\"k\">(</span>file<span class=\"k\">.</span>name<span class=\"k\">,</span> file<span class=\"k\">.</span>_data<span class=\"k\">,</span> extend<span class=\"k\">(</span>file<span class=\"k\">.</span>options<span class=\"k\">));</span>","            relativePath <span class=\"k\">=</span> filename<span class=\"k\">.</span>slice<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>root<span class=\"k\">.</span>length<span class=\"k\">,</span> filename<span class=\"k\">.</span>length<span class=\"k\">);</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>filename<span class=\"k\">.</span>slice<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>root<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">this</span><span class=\"k\">.</span>root <span class=\"k\">&amp;&amp;</span> <span class=\"c\">// the file is in the current root</span>","                search<span class=\"k\">(</span>relativePath<span class=\"k\">,</span> fileClone<span class=\"k\">))</span> <span class=\"k\">{</span> <span class=\"c\">// and the file matches the function</span>","               result<span class=\"k\">.</span>push<span class=\"k\">(</span>fileClone<span class=\"k\">);</span>","            <span class=\"k\">}</span>","         <span class=\"k\">}</span>","         <span class=\"k\">return</span> result<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * Add a file to the zip file, or search a file.</span>","<span class=\"c\">       * @param   {string|RegExp} name The name of the file to add (if data is defined),</span>","<span class=\"c\">       * the name of the file to find (if no data) or a regex to match files.</span>","<span class=\"c\">       * @param   {String|ArrayBuffer|Uint8Array|Buffer} data  The file data, either raw or base64 encoded</span>","<span class=\"c\">       * @param   {Object} o     File options</span>","<span class=\"c\">       * @return  {JSZip|Object|Array} this JSZip object (when adding a file),</span>","<span class=\"c\">       * a file (when searching by string) or an array of files (when searching by regex).</span>","<span class=\"c\">       */</span>","      file <span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">,</span> data<span class=\"k\">,</span> o<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">if</span> <span class=\"k\">(</span>arguments<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>name <span class=\"k\">instanceof</span> RegExp<span class=\"k\">)</span> <span class=\"k\">{</span>","               <span class=\"k\">var</span> regexp <span class=\"k\">=</span> name<span class=\"k\">;</span>","               <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>filter<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>relativePath<span class=\"k\">,</span> file<span class=\"k\">)</span> <span class=\"k\">{</span>","                  <span class=\"k\">return</span> <span class=\"k\">!</span>file<span class=\"k\">.</span>options<span class=\"k\">.</span>dir <span class=\"k\">&amp;&amp;</span> regexp<span class=\"k\">.</span>test<span class=\"k\">(</span>relativePath<span class=\"k\">);</span>","               <span class=\"k\">}</span><span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span> <span class=\"c\">// text</span>","               <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>filter<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>relativePath<span class=\"k\">,</span> file<span class=\"k\">)</span> <span class=\"k\">{</span>","                  <span class=\"k\">return</span> <span class=\"k\">!</span>file<span class=\"k\">.</span>options<span class=\"k\">.</span>dir <span class=\"k\">&amp;&amp;</span> relativePath <span class=\"k\">===</span> name<span class=\"k\">;</span>","               <span class=\"k\">}</span><span class=\"k\">)[</span><span class=\"s\">0</span><span class=\"k\">]||</span><span class=\"k\">null</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","         <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span> <span class=\"c\">// more than one argument : we have data !</span>","            name <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>root<span class=\"k\">+</span>name<span class=\"k\">;</span>","            fileAdd<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> name<span class=\"k\">,</span> data<span class=\"k\">,</span> o<span class=\"k\">);</span>","         <span class=\"k\">}</span>","         <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * Add a directory to the zip file, or search.</span>","<span class=\"c\">       * @param   {String|RegExp} arg The name of the directory to add, or a regex to search folders.</span>","<span class=\"c\">       * @return  {JSZip} an object with the new directory as the root, or an array containing matching folders.</span>","<span class=\"c\">       */</span>","      folder <span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>arg<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">if</span> <span class=\"k\">(!</span>arg<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","         <span class=\"k\">}</span>","","         <span class=\"k\">if</span> <span class=\"k\">(</span>arg <span class=\"k\">instanceof</span> RegExp<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>filter<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>relativePath<span class=\"k\">,</span> file<span class=\"k\">)</span> <span class=\"k\">{</span>","               <span class=\"k\">return</span> file<span class=\"k\">.</span>options<span class=\"k\">.</span>dir <span class=\"k\">&amp;&amp;</span> arg<span class=\"k\">.</span>test<span class=\"k\">(</span>relativePath<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">);</span>","         <span class=\"k\">}</span>","","         <span class=\"c\">// else, name is a new folder</span>","         <span class=\"k\">var</span> name <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>root <span class=\"k\">+</span> arg<span class=\"k\">;</span>","         <span class=\"k\">var</span> newFolder <span class=\"k\">=</span> folderAdd<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> name<span class=\"k\">);</span>","","         <span class=\"c\">// Allow chaining by returning a new object with this folder as the root</span>","         <span class=\"k\">var</span> ret <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>clone<span class=\"k\">();</span>","         ret<span class=\"k\">.</span>root <span class=\"k\">=</span> newFolder<span class=\"k\">.</span>name<span class=\"k\">;</span>","         <span class=\"k\">return</span> ret<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * Delete a file, or a directory and all sub-files, from the zip</span>","<span class=\"c\">       * @param {string} name the name of the file to delete</span>","<span class=\"c\">       * @return {JSZip} this JSZip object</span>","<span class=\"c\">       */</span>","      remove <span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","         name <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>root <span class=\"k\">+</span> name<span class=\"k\">;</span>","         <span class=\"k\">var</span> file <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>files<span class=\"k\">[</span>name<span class=\"k\">];</span>","         <span class=\"k\">if</span> <span class=\"k\">(!</span>file<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"c\">// Look for any folders</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>name<span class=\"k\">.</span>slice<span class=\"k\">(-</span><span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">!=</span> <span class=\"s\">\"/\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","               name <span class=\"k\">+=</span> <span class=\"s\">\"/\"</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","            file <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>files<span class=\"k\">[</span>name<span class=\"k\">];</span>","         <span class=\"k\">}</span>","","         <span class=\"k\">if</span> <span class=\"k\">(</span>file<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>file<span class=\"k\">.</span>options<span class=\"k\">.</span>dir<span class=\"k\">)</span> <span class=\"k\">{</span>","               <span class=\"c\">// file</span>","               <span class=\"k\">delete</span> <span class=\"k\">this</span><span class=\"k\">.</span>files<span class=\"k\">[</span>name<span class=\"k\">];</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","               <span class=\"c\">// folder</span>","               <span class=\"k\">var</span> kids <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>filter<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>relativePath<span class=\"k\">,</span> file<span class=\"k\">)</span> <span class=\"k\">{</span>","                  <span class=\"k\">return</span> file<span class=\"k\">.</span>name<span class=\"k\">.</span>slice<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> name<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">===</span> name<span class=\"k\">;</span>","               <span class=\"k\">}</span><span class=\"k\">);</span>","               <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> kids<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                  <span class=\"k\">delete</span> <span class=\"k\">this</span><span class=\"k\">.</span>files<span class=\"k\">[</span>kids<span class=\"k\">[</span>i<span class=\"k\">].</span>name<span class=\"k\">];</span>","               <span class=\"k\">}</span>","            <span class=\"k\">}</span>","         <span class=\"k\">}</span>","","         <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * Generate the complete zip file</span>","<span class=\"c\">       * @param {Object} options the options to generate the zip file :</span>","<span class=\"c\">       * - base64, (deprecated, use type instead) true to generate base64.</span>","<span class=\"c\">       * - compression, \"STORE\" by default.</span>","<span class=\"c\">       * - type, \"base64\" by default. Values are : string, base64, uint8array, arraybuffer, blob.</span>","<span class=\"c\">       * @return {String|Uint8Array|ArrayBuffer|Buffer|Blob} the zip file</span>","<span class=\"c\">       */</span>","      generate <span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>options<span class=\"k\">)</span> <span class=\"k\">{</span>","         options <span class=\"k\">=</span> extend<span class=\"k\">(</span>options <span class=\"k\">||</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","            base64 <span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>","            compression <span class=\"k\">:</span> <span class=\"s\">\"STORE\"</span><span class=\"k\">,</span>","            type <span class=\"k\">:</span> <span class=\"s\">\"base64\"</span>","         <span class=\"k\">}</span><span class=\"k\">);</span>","","         JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>checkSupport<span class=\"k\">(</span>options<span class=\"k\">.</span>type<span class=\"k\">);</span>","","         <span class=\"k\">var</span> zipData <span class=\"k\">=</span> <span class=\"k\">[],</span> localDirLength <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> centralDirLength <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> writer<span class=\"k\">,</span> i<span class=\"k\">;</span>","","","         <span class=\"c\">// first, generate all the zip parts.</span>","         <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> name <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>files<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>files<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">continue</span><span class=\"k\">;</span> <span class=\"k\">}</span>","            <span class=\"k\">var</span> file <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>files<span class=\"k\">[</span>name<span class=\"k\">];</span>","","            <span class=\"k\">var</span> compressionName <span class=\"k\">=</span> file<span class=\"k\">.</span>compression <span class=\"k\">||</span> options<span class=\"k\">.</span>compression<span class=\"k\">.</span>toUpperCase<span class=\"k\">();</span>","            <span class=\"k\">var</span> compression <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>compressions<span class=\"k\">[</span>compressionName<span class=\"k\">];</span>","            <span class=\"k\">if</span> <span class=\"k\">(!</span>compression<span class=\"k\">)</span> <span class=\"k\">{</span>","               <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span>compressionName <span class=\"k\">+</span> <span class=\"s\">\" is not a valid compression method !\"</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","","            <span class=\"k\">var</span> compressedObject <span class=\"k\">=</span> generateCompressedObjectFrom<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> file<span class=\"k\">,</span> compression<span class=\"k\">);</span>","","            <span class=\"k\">var</span> zipPart <span class=\"k\">=</span> generateZipParts<span class=\"k\">.</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> name<span class=\"k\">,</span> file<span class=\"k\">,</span> compressedObject<span class=\"k\">,</span> localDirLength<span class=\"k\">);</span>","            localDirLength <span class=\"k\">+=</span> zipPart<span class=\"k\">.</span>fileRecord<span class=\"k\">.</span>length <span class=\"k\">+</span> compressedObject<span class=\"k\">.</span>compressedSize<span class=\"k\">;</span>","            centralDirLength <span class=\"k\">+=</span> zipPart<span class=\"k\">.</span>dirRecord<span class=\"k\">.</span>length<span class=\"k\">;</span>","            zipData<span class=\"k\">.</span>push<span class=\"k\">(</span>zipPart<span class=\"k\">);</span>","         <span class=\"k\">}</span>","","         <span class=\"k\">var</span> dirEnd <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","","         <span class=\"c\">// end of central dir signature</span>","         dirEnd <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>signature<span class=\"k\">.</span>CENTRAL_DIRECTORY_END <span class=\"k\">+</span>","         <span class=\"c\">// number of this disk</span>","         <span class=\"s\">\"</span><span class=\"t\">\\x</span><span class=\"s\">00</span><span class=\"t\">\\x</span><span class=\"s\">00\"</span> <span class=\"k\">+</span>","         <span class=\"c\">// number of the disk with the start of the central directory</span>","         <span class=\"s\">\"</span><span class=\"t\">\\x</span><span class=\"s\">00</span><span class=\"t\">\\x</span><span class=\"s\">00\"</span> <span class=\"k\">+</span>","         <span class=\"c\">// total number of entries in the central directory on this disk</span>","         decToHex<span class=\"k\">(</span>zipData<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">+</span>","         <span class=\"c\">// total number of entries in the central directory</span>","         decToHex<span class=\"k\">(</span>zipData<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">+</span>","         <span class=\"c\">// size of the central directory   4 bytes</span>","         decToHex<span class=\"k\">(</span>centralDirLength<span class=\"k\">,</span> <span class=\"s\">4</span><span class=\"k\">)</span> <span class=\"k\">+</span>","         <span class=\"c\">// offset of start of central directory with respect to the starting disk number</span>","         decToHex<span class=\"k\">(</span>localDirLength<span class=\"k\">,</span> <span class=\"s\">4</span><span class=\"k\">)</span> <span class=\"k\">+</span>","         <span class=\"c\">// .ZIP file comment length</span>","         <span class=\"s\">\"</span><span class=\"t\">\\x</span><span class=\"s\">00</span><span class=\"t\">\\x</span><span class=\"s\">00\"</span><span class=\"k\">;</span>","","","         <span class=\"c\">// we have all the parts (and the total length)</span>","         <span class=\"c\">// time to create a writer !</span>","         <span class=\"k\">switch</span><span class=\"k\">(</span>options<span class=\"k\">.</span>type<span class=\"k\">.</span>toLowerCase<span class=\"k\">())</span> <span class=\"k\">{</span>","            <span class=\"k\">case</span> <span class=\"s\">\"uint8array\"</span> <span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"arraybuffer\"</span> <span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"blob\"</span> <span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"nodebuffer\"</span> <span class=\"k\">:</span>","               writer <span class=\"k\">=</span> <span class=\"k\">new</span> Uint8ArrayWriter<span class=\"k\">(</span>localDirLength <span class=\"k\">+</span> centralDirLength <span class=\"k\">+</span> dirEnd<span class=\"k\">.</span>length<span class=\"k\">);</span>","               <span class=\"k\">break</span><span class=\"k\">;</span>","            <span class=\"k\">case</span> <span class=\"s\">\"base64\"</span> <span class=\"k\">:</span>","            <span class=\"k\">default</span> <span class=\"k\">:</span> <span class=\"c\">// case \"string\" :</span>","               writer <span class=\"k\">=</span> <span class=\"k\">new</span> StringWriter<span class=\"k\">(</span>localDirLength <span class=\"k\">+</span> centralDirLength <span class=\"k\">+</span> dirEnd<span class=\"k\">.</span>length<span class=\"k\">);</span>","               <span class=\"k\">break</span><span class=\"k\">;</span>","         <span class=\"k\">}</span>","","         <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> zipData<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","            writer<span class=\"k\">.</span>append<span class=\"k\">(</span>zipData<span class=\"k\">[</span>i<span class=\"k\">].</span>fileRecord<span class=\"k\">);</span>","            writer<span class=\"k\">.</span>append<span class=\"k\">(</span>zipData<span class=\"k\">[</span>i<span class=\"k\">].</span>compressedObject<span class=\"k\">.</span>compressedContent<span class=\"k\">);</span>","         <span class=\"k\">}</span>","         <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> zipData<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","            writer<span class=\"k\">.</span>append<span class=\"k\">(</span>zipData<span class=\"k\">[</span>i<span class=\"k\">].</span>dirRecord<span class=\"k\">);</span>","         <span class=\"k\">}</span>","","         writer<span class=\"k\">.</span>append<span class=\"k\">(</span>dirEnd<span class=\"k\">);</span>","","         <span class=\"k\">var</span> zip <span class=\"k\">=</span> writer<span class=\"k\">.</span>finalize<span class=\"k\">();</span>","","","","         <span class=\"k\">switch</span><span class=\"k\">(</span>options<span class=\"k\">.</span>type<span class=\"k\">.</span>toLowerCase<span class=\"k\">())</span> <span class=\"k\">{</span>","            <span class=\"c\">// case \"zip is an Uint8Array\"</span>","            <span class=\"k\">case</span> <span class=\"s\">\"uint8array\"</span> <span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"arraybuffer\"</span> <span class=\"k\">:</span>","            <span class=\"k\">case</span> <span class=\"s\">\"nodebuffer\"</span> <span class=\"k\">:</span>","               <span class=\"k\">return</span> JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>transformTo<span class=\"k\">(</span>options<span class=\"k\">.</span>type<span class=\"k\">.</span>toLowerCase<span class=\"k\">(),</span> zip<span class=\"k\">);</span>","            <span class=\"k\">case</span> <span class=\"s\">\"blob\"</span> <span class=\"k\">:</span>","               <span class=\"k\">return</span> JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>arrayBuffer2Blob<span class=\"k\">(</span>JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>transformTo<span class=\"k\">(</span><span class=\"s\">\"arraybuffer\"</span><span class=\"k\">,</span> zip<span class=\"k\">));</span>","","            <span class=\"c\">// case \"zip is a string\"</span>","            <span class=\"k\">case</span> <span class=\"s\">\"base64\"</span> <span class=\"k\">:</span>","               <span class=\"k\">return</span> <span class=\"k\">(</span>options<span class=\"k\">.</span>base64<span class=\"k\">)</span> <span class=\"k\">?</span> JSZip<span class=\"k\">.</span>base64<span class=\"k\">.</span>encode<span class=\"k\">(</span>zip<span class=\"k\">)</span> <span class=\"k\">:</span> zip<span class=\"k\">;</span>","            <span class=\"k\">default</span> <span class=\"k\">:</span> <span class=\"c\">// case \"string\" :</span>","               <span class=\"k\">return</span> zip<span class=\"k\">;</span>","         <span class=\"k\">}</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       *</span>","<span class=\"c\">       *  Javascript crc32</span>","<span class=\"c\">       *  http://www.webtoolkit.info/</span>","<span class=\"c\">       *</span>","<span class=\"c\">       */</span>","      crc32 <span class=\"k\">:</span> <span class=\"k\">function</span> crc32<span class=\"k\">(</span>input<span class=\"k\">,</span> crc<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> input <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">||</span> <span class=\"k\">!</span>input<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">0</span><span class=\"k\">;</span>","         <span class=\"k\">}</span>","","         <span class=\"k\">var</span> isArray <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>getTypeOf<span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"s\">\"string\"</span><span class=\"k\">;</span>","","         <span class=\"k\">var</span> table <span class=\"k\">=</span> <span class=\"k\">[</span>","            <span class=\"s\">0x00000000</span><span class=\"k\">,</span> <span class=\"s\">0x77073096</span><span class=\"k\">,</span> <span class=\"s\">0xEE0E612C</span><span class=\"k\">,</span> <span class=\"s\">0x990951BA</span><span class=\"k\">,</span>","            <span class=\"s\">0x076DC419</span><span class=\"k\">,</span> <span class=\"s\">0x706AF48F</span><span class=\"k\">,</span> <span class=\"s\">0xE963A535</span><span class=\"k\">,</span> <span class=\"s\">0x9E6495A3</span><span class=\"k\">,</span>","            <span class=\"s\">0x0EDB8832</span><span class=\"k\">,</span> <span class=\"s\">0x79DCB8A4</span><span class=\"k\">,</span> <span class=\"s\">0xE0D5E91E</span><span class=\"k\">,</span> <span class=\"s\">0x97D2D988</span><span class=\"k\">,</span>","            <span class=\"s\">0x09B64C2B</span><span class=\"k\">,</span> <span class=\"s\">0x7EB17CBD</span><span class=\"k\">,</span> <span class=\"s\">0xE7B82D07</span><span class=\"k\">,</span> <span class=\"s\">0x90BF1D91</span><span class=\"k\">,</span>","            <span class=\"s\">0x1DB71064</span><span class=\"k\">,</span> <span class=\"s\">0x6AB020F2</span><span class=\"k\">,</span> <span class=\"s\">0xF3B97148</span><span class=\"k\">,</span> <span class=\"s\">0x84BE41DE</span><span class=\"k\">,</span>","            <span class=\"s\">0x1ADAD47D</span><span class=\"k\">,</span> <span class=\"s\">0x6DDDE4EB</span><span class=\"k\">,</span> <span class=\"s\">0xF4D4B551</span><span class=\"k\">,</span> <span class=\"s\">0x83D385C7</span><span class=\"k\">,</span>","            <span class=\"s\">0x136C9856</span><span class=\"k\">,</span> <span class=\"s\">0x646BA8C0</span><span class=\"k\">,</span> <span class=\"s\">0xFD62F97A</span><span class=\"k\">,</span> <span class=\"s\">0x8A65C9EC</span><span class=\"k\">,</span>","            <span class=\"s\">0x14015C4F</span><span class=\"k\">,</span> <span class=\"s\">0x63066CD9</span><span class=\"k\">,</span> <span class=\"s\">0xFA0F3D63</span><span class=\"k\">,</span> <span class=\"s\">0x8D080DF5</span><span class=\"k\">,</span>","            <span class=\"s\">0x3B6E20C8</span><span class=\"k\">,</span> <span class=\"s\">0x4C69105E</span><span class=\"k\">,</span> <span class=\"s\">0xD56041E4</span><span class=\"k\">,</span> <span class=\"s\">0xA2677172</span><span class=\"k\">,</span>","            <span class=\"s\">0x3C03E4D1</span><span class=\"k\">,</span> <span class=\"s\">0x4B04D447</span><span class=\"k\">,</span> <span class=\"s\">0xD20D85FD</span><span class=\"k\">,</span> <span class=\"s\">0xA50AB56B</span><span class=\"k\">,</span>","            <span class=\"s\">0x35B5A8FA</span><span class=\"k\">,</span> <span class=\"s\">0x42B2986C</span><span class=\"k\">,</span> <span class=\"s\">0xDBBBC9D6</span><span class=\"k\">,</span> <span class=\"s\">0xACBCF940</span><span class=\"k\">,</span>","            <span class=\"s\">0x32D86CE3</span><span class=\"k\">,</span> <span class=\"s\">0x45DF5C75</span><span class=\"k\">,</span> <span class=\"s\">0xDCD60DCF</span><span class=\"k\">,</span> <span class=\"s\">0xABD13D59</span><span class=\"k\">,</span>","            <span class=\"s\">0x26D930AC</span><span class=\"k\">,</span> <span class=\"s\">0x51DE003A</span><span class=\"k\">,</span> <span class=\"s\">0xC8D75180</span><span class=\"k\">,</span> <span class=\"s\">0xBFD06116</span><span class=\"k\">,</span>","            <span class=\"s\">0x21B4F4B5</span><span class=\"k\">,</span> <span class=\"s\">0x56B3C423</span><span class=\"k\">,</span> <span class=\"s\">0xCFBA9599</span><span class=\"k\">,</span> <span class=\"s\">0xB8BDA50F</span><span class=\"k\">,</span>","            <span class=\"s\">0x2802B89E</span><span class=\"k\">,</span> <span class=\"s\">0x5F058808</span><span class=\"k\">,</span> <span class=\"s\">0xC60CD9B2</span><span class=\"k\">,</span> <span class=\"s\">0xB10BE924</span><span class=\"k\">,</span>","            <span class=\"s\">0x2F6F7C87</span><span class=\"k\">,</span> <span class=\"s\">0x58684C11</span><span class=\"k\">,</span> <span class=\"s\">0xC1611DAB</span><span class=\"k\">,</span> <span class=\"s\">0xB6662D3D</span><span class=\"k\">,</span>","            <span class=\"s\">0x76DC4190</span><span class=\"k\">,</span> <span class=\"s\">0x01DB7106</span><span class=\"k\">,</span> <span class=\"s\">0x98D220BC</span><span class=\"k\">,</span> <span class=\"s\">0xEFD5102A</span><span class=\"k\">,</span>","            <span class=\"s\">0x71B18589</span><span class=\"k\">,</span> <span class=\"s\">0x06B6B51F</span><span class=\"k\">,</span> <span class=\"s\">0x9FBFE4A5</span><span class=\"k\">,</span> <span class=\"s\">0xE8B8D433</span><span class=\"k\">,</span>","            <span class=\"s\">0x7807C9A2</span><span class=\"k\">,</span> <span class=\"s\">0x0F00F934</span><span class=\"k\">,</span> <span class=\"s\">0x9609A88E</span><span class=\"k\">,</span> <span class=\"s\">0xE10E9818</span><span class=\"k\">,</span>","            <span class=\"s\">0x7F6A0DBB</span><span class=\"k\">,</span> <span class=\"s\">0x086D3D2D</span><span class=\"k\">,</span> <span class=\"s\">0x91646C97</span><span class=\"k\">,</span> <span class=\"s\">0xE6635C01</span><span class=\"k\">,</span>","            <span class=\"s\">0x6B6B51F4</span><span class=\"k\">,</span> <span class=\"s\">0x1C6C6162</span><span class=\"k\">,</span> <span class=\"s\">0x856530D8</span><span class=\"k\">,</span> <span class=\"s\">0xF262004E</span><span class=\"k\">,</span>","            <span class=\"s\">0x6C0695ED</span><span class=\"k\">,</span> <span class=\"s\">0x1B01A57B</span><span class=\"k\">,</span> <span class=\"s\">0x8208F4C1</span><span class=\"k\">,</span> <span class=\"s\">0xF50FC457</span><span class=\"k\">,</span>","            <span class=\"s\">0x65B0D9C6</span><span class=\"k\">,</span> <span class=\"s\">0x12B7E950</span><span class=\"k\">,</span> <span class=\"s\">0x8BBEB8EA</span><span class=\"k\">,</span> <span class=\"s\">0xFCB9887C</span><span class=\"k\">,</span>","            <span class=\"s\">0x62DD1DDF</span><span class=\"k\">,</span> <span class=\"s\">0x15DA2D49</span><span class=\"k\">,</span> <span class=\"s\">0x8CD37CF3</span><span class=\"k\">,</span> <span class=\"s\">0xFBD44C65</span><span class=\"k\">,</span>","            <span class=\"s\">0x4DB26158</span><span class=\"k\">,</span> <span class=\"s\">0x3AB551CE</span><span class=\"k\">,</span> <span class=\"s\">0xA3BC0074</span><span class=\"k\">,</span> <span class=\"s\">0xD4BB30E2</span><span class=\"k\">,</span>","            <span class=\"s\">0x4ADFA541</span><span class=\"k\">,</span> <span class=\"s\">0x3DD895D7</span><span class=\"k\">,</span> <span class=\"s\">0xA4D1C46D</span><span class=\"k\">,</span> <span class=\"s\">0xD3D6F4FB</span><span class=\"k\">,</span>","            <span class=\"s\">0x4369E96A</span><span class=\"k\">,</span> <span class=\"s\">0x346ED9FC</span><span class=\"k\">,</span> <span class=\"s\">0xAD678846</span><span class=\"k\">,</span> <span class=\"s\">0xDA60B8D0</span><span class=\"k\">,</span>","            <span class=\"s\">0x44042D73</span><span class=\"k\">,</span> <span class=\"s\">0x33031DE5</span><span class=\"k\">,</span> <span class=\"s\">0xAA0A4C5F</span><span class=\"k\">,</span> <span class=\"s\">0xDD0D7CC9</span><span class=\"k\">,</span>","            <span class=\"s\">0x5005713C</span><span class=\"k\">,</span> <span class=\"s\">0x270241AA</span><span class=\"k\">,</span> <span class=\"s\">0xBE0B1010</span><span class=\"k\">,</span> <span class=\"s\">0xC90C2086</span><span class=\"k\">,</span>","            <span class=\"s\">0x5768B525</span><span class=\"k\">,</span> <span class=\"s\">0x206F85B3</span><span class=\"k\">,</span> <span class=\"s\">0xB966D409</span><span class=\"k\">,</span> <span class=\"s\">0xCE61E49F</span><span class=\"k\">,</span>","            <span class=\"s\">0x5EDEF90E</span><span class=\"k\">,</span> <span class=\"s\">0x29D9C998</span><span class=\"k\">,</span> <span class=\"s\">0xB0D09822</span><span class=\"k\">,</span> <span class=\"s\">0xC7D7A8B4</span><span class=\"k\">,</span>","            <span class=\"s\">0x59B33D17</span><span class=\"k\">,</span> <span class=\"s\">0x2EB40D81</span><span class=\"k\">,</span> <span class=\"s\">0xB7BD5C3B</span><span class=\"k\">,</span> <span class=\"s\">0xC0BA6CAD</span><span class=\"k\">,</span>","            <span class=\"s\">0xEDB88320</span><span class=\"k\">,</span> <span class=\"s\">0x9ABFB3B6</span><span class=\"k\">,</span> <span class=\"s\">0x03B6E20C</span><span class=\"k\">,</span> <span class=\"s\">0x74B1D29A</span><span class=\"k\">,</span>","            <span class=\"s\">0xEAD54739</span><span class=\"k\">,</span> <span class=\"s\">0x9DD277AF</span><span class=\"k\">,</span> <span class=\"s\">0x04DB2615</span><span class=\"k\">,</span> <span class=\"s\">0x73DC1683</span><span class=\"k\">,</span>","            <span class=\"s\">0xE3630B12</span><span class=\"k\">,</span> <span class=\"s\">0x94643B84</span><span class=\"k\">,</span> <span class=\"s\">0x0D6D6A3E</span><span class=\"k\">,</span> <span class=\"s\">0x7A6A5AA8</span><span class=\"k\">,</span>","            <span class=\"s\">0xE40ECF0B</span><span class=\"k\">,</span> <span class=\"s\">0x9309FF9D</span><span class=\"k\">,</span> <span class=\"s\">0x0A00AE27</span><span class=\"k\">,</span> <span class=\"s\">0x7D079EB1</span><span class=\"k\">,</span>","            <span class=\"s\">0xF00F9344</span><span class=\"k\">,</span> <span class=\"s\">0x8708A3D2</span><span class=\"k\">,</span> <span class=\"s\">0x1E01F268</span><span class=\"k\">,</span> <span class=\"s\">0x6906C2FE</span><span class=\"k\">,</span>","            <span class=\"s\">0xF762575D</span><span class=\"k\">,</span> <span class=\"s\">0x806567CB</span><span class=\"k\">,</span> <span class=\"s\">0x196C3671</span><span class=\"k\">,</span> <span class=\"s\">0x6E6B06E7</span><span class=\"k\">,</span>","            <span class=\"s\">0xFED41B76</span><span class=\"k\">,</span> <span class=\"s\">0x89D32BE0</span><span class=\"k\">,</span> <span class=\"s\">0x10DA7A5A</span><span class=\"k\">,</span> <span class=\"s\">0x67DD4ACC</span><span class=\"k\">,</span>","            <span class=\"s\">0xF9B9DF6F</span><span class=\"k\">,</span> <span class=\"s\">0x8EBEEFF9</span><span class=\"k\">,</span> <span class=\"s\">0x17B7BE43</span><span class=\"k\">,</span> <span class=\"s\">0x60B08ED5</span><span class=\"k\">,</span>","            <span class=\"s\">0xD6D6A3E8</span><span class=\"k\">,</span> <span class=\"s\">0xA1D1937E</span><span class=\"k\">,</span> <span class=\"s\">0x38D8C2C4</span><span class=\"k\">,</span> <span class=\"s\">0x4FDFF252</span><span class=\"k\">,</span>","            <span class=\"s\">0xD1BB67F1</span><span class=\"k\">,</span> <span class=\"s\">0xA6BC5767</span><span class=\"k\">,</span> <span class=\"s\">0x3FB506DD</span><span class=\"k\">,</span> <span class=\"s\">0x48B2364B</span><span class=\"k\">,</span>","            <span class=\"s\">0xD80D2BDA</span><span class=\"k\">,</span> <span class=\"s\">0xAF0A1B4C</span><span class=\"k\">,</span> <span class=\"s\">0x36034AF6</span><span class=\"k\">,</span> <span class=\"s\">0x41047A60</span><span class=\"k\">,</span>","            <span class=\"s\">0xDF60EFC3</span><span class=\"k\">,</span> <span class=\"s\">0xA867DF55</span><span class=\"k\">,</span> <span class=\"s\">0x316E8EEF</span><span class=\"k\">,</span> <span class=\"s\">0x4669BE79</span><span class=\"k\">,</span>","            <span class=\"s\">0xCB61B38C</span><span class=\"k\">,</span> <span class=\"s\">0xBC66831A</span><span class=\"k\">,</span> <span class=\"s\">0x256FD2A0</span><span class=\"k\">,</span> <span class=\"s\">0x5268E236</span><span class=\"k\">,</span>","            <span class=\"s\">0xCC0C7795</span><span class=\"k\">,</span> <span class=\"s\">0xBB0B4703</span><span class=\"k\">,</span> <span class=\"s\">0x220216B9</span><span class=\"k\">,</span> <span class=\"s\">0x5505262F</span><span class=\"k\">,</span>","            <span class=\"s\">0xC5BA3BBE</span><span class=\"k\">,</span> <span class=\"s\">0xB2BD0B28</span><span class=\"k\">,</span> <span class=\"s\">0x2BB45A92</span><span class=\"k\">,</span> <span class=\"s\">0x5CB36A04</span><span class=\"k\">,</span>","            <span class=\"s\">0xC2D7FFA7</span><span class=\"k\">,</span> <span class=\"s\">0xB5D0CF31</span><span class=\"k\">,</span> <span class=\"s\">0x2CD99E8B</span><span class=\"k\">,</span> <span class=\"s\">0x5BDEAE1D</span><span class=\"k\">,</span>","            <span class=\"s\">0x9B64C2B0</span><span class=\"k\">,</span> <span class=\"s\">0xEC63F226</span><span class=\"k\">,</span> <span class=\"s\">0x756AA39C</span><span class=\"k\">,</span> <span class=\"s\">0x026D930A</span><span class=\"k\">,</span>","            <span class=\"s\">0x9C0906A9</span><span class=\"k\">,</span> <span class=\"s\">0xEB0E363F</span><span class=\"k\">,</span> <span class=\"s\">0x72076785</span><span class=\"k\">,</span> <span class=\"s\">0x05005713</span><span class=\"k\">,</span>","            <span class=\"s\">0x95BF4A82</span><span class=\"k\">,</span> <span class=\"s\">0xE2B87A14</span><span class=\"k\">,</span> <span class=\"s\">0x7BB12BAE</span><span class=\"k\">,</span> <span class=\"s\">0x0CB61B38</span><span class=\"k\">,</span>","            <span class=\"s\">0x92D28E9B</span><span class=\"k\">,</span> <span class=\"s\">0xE5D5BE0D</span><span class=\"k\">,</span> <span class=\"s\">0x7CDCEFB7</span><span class=\"k\">,</span> <span class=\"s\">0x0BDBDF21</span><span class=\"k\">,</span>","            <span class=\"s\">0x86D3D2D4</span><span class=\"k\">,</span> <span class=\"s\">0xF1D4E242</span><span class=\"k\">,</span> <span class=\"s\">0x68DDB3F8</span><span class=\"k\">,</span> <span class=\"s\">0x1FDA836E</span><span class=\"k\">,</span>","            <span class=\"s\">0x81BE16CD</span><span class=\"k\">,</span> <span class=\"s\">0xF6B9265B</span><span class=\"k\">,</span> <span class=\"s\">0x6FB077E1</span><span class=\"k\">,</span> <span class=\"s\">0x18B74777</span><span class=\"k\">,</span>","            <span class=\"s\">0x88085AE6</span><span class=\"k\">,</span> <span class=\"s\">0xFF0F6A70</span><span class=\"k\">,</span> <span class=\"s\">0x66063BCA</span><span class=\"k\">,</span> <span class=\"s\">0x11010B5C</span><span class=\"k\">,</span>","            <span class=\"s\">0x8F659EFF</span><span class=\"k\">,</span> <span class=\"s\">0xF862AE69</span><span class=\"k\">,</span> <span class=\"s\">0x616BFFD3</span><span class=\"k\">,</span> <span class=\"s\">0x166CCF45</span><span class=\"k\">,</span>","            <span class=\"s\">0xA00AE278</span><span class=\"k\">,</span> <span class=\"s\">0xD70DD2EE</span><span class=\"k\">,</span> <span class=\"s\">0x4E048354</span><span class=\"k\">,</span> <span class=\"s\">0x3903B3C2</span><span class=\"k\">,</span>","            <span class=\"s\">0xA7672661</span><span class=\"k\">,</span> <span class=\"s\">0xD06016F7</span><span class=\"k\">,</span> <span class=\"s\">0x4969474D</span><span class=\"k\">,</span> <span class=\"s\">0x3E6E77DB</span><span class=\"k\">,</span>","            <span class=\"s\">0xAED16A4A</span><span class=\"k\">,</span> <span class=\"s\">0xD9D65ADC</span><span class=\"k\">,</span> <span class=\"s\">0x40DF0B66</span><span class=\"k\">,</span> <span class=\"s\">0x37D83BF0</span><span class=\"k\">,</span>","            <span class=\"s\">0xA9BCAE53</span><span class=\"k\">,</span> <span class=\"s\">0xDEBB9EC5</span><span class=\"k\">,</span> <span class=\"s\">0x47B2CF7F</span><span class=\"k\">,</span> <span class=\"s\">0x30B5FFE9</span><span class=\"k\">,</span>","            <span class=\"s\">0xBDBDF21C</span><span class=\"k\">,</span> <span class=\"s\">0xCABAC28A</span><span class=\"k\">,</span> <span class=\"s\">0x53B39330</span><span class=\"k\">,</span> <span class=\"s\">0x24B4A3A6</span><span class=\"k\">,</span>","            <span class=\"s\">0xBAD03605</span><span class=\"k\">,</span> <span class=\"s\">0xCDD70693</span><span class=\"k\">,</span> <span class=\"s\">0x54DE5729</span><span class=\"k\">,</span> <span class=\"s\">0x23D967BF</span><span class=\"k\">,</span>","            <span class=\"s\">0xB3667A2E</span><span class=\"k\">,</span> <span class=\"s\">0xC4614AB8</span><span class=\"k\">,</span> <span class=\"s\">0x5D681B02</span><span class=\"k\">,</span> <span class=\"s\">0x2A6F2B94</span><span class=\"k\">,</span>","            <span class=\"s\">0xB40BBE37</span><span class=\"k\">,</span> <span class=\"s\">0xC30C8EA1</span><span class=\"k\">,</span> <span class=\"s\">0x5A05DF1B</span><span class=\"k\">,</span> <span class=\"s\">0x2D02EF8D</span>","         <span class=\"k\">];</span>","","         <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span><span class=\"k\">(</span>crc<span class=\"k\">)</span> <span class=\"k\">==</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">{</span> crc <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> <span class=\"k\">}</span>","         <span class=\"k\">var</span> x <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","         <span class=\"k\">var</span> y <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","         <span class=\"k\">var</span> byte <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","         crc <span class=\"k\">=</span> crc <span class=\"k\">^</span> <span class=\"k\">(-</span><span class=\"s\">1</span><span class=\"k\">);</span>","         <span class=\"k\">for</span><span class=\"k\">(</span> <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> iTop <span class=\"k\">=</span> input<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> iTop<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            byte <span class=\"k\">=</span> isArray <span class=\"k\">?</span> input<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">:</span> input<span class=\"k\">.</span>charCodeAt<span class=\"k\">(</span>i<span class=\"k\">);</span>","            y <span class=\"k\">=</span> <span class=\"k\">(</span> crc <span class=\"k\">^</span> byte <span class=\"k\">)</span> <span class=\"k\">&amp;</span> <span class=\"s\">0xFF</span><span class=\"k\">;</span>","            x <span class=\"k\">=</span> table<span class=\"k\">[</span>y<span class=\"k\">];</span>","            crc <span class=\"k\">=</span> <span class=\"k\">(</span> crc <span class=\"k\">&gt;&gt;&gt;</span> <span class=\"s\">8</span> <span class=\"k\">)</span> <span class=\"k\">^</span> x<span class=\"k\">;</span>","         <span class=\"k\">}</span>","","         <span class=\"k\">return</span> crc <span class=\"k\">^</span> <span class=\"k\">(-</span><span class=\"s\">1</span><span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","","      <span class=\"c\">// Inspired by http://my.opera.com/GreyWyvern/blog/show.dml/1725165</span>","      clone <span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","         <span class=\"k\">var</span> newObj <span class=\"k\">=</span> <span class=\"k\">new</span> JSZip<span class=\"k\">();</span>","         <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> <span class=\"k\">this</span><span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">!==</span> <span class=\"s\">\"function\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","               newObj<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">[</span>i<span class=\"k\">];</span>","            <span class=\"k\">}</span>","         <span class=\"k\">}</span>","         <span class=\"k\">return</span> newObj<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","","","      <span class=\"c\">/**</span>","<span class=\"c\">       * http://www.webtoolkit.info/javascript-utf8.html</span>","<span class=\"c\">       */</span>","      utf8encode <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>string<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"c\">// TextEncoder + Uint8Array to binary string is faster than checking every bytes on long strings.</span>","         <span class=\"c\">// http://jsperf.com/utf8encode-vs-textencoder</span>","         <span class=\"c\">// On short strings (file names for example), the TextEncoder API is (currently) slower.</span>","         <span class=\"k\">if</span> <span class=\"k\">(</span>JSZip<span class=\"k\">.</span>support<span class=\"k\">.</span>uint8array <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> TextEncoder <span class=\"k\">===</span> <span class=\"s\">\"function\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">var</span> u8 <span class=\"k\">=</span> TextEncoder<span class=\"k\">(</span><span class=\"s\">\"utf-8\"</span><span class=\"k\">).</span>encode<span class=\"k\">(</span>string<span class=\"k\">);</span>","            <span class=\"k\">return</span> JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>transformTo<span class=\"k\">(</span><span class=\"s\">\"string\"</span><span class=\"k\">,</span> u8<span class=\"k\">);</span>","         <span class=\"k\">}</span>","         <span class=\"k\">if</span> <span class=\"k\">(</span>JSZip<span class=\"k\">.</span>support<span class=\"k\">.</span>nodebuffer<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>transformTo<span class=\"k\">(</span><span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"k\">new</span> Buffer<span class=\"k\">(</span>string<span class=\"k\">,</span> <span class=\"s\">\"utf-8\"</span><span class=\"k\">));</span>","         <span class=\"k\">}</span>","","         <span class=\"c\">// array.join may be slower than string concatenation but generates less objects (less time spent garbage collecting).</span>","         <span class=\"c\">// See also http://jsperf.com/array-direct-assignment-vs-push/31</span>","         <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">[],</span> resIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","         <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> n <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> n <span class=\"k\">&lt;</span> string<span class=\"k\">.</span>length<span class=\"k\">;</span> n<span class=\"k\">++)</span> <span class=\"k\">{</span>","","            <span class=\"k\">var</span> c <span class=\"k\">=</span> string<span class=\"k\">.</span>charCodeAt<span class=\"k\">(</span>n<span class=\"k\">);</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>c <span class=\"k\">&lt;</span> <span class=\"s\">128</span><span class=\"k\">)</span> <span class=\"k\">{</span>","               result<span class=\"k\">[</span>resIndex<span class=\"k\">++]</span> <span class=\"k\">=</span> String<span class=\"k\">.</span>fromCharCode<span class=\"k\">(</span>c<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">((</span>c <span class=\"k\">&gt;</span> <span class=\"s\">127</span><span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>c <span class=\"k\">&lt;</span> <span class=\"s\">2048</span><span class=\"k\">))</span> <span class=\"k\">{</span>","               result<span class=\"k\">[</span>resIndex<span class=\"k\">++]</span> <span class=\"k\">=</span> String<span class=\"k\">.</span>fromCharCode<span class=\"k\">((</span>c <span class=\"k\">&gt;&gt;</span> <span class=\"s\">6</span><span class=\"k\">)</span> <span class=\"k\">|</span> <span class=\"s\">192</span><span class=\"k\">);</span>","               result<span class=\"k\">[</span>resIndex<span class=\"k\">++]</span> <span class=\"k\">=</span> String<span class=\"k\">.</span>fromCharCode<span class=\"k\">((</span>c <span class=\"k\">&amp;</span> <span class=\"s\">63</span><span class=\"k\">)</span> <span class=\"k\">|</span> <span class=\"s\">128</span><span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","               result<span class=\"k\">[</span>resIndex<span class=\"k\">++]</span> <span class=\"k\">=</span> String<span class=\"k\">.</span>fromCharCode<span class=\"k\">((</span>c <span class=\"k\">&gt;&gt;</span> <span class=\"s\">12</span><span class=\"k\">)</span> <span class=\"k\">|</span> <span class=\"s\">224</span><span class=\"k\">);</span>","               result<span class=\"k\">[</span>resIndex<span class=\"k\">++]</span> <span class=\"k\">=</span> String<span class=\"k\">.</span>fromCharCode<span class=\"k\">(((</span>c <span class=\"k\">&gt;&gt;</span> <span class=\"s\">6</span><span class=\"k\">)</span> <span class=\"k\">&amp;</span> <span class=\"s\">63</span><span class=\"k\">)</span> <span class=\"k\">|</span> <span class=\"s\">128</span><span class=\"k\">);</span>","               result<span class=\"k\">[</span>resIndex<span class=\"k\">++]</span> <span class=\"k\">=</span> String<span class=\"k\">.</span>fromCharCode<span class=\"k\">((</span>c <span class=\"k\">&amp;</span> <span class=\"s\">63</span><span class=\"k\">)</span> <span class=\"k\">|</span> <span class=\"s\">128</span><span class=\"k\">);</span>","            <span class=\"k\">}</span>","","         <span class=\"k\">}</span>","","         <span class=\"k\">return</span> result<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\"\"</span><span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * http://www.webtoolkit.info/javascript-utf8.html</span>","<span class=\"c\">       */</span>","      utf8decode <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">[],</span> resIndex <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","         <span class=\"k\">var</span> type <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>getTypeOf<span class=\"k\">(</span>input<span class=\"k\">);</span>","         <span class=\"k\">var</span> isArray <span class=\"k\">=</span> type <span class=\"k\">!==</span> <span class=\"s\">\"string\"</span><span class=\"k\">;</span>","         <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","         <span class=\"k\">var</span> c <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> c1 <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> c2 <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> c3 <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","         <span class=\"c\">// check if we can use the TextDecoder API</span>","         <span class=\"c\">// see http://encoding.spec.whatwg.org/#api</span>","         <span class=\"k\">if</span> <span class=\"k\">(</span>JSZip<span class=\"k\">.</span>support<span class=\"k\">.</span>uint8array <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> TextDecoder <span class=\"k\">===</span> <span class=\"s\">\"function\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> TextDecoder<span class=\"k\">(</span><span class=\"s\">\"utf-8\"</span><span class=\"k\">).</span>decode<span class=\"k\">(</span>","               JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>transformTo<span class=\"k\">(</span><span class=\"s\">\"uint8array\"</span><span class=\"k\">,</span> input<span class=\"k\">)</span>","            <span class=\"k\">);</span>","         <span class=\"k\">}</span>","         <span class=\"k\">if</span> <span class=\"k\">(</span>JSZip<span class=\"k\">.</span>support<span class=\"k\">.</span>nodebuffer<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>transformTo<span class=\"k\">(</span><span class=\"s\">\"nodebuffer\"</span><span class=\"k\">,</span> input<span class=\"k\">).</span>toString<span class=\"k\">(</span><span class=\"s\">\"utf-8\"</span><span class=\"k\">);</span>","         <span class=\"k\">}</span>","","         <span class=\"k\">while</span> <span class=\"k\">(</span> i <span class=\"k\">&lt;</span> input<span class=\"k\">.</span>length <span class=\"k\">)</span> <span class=\"k\">{</span>","","            c <span class=\"k\">=</span> isArray <span class=\"k\">?</span> input<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">:</span> input<span class=\"k\">.</span>charCodeAt<span class=\"k\">(</span>i<span class=\"k\">);</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>c <span class=\"k\">&lt;</span> <span class=\"s\">128</span><span class=\"k\">)</span> <span class=\"k\">{</span>","               result<span class=\"k\">[</span>resIndex<span class=\"k\">++]</span> <span class=\"k\">=</span> String<span class=\"k\">.</span>fromCharCode<span class=\"k\">(</span>c<span class=\"k\">);</span>","               i<span class=\"k\">++;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">((</span>c <span class=\"k\">&gt;</span> <span class=\"s\">191</span><span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>c <span class=\"k\">&lt;</span> <span class=\"s\">224</span><span class=\"k\">))</span> <span class=\"k\">{</span>","               c2 <span class=\"k\">=</span> isArray <span class=\"k\">?</span> input<span class=\"k\">[</span>i<span class=\"k\">+</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">:</span> input<span class=\"k\">.</span>charCodeAt<span class=\"k\">(</span>i<span class=\"k\">+</span><span class=\"s\">1</span><span class=\"k\">);</span>","               result<span class=\"k\">[</span>resIndex<span class=\"k\">++]</span> <span class=\"k\">=</span> String<span class=\"k\">.</span>fromCharCode<span class=\"k\">(((</span>c <span class=\"k\">&amp;</span> <span class=\"s\">31</span><span class=\"k\">)</span> <span class=\"k\">&lt;&lt;</span> <span class=\"s\">6</span><span class=\"k\">)</span> <span class=\"k\">|</span> <span class=\"k\">(</span>c2 <span class=\"k\">&amp;</span> <span class=\"s\">63</span><span class=\"k\">));</span>","               i <span class=\"k\">+=</span> <span class=\"s\">2</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","               c2 <span class=\"k\">=</span> isArray <span class=\"k\">?</span> input<span class=\"k\">[</span>i<span class=\"k\">+</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">:</span> input<span class=\"k\">.</span>charCodeAt<span class=\"k\">(</span>i<span class=\"k\">+</span><span class=\"s\">1</span><span class=\"k\">);</span>","               c3 <span class=\"k\">=</span> isArray <span class=\"k\">?</span> input<span class=\"k\">[</span>i<span class=\"k\">+</span><span class=\"s\">2</span><span class=\"k\">]</span> <span class=\"k\">:</span> input<span class=\"k\">.</span>charCodeAt<span class=\"k\">(</span>i<span class=\"k\">+</span><span class=\"s\">2</span><span class=\"k\">);</span>","               result<span class=\"k\">[</span>resIndex<span class=\"k\">++]</span> <span class=\"k\">=</span> String<span class=\"k\">.</span>fromCharCode<span class=\"k\">(((</span>c <span class=\"k\">&amp;</span> <span class=\"s\">15</span><span class=\"k\">)</span> <span class=\"k\">&lt;&lt;</span> <span class=\"s\">12</span><span class=\"k\">)</span> <span class=\"k\">|</span> <span class=\"k\">((</span>c2 <span class=\"k\">&amp;</span> <span class=\"s\">63</span><span class=\"k\">)</span> <span class=\"k\">&lt;&lt;</span> <span class=\"s\">6</span><span class=\"k\">)</span> <span class=\"k\">|</span> <span class=\"k\">(</span>c3 <span class=\"k\">&amp;</span> <span class=\"s\">63</span><span class=\"k\">));</span>","               i <span class=\"k\">+=</span> <span class=\"s\">3</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","         <span class=\"k\">}</span>","","         <span class=\"k\">return</span> result<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\"\"</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">());</span>","","<span class=\"c\">/*</span>","<span class=\"c\"> * Compression methods</span>","<span class=\"c\"> * This object is filled in as follow :</span>","<span class=\"c\"> * name : {</span>","<span class=\"c\"> *    magic // the 2 bytes indentifying the compression method</span>","<span class=\"c\"> *    compress // function, take the uncompressed content and return it compressed.</span>","<span class=\"c\"> *    uncompress // function, take the compressed content and return it uncompressed.</span>","<span class=\"c\"> *    compressInputType // string, the type accepted by the compress method. null to accept everything.</span>","<span class=\"c\"> *    uncompressInputType // string, the type accepted by the uncompress method. null to accept everything.</span>","<span class=\"c\"> * }</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * STORE is the default compression method, so it's included in this file.</span>","<span class=\"c\"> * Other methods should go to separated files : the user wants modularity.</span>","<span class=\"c\"> */</span>","JSZip<span class=\"k\">.</span>compressions <span class=\"k\">=</span> <span class=\"k\">{</span>","   <span class=\"s\">\"STORE\"</span> <span class=\"k\">:</span> <span class=\"k\">{</span>","      magic <span class=\"k\">:</span> <span class=\"s\">\"</span><span class=\"t\">\\x</span><span class=\"s\">00</span><span class=\"t\">\\x</span><span class=\"s\">00\"</span><span class=\"k\">,</span>","      compress <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>content<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> content<span class=\"k\">;</span> <span class=\"c\">// no compression</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      uncompress <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>content<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> content<span class=\"k\">;</span> <span class=\"c\">// no compression</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      compressInputType <span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span>","      uncompressInputType <span class=\"k\">:</span> <span class=\"k\">null</span>","   <span class=\"k\">}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">/*</span>","<span class=\"c\"> * List features that require a modern browser, and if the current browser support them.</span>","<span class=\"c\"> */</span>","JSZip<span class=\"k\">.</span>support <span class=\"k\">=</span> <span class=\"k\">{</span>","   <span class=\"c\">// contains true if JSZip can read/generate ArrayBuffer, false otherwise.</span>","   arraybuffer <span class=\"k\">:</span> <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">typeof</span> ArrayBuffer <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> Uint8Array <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">;</span>","   <span class=\"k\">}</span><span class=\"k\">)(),</span>","   <span class=\"c\">// contains true if JSZip can read/generate nodejs Buffer, false otherwise.</span>","   nodebuffer <span class=\"k\">:</span> <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">typeof</span> Buffer <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">;</span>","   <span class=\"k\">}</span><span class=\"k\">)(),</span>","   <span class=\"c\">// contains true if JSZip can read/generate Uint8Array, false otherwise.</span>","   uint8array <span class=\"k\">:</span> <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">typeof</span> Uint8Array <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">;</span>","   <span class=\"k\">}</span><span class=\"k\">)(),</span>","   <span class=\"c\">// contains true if JSZip can read/generate Blob, false otherwise.</span>","   blob <span class=\"k\">:</span> <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","      <span class=\"c\">// the spec started with BlobBuilder then replaced it with a construtor for Blob.</span>","      <span class=\"c\">// Result : we have browsers that :</span>","      <span class=\"c\">// * know the BlobBuilder (but with prefix)</span>","      <span class=\"c\">// * know the Blob constructor</span>","      <span class=\"c\">// * know about Blob but not about how to build them</span>","      <span class=\"c\">// About the \"=== 0\" test : if given the wrong type, it may be converted to a string.</span>","      <span class=\"c\">// Instead of an empty content, we will get \"[object Uint8Array]\" for example.</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> ArrayBuffer <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">var</span> buffer <span class=\"k\">=</span> <span class=\"k\">new</span> ArrayBuffer<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">);</span>","      <span class=\"k\">try</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> <span class=\"k\">new</span> Blob<span class=\"k\">([</span>buffer<span class=\"k\">],</span> <span class=\"k\">{</span> type<span class=\"k\">:</span> <span class=\"s\">\"application/zip\"</span> <span class=\"k\">}</span><span class=\"k\">).</span>size <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">catch</span><span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{}</span>","","      <span class=\"k\">try</span> <span class=\"k\">{</span>","         <span class=\"k\">var</span> builder <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"k\">(</span>window<span class=\"k\">.</span>BlobBuilder <span class=\"k\">||</span> window<span class=\"k\">.</span>WebKitBlobBuilder <span class=\"k\">||</span>","                            window<span class=\"k\">.</span>MozBlobBuilder <span class=\"k\">||</span> window<span class=\"k\">.</span>MSBlobBuilder<span class=\"k\">)();</span>","         builder<span class=\"k\">.</span>append<span class=\"k\">(</span>buffer<span class=\"k\">);</span>","         <span class=\"k\">return</span> builder<span class=\"k\">.</span>getBlob<span class=\"k\">(</span><span class=\"s\">'application/zip'</span><span class=\"k\">).</span>size <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">catch</span><span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{}</span>","","      <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","   <span class=\"k\">}</span><span class=\"k\">)()</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","   JSZip<span class=\"k\">.</span>utils <span class=\"k\">=</span> <span class=\"k\">{</span>","      <span class=\"c\">/**</span>","<span class=\"c\">       * Convert a string to a \"binary string\" : a string containing only char codes between 0 and 255.</span>","<span class=\"c\">       * @param {string} str the string to transform.</span>","<span class=\"c\">       * @return {String} the binary string.</span>","<span class=\"c\">       */</span>","      string2binary <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>str<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","         <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> str<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","            result <span class=\"k\">+=</span> String<span class=\"k\">.</span>fromCharCode<span class=\"k\">(</span>str<span class=\"k\">.</span>charCodeAt<span class=\"k\">(</span>i<span class=\"k\">)</span> <span class=\"k\">&amp;</span> <span class=\"s\">0xff</span><span class=\"k\">);</span>","         <span class=\"k\">}</span>","         <span class=\"k\">return</span> result<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      <span class=\"c\">/**</span>","<span class=\"c\">       * Create a Uint8Array from the string.</span>","<span class=\"c\">       * @param {string} str the string to transform.</span>","<span class=\"c\">       * @return {Uint8Array} the typed array.</span>","<span class=\"c\">       * @throws {Error} an Error if the browser doesn't support the requested feature.</span>","<span class=\"c\">       * @deprecated : use JSZip.utils.transformTo instead.</span>","<span class=\"c\">       */</span>","      string2Uint8Array <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>str<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>transformTo<span class=\"k\">(</span><span class=\"s\">\"uint8array\"</span><span class=\"k\">,</span> str<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","","      <span class=\"c\">/**</span>","<span class=\"c\">       * Create a string from the Uint8Array.</span>","<span class=\"c\">       * @param {Uint8Array} array the array to transform.</span>","<span class=\"c\">       * @return {string} the string.</span>","<span class=\"c\">       * @throws {Error} an Error if the browser doesn't support the requested feature.</span>","<span class=\"c\">       * @deprecated : use JSZip.utils.transformTo instead.</span>","<span class=\"c\">       */</span>","      uint8Array2String <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>array<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>transformTo<span class=\"k\">(</span><span class=\"s\">\"string\"</span><span class=\"k\">,</span> array<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      <span class=\"c\">/**</span>","<span class=\"c\">       * Create a blob from the given ArrayBuffer.</span>","<span class=\"c\">       * @param {ArrayBuffer} buffer the buffer to transform.</span>","<span class=\"c\">       * @return {Blob} the result.</span>","<span class=\"c\">       * @throws {Error} an Error if the browser doesn't support the requested feature.</span>","<span class=\"c\">       */</span>","      arrayBuffer2Blob <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>buffer<span class=\"k\">)</span> <span class=\"k\">{</span>","         JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>checkSupport<span class=\"k\">(</span><span class=\"s\">\"blob\"</span><span class=\"k\">);</span>","","         <span class=\"k\">try</span> <span class=\"k\">{</span>","            <span class=\"c\">// Blob constructor</span>","            <span class=\"k\">return</span> <span class=\"k\">new</span> Blob<span class=\"k\">([</span>buffer<span class=\"k\">],</span> <span class=\"k\">{</span> type<span class=\"k\">:</span> <span class=\"s\">\"application/zip\"</span> <span class=\"k\">}</span><span class=\"k\">);</span>","         <span class=\"k\">}</span>","         <span class=\"k\">catch</span><span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{}</span>","","         <span class=\"k\">try</span> <span class=\"k\">{</span>","            <span class=\"c\">// deprecated, browser only, old way</span>","            <span class=\"k\">var</span> builder <span class=\"k\">=</span> <span class=\"k\">new</span> <span class=\"k\">(</span>window<span class=\"k\">.</span>BlobBuilder <span class=\"k\">||</span> window<span class=\"k\">.</span>WebKitBlobBuilder <span class=\"k\">||</span>","                               window<span class=\"k\">.</span>MozBlobBuilder <span class=\"k\">||</span> window<span class=\"k\">.</span>MSBlobBuilder<span class=\"k\">)();</span>","            builder<span class=\"k\">.</span>append<span class=\"k\">(</span>buffer<span class=\"k\">);</span>","            <span class=\"k\">return</span> builder<span class=\"k\">.</span>getBlob<span class=\"k\">(</span><span class=\"s\">'application/zip'</span><span class=\"k\">);</span>","         <span class=\"k\">}</span>","         <span class=\"k\">catch</span><span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{}</span>","","         <span class=\"c\">// well, fuck ?!</span>","         <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span><span class=\"s\">\"Bug : can't construct the Blob.\"</span><span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      <span class=\"c\">/**</span>","<span class=\"c\">       * Create a blob from the given string.</span>","<span class=\"c\">       * @param {string} str the string to transform.</span>","<span class=\"c\">       * @return {Blob} the result.</span>","<span class=\"c\">       * @throws {Error} an Error if the browser doesn't support the requested feature.</span>","<span class=\"c\">       */</span>","      string2Blob <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>str<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">var</span> buffer <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>transformTo<span class=\"k\">(</span><span class=\"s\">\"arraybuffer\"</span><span class=\"k\">,</span> str<span class=\"k\">);</span>","         <span class=\"k\">return</span> JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>arrayBuffer2Blob<span class=\"k\">(</span>buffer<span class=\"k\">);</span>","      <span class=\"k\">}</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","   <span class=\"c\">/**</span>","<span class=\"c\">    * The identity function.</span>","<span class=\"c\">    * @param {Object} input the input.</span>","<span class=\"c\">    * @return {Object} the same input.</span>","<span class=\"c\">    */</span>","   <span class=\"k\">function</span> identity<span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> input<span class=\"k\">;</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","   <span class=\"c\">/**</span>","<span class=\"c\">    * Fill in an array with a string.</span>","<span class=\"c\">    * @param {String} str the string to use.</span>","<span class=\"c\">    * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to fill in (will be mutated).</span>","<span class=\"c\">    * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated array.</span>","<span class=\"c\">    */</span>","   <span class=\"k\">function</span> stringToArrayLike<span class=\"k\">(</span>str<span class=\"k\">,</span> array<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> str<span class=\"k\">.</span>length<span class=\"k\">;</span> <span class=\"k\">++</span>i<span class=\"k\">)</span> <span class=\"k\">{</span>","         array<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> str<span class=\"k\">.</span>charCodeAt<span class=\"k\">(</span>i<span class=\"k\">)</span> <span class=\"k\">&amp;</span> <span class=\"s\">0xFF</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> array<span class=\"k\">;</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","   <span class=\"c\">/**</span>","<span class=\"c\">    * Transform an array-like object to a string.</span>","<span class=\"c\">    * @param {Array|ArrayBuffer|Uint8Array|Buffer} array the array to transform.</span>","<span class=\"c\">    * @return {String} the result.</span>","<span class=\"c\">    */</span>","   <span class=\"k\">function</span> arrayLikeToString<span class=\"k\">(</span>array<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"c\">// Performances notes :</span>","      <span class=\"c\">// --------------------</span>","      <span class=\"c\">// String.fromCharCode.apply(null, array) is the fastest, see</span>","      <span class=\"c\">// see http://jsperf.com/converting-a-uint8array-to-a-string/2</span>","      <span class=\"c\">// but the stack is limited (and we can get huge arrays !).</span>","      <span class=\"c\">//</span>","      <span class=\"c\">// result += String.fromCharCode(array[i]); generate too many strings !</span>","      <span class=\"c\">//</span>","      <span class=\"c\">// This code is inspired by http://jsperf.com/arraybuffer-to-string-apply-performance/2</span>","      <span class=\"k\">var</span> chunk <span class=\"k\">=</span> <span class=\"s\">65536</span><span class=\"k\">;</span>","      <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">[],</span> len <span class=\"k\">=</span> array<span class=\"k\">.</span>length<span class=\"k\">,</span> type <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>getTypeOf<span class=\"k\">(</span>array<span class=\"k\">),</span> k <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","      <span class=\"k\">while</span> <span class=\"k\">(</span>k <span class=\"k\">&lt;</span> len <span class=\"k\">&amp;&amp;</span> chunk <span class=\"k\">&gt;</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">try</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>type <span class=\"k\">===</span> <span class=\"s\">\"array\"</span> <span class=\"k\">||</span> type <span class=\"k\">===</span> <span class=\"s\">\"nodebuffer\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","               result<span class=\"k\">.</span>push<span class=\"k\">(</span>String<span class=\"k\">.</span>fromCharCode<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> array<span class=\"k\">.</span>slice<span class=\"k\">(</span>k<span class=\"k\">,</span> Math<span class=\"k\">.</span>max<span class=\"k\">(</span>k <span class=\"k\">+</span> chunk<span class=\"k\">,</span> len<span class=\"k\">))));</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","               result<span class=\"k\">.</span>push<span class=\"k\">(</span>String<span class=\"k\">.</span>fromCharCode<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> array<span class=\"k\">.</span>subarray<span class=\"k\">(</span>k<span class=\"k\">,</span> k <span class=\"k\">+</span> chunk<span class=\"k\">)));</span>","            <span class=\"k\">}</span>","            k <span class=\"k\">+=</span> chunk<span class=\"k\">;</span>","         <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","            chunk <span class=\"k\">=</span> Math<span class=\"k\">.</span>floor<span class=\"k\">(</span>chunk <span class=\"k\">/</span> <span class=\"s\">2</span><span class=\"k\">);</span>","         <span class=\"k\">}</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> result<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\"\"</span><span class=\"k\">);</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","   <span class=\"c\">/**</span>","<span class=\"c\">    * Copy the data from an array-like to an other array-like.</span>","<span class=\"c\">    * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayFrom the origin array.</span>","<span class=\"c\">    * @param {Array|ArrayBuffer|Uint8Array|Buffer} arrayTo the destination array which will be mutated.</span>","<span class=\"c\">    * @return {Array|ArrayBuffer|Uint8Array|Buffer} the updated destination array.</span>","<span class=\"c\">    */</span>","   <span class=\"k\">function</span> arrayLikeToArrayLike<span class=\"k\">(</span>arrayFrom<span class=\"k\">,</span> arrayTo<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> arrayFrom<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","         arrayTo<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> arrayFrom<span class=\"k\">[</span>i<span class=\"k\">];</span>","      <span class=\"k\">}</span>","      <span class=\"k\">return</span> arrayTo<span class=\"k\">;</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","   <span class=\"c\">// a matrix containing functions to transform everything into everything.</span>","   <span class=\"k\">var</span> transform <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","","   <span class=\"c\">// string to ?</span>","   transform<span class=\"k\">[</span><span class=\"s\">\"string\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","      <span class=\"s\">\"string\"</span> <span class=\"k\">:</span> identity<span class=\"k\">,</span>","      <span class=\"s\">\"array\"</span> <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> stringToArrayLike<span class=\"k\">(</span>input<span class=\"k\">,</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span>input<span class=\"k\">.</span>length<span class=\"k\">));</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      <span class=\"s\">\"arraybuffer\"</span> <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> transform<span class=\"k\">[</span><span class=\"s\">\"string\"</span><span class=\"k\">][</span><span class=\"s\">\"uint8array\"</span><span class=\"k\">](</span>input<span class=\"k\">).</span>buffer<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      <span class=\"s\">\"uint8array\"</span> <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> stringToArrayLike<span class=\"k\">(</span>input<span class=\"k\">,</span> <span class=\"k\">new</span> Uint8Array<span class=\"k\">(</span>input<span class=\"k\">.</span>length<span class=\"k\">));</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      <span class=\"s\">\"nodebuffer\"</span> <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> stringToArrayLike<span class=\"k\">(</span>input<span class=\"k\">,</span> <span class=\"k\">new</span> Buffer<span class=\"k\">(</span>input<span class=\"k\">.</span>length<span class=\"k\">));</span>","      <span class=\"k\">}</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","   <span class=\"c\">// array to ?</span>","   transform<span class=\"k\">[</span><span class=\"s\">\"array\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","      <span class=\"s\">\"string\"</span> <span class=\"k\">:</span> arrayLikeToString<span class=\"k\">,</span>","      <span class=\"s\">\"array\"</span> <span class=\"k\">:</span> identity<span class=\"k\">,</span>","      <span class=\"s\">\"arraybuffer\"</span> <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> <span class=\"k\">(</span><span class=\"k\">new</span> Uint8Array<span class=\"k\">(</span>input<span class=\"k\">)).</span>buffer<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      <span class=\"s\">\"uint8array\"</span> <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> <span class=\"k\">new</span> Uint8Array<span class=\"k\">(</span>input<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      <span class=\"s\">\"nodebuffer\"</span> <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> <span class=\"k\">new</span> Buffer<span class=\"k\">(</span>input<span class=\"k\">);</span>","      <span class=\"k\">}</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","   <span class=\"c\">// arraybuffer to ?</span>","   transform<span class=\"k\">[</span><span class=\"s\">\"arraybuffer\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","      <span class=\"s\">\"string\"</span> <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> arrayLikeToString<span class=\"k\">(</span><span class=\"k\">new</span> Uint8Array<span class=\"k\">(</span>input<span class=\"k\">));</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      <span class=\"s\">\"array\"</span> <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> arrayLikeToArrayLike<span class=\"k\">(</span><span class=\"k\">new</span> Uint8Array<span class=\"k\">(</span>input<span class=\"k\">),</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span>input<span class=\"k\">.</span>byteLength<span class=\"k\">));</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      <span class=\"s\">\"arraybuffer\"</span> <span class=\"k\">:</span> identity<span class=\"k\">,</span>","      <span class=\"s\">\"uint8array\"</span> <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> <span class=\"k\">new</span> Uint8Array<span class=\"k\">(</span>input<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      <span class=\"s\">\"nodebuffer\"</span> <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> <span class=\"k\">new</span> Buffer<span class=\"k\">(</span><span class=\"k\">new</span> Uint8Array<span class=\"k\">(</span>input<span class=\"k\">));</span>","      <span class=\"k\">}</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","   <span class=\"c\">// uint8array to ?</span>","   transform<span class=\"k\">[</span><span class=\"s\">\"uint8array\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","      <span class=\"s\">\"string\"</span> <span class=\"k\">:</span> arrayLikeToString<span class=\"k\">,</span>","      <span class=\"s\">\"array\"</span> <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> arrayLikeToArrayLike<span class=\"k\">(</span>input<span class=\"k\">,</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span>input<span class=\"k\">.</span>length<span class=\"k\">));</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      <span class=\"s\">\"arraybuffer\"</span> <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> input<span class=\"k\">.</span>buffer<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      <span class=\"s\">\"uint8array\"</span> <span class=\"k\">:</span> identity<span class=\"k\">,</span>","      <span class=\"s\">\"nodebuffer\"</span> <span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> <span class=\"k\">new</span> Buffer<span class=\"k\">(</span>input<span class=\"k\">);</span>","      <span class=\"k\">}</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","   <span class=\"c\">// nodebuffer to ?</span>","   transform<span class=\"k\">[</span><span class=\"s\">\"nodebuffer\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","      <span class=\"s\">\"string\"</span> <span class=\"k\">:</span> arrayLikeToString<span class=\"k\">,</span>","      <span class=\"s\">\"array\"</span> <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> arrayLikeToArrayLike<span class=\"k\">(</span>input<span class=\"k\">,</span> <span class=\"k\">new</span> Array<span class=\"k\">(</span>input<span class=\"k\">.</span>length<span class=\"k\">));</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      <span class=\"s\">\"arraybuffer\"</span> <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> transform<span class=\"k\">[</span><span class=\"s\">\"nodebuffer\"</span><span class=\"k\">][</span><span class=\"s\">\"uint8array\"</span><span class=\"k\">](</span>input<span class=\"k\">).</span>buffer<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      <span class=\"s\">\"uint8array\"</span> <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> arrayLikeToArrayLike<span class=\"k\">(</span>input<span class=\"k\">,</span> <span class=\"k\">new</span> Uint8Array<span class=\"k\">(</span>input<span class=\"k\">.</span>length<span class=\"k\">));</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      <span class=\"s\">\"nodebuffer\"</span> <span class=\"k\">:</span> identity","   <span class=\"k\">}</span><span class=\"k\">;</span>","","   <span class=\"c\">/**</span>","<span class=\"c\">    * Transform an input into any type.</span>","<span class=\"c\">    * The supported output type are : string, array, uint8array, arraybuffer, nodebuffer.</span>","<span class=\"c\">    * If no output type is specified, the unmodified input will be returned.</span>","<span class=\"c\">    * @param {String} outputType the output type.</span>","<span class=\"c\">    * @param {String|Array|ArrayBuffer|Uint8Array|Buffer} input the input to convert.</span>","<span class=\"c\">    * @throws {Error} an Error if the browser doesn't support the requested output type.</span>","<span class=\"c\">    */</span>","   JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>transformTo <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>outputType<span class=\"k\">,</span> input<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"c\">// undefined, null, etc</span>","         <span class=\"c\">// an empty string won't harm.</span>","         input <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>outputType<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> input<span class=\"k\">;</span>","      <span class=\"k\">}</span>","      JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>checkSupport<span class=\"k\">(</span>outputType<span class=\"k\">);</span>","      <span class=\"k\">var</span> inputType <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>getTypeOf<span class=\"k\">(</span>input<span class=\"k\">);</span>","      <span class=\"k\">var</span> result <span class=\"k\">=</span> transform<span class=\"k\">[</span>inputType<span class=\"k\">][</span>outputType<span class=\"k\">](</span>input<span class=\"k\">);</span>","      <span class=\"k\">return</span> result<span class=\"k\">;</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","   <span class=\"c\">/**</span>","<span class=\"c\">    * Return the type of the input.</span>","<span class=\"c\">    * The type will be in a format valid for JSZip.utils.transformTo : string, array, uint8array, arraybuffer.</span>","<span class=\"c\">    * @param {Object} input the input to identify.</span>","<span class=\"c\">    * @return {String} the (lowercase) type of the input.</span>","<span class=\"c\">    */</span>","   JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>getTypeOf <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>input<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> input <span class=\"k\">===</span> <span class=\"s\">\"string\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> <span class=\"s\">\"string\"</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>input <span class=\"k\">instanceof</span> Array<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> <span class=\"s\">\"array\"</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>JSZip<span class=\"k\">.</span>support<span class=\"k\">.</span>nodebuffer <span class=\"k\">&amp;&amp;</span> Buffer<span class=\"k\">.</span>isBuffer<span class=\"k\">(</span>input<span class=\"k\">))</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> <span class=\"s\">\"nodebuffer\"</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>JSZip<span class=\"k\">.</span>support<span class=\"k\">.</span>uint8array <span class=\"k\">&amp;&amp;</span> input <span class=\"k\">instanceof</span> Uint8Array<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> <span class=\"s\">\"uint8array\"</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>JSZip<span class=\"k\">.</span>support<span class=\"k\">.</span>arraybuffer <span class=\"k\">&amp;&amp;</span> input <span class=\"k\">instanceof</span> ArrayBuffer<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> <span class=\"s\">\"arraybuffer\"</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","   <span class=\"c\">/**</span>","<span class=\"c\">    * Throw an exception if the type is not supported.</span>","<span class=\"c\">    * @param {String} type the type to check.</span>","<span class=\"c\">    * @throws {Error} an Error if the browser doesn't support the requested type.</span>","<span class=\"c\">    */</span>","   JSZip<span class=\"k\">.</span>utils<span class=\"k\">.</span>checkSupport <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">(</span>type<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">var</span> supported <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">switch</span> <span class=\"k\">(</span>type<span class=\"k\">.</span>toLowerCase<span class=\"k\">())</span> <span class=\"k\">{</span>","         <span class=\"k\">case</span> <span class=\"s\">\"uint8array\"</span><span class=\"k\">:</span>","            supported <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>support<span class=\"k\">.</span>uint8array<span class=\"k\">;</span>","         <span class=\"k\">break</span><span class=\"k\">;</span>","         <span class=\"k\">case</span> <span class=\"s\">\"arraybuffer\"</span><span class=\"k\">:</span>","            supported <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>support<span class=\"k\">.</span>arraybuffer<span class=\"k\">;</span>","         <span class=\"k\">break</span><span class=\"k\">;</span>","         <span class=\"k\">case</span> <span class=\"s\">\"nodebuffer\"</span><span class=\"k\">:</span>","            supported <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>support<span class=\"k\">.</span>nodebuffer<span class=\"k\">;</span>","         <span class=\"k\">break</span><span class=\"k\">;</span>","         <span class=\"k\">case</span> <span class=\"s\">\"blob\"</span><span class=\"k\">:</span>","            supported <span class=\"k\">=</span> JSZip<span class=\"k\">.</span>support<span class=\"k\">.</span>blob<span class=\"k\">;</span>","         <span class=\"k\">break</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","      <span class=\"k\">if</span> <span class=\"k\">(!</span>supported<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">throw</span> <span class=\"k\">new</span> Error<span class=\"k\">(</span>type <span class=\"k\">+</span> <span class=\"s\">\" is not supported by this browser\"</span><span class=\"k\">);</span>","      <span class=\"k\">}</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","","<span class=\"k\">}</span><span class=\"k\">)();</span>","","<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span><span class=\"k\">{</span>","   <span class=\"c\">/**</span>","<span class=\"c\">    * Represents an entry in the zip.</span>","<span class=\"c\">    * The content may or may not be compressed.</span>","<span class=\"c\">    * @constructor</span>","<span class=\"c\">    */</span>","   JSZip<span class=\"k\">.</span>CompressedObject <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","         <span class=\"k\">this</span><span class=\"k\">.</span>compressedSize <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","         <span class=\"k\">this</span><span class=\"k\">.</span>uncompressedSize <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","         <span class=\"k\">this</span><span class=\"k\">.</span>crc32 <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","         <span class=\"k\">this</span><span class=\"k\">.</span>compressionMethod <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","         <span class=\"k\">this</span><span class=\"k\">.</span>compressedContent <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","","   JSZip<span class=\"k\">.</span>CompressedObject<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","      <span class=\"c\">/**</span>","<span class=\"c\">       * Return the decompressed content in an unspecified format.</span>","<span class=\"c\">       * The format will depend on the decompressor.</span>","<span class=\"c\">       * @return {Object} the decompressed content.</span>","<span class=\"c\">       */</span>","      getContent <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span> <span class=\"c\">// see implementation</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      <span class=\"c\">/**</span>","<span class=\"c\">       * Return the compressed content in an unspecified format.</span>","<span class=\"c\">       * The format will depend on the compressed conten source.</span>","<span class=\"c\">       * @return {Object} the compressed content.</span>","<span class=\"c\">       */</span>","      getCompressedContent <span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","         <span class=\"k\">return</span> <span class=\"k\">null</span><span class=\"k\">;</span> <span class=\"c\">// see implementation</span>","      <span class=\"k\">}</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">)();</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  Base64 encode / decode</span>","<span class=\"c\"> *  http://www.webtoolkit.info/</span>","<span class=\"c\"> *</span>","<span class=\"c\"> *  Hacked so that it doesn't utf8 en/decode everything</span>","<span class=\"c\"> **/</span>","JSZip<span class=\"k\">.</span>base64 <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","   <span class=\"c\">// private property</span>","   <span class=\"k\">var</span> _keyStr <span class=\"k\">=</span> <span class=\"s\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\"</span><span class=\"k\">;</span>","","   <span class=\"k\">return</span> <span class=\"k\">{</span>","      <span class=\"c\">// public method for encoding</span>","      encode <span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>input<span class=\"k\">,</span> utf8<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">var</span> output <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","         <span class=\"k\">var</span> chr1<span class=\"k\">,</span> chr2<span class=\"k\">,</span> chr3<span class=\"k\">,</span> enc1<span class=\"k\">,</span> enc2<span class=\"k\">,</span> enc3<span class=\"k\">,</span> enc4<span class=\"k\">;</span>","         <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","         <span class=\"k\">while</span> <span class=\"k\">(</span>i <span class=\"k\">&lt;</span> input<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","","            chr1 <span class=\"k\">=</span> input<span class=\"k\">.</span>charCodeAt<span class=\"k\">(</span>i<span class=\"k\">++);</span>","            chr2 <span class=\"k\">=</span> input<span class=\"k\">.</span>charCodeAt<span class=\"k\">(</span>i<span class=\"k\">++);</span>","            chr3 <span class=\"k\">=</span> input<span class=\"k\">.</span>charCodeAt<span class=\"k\">(</span>i<span class=\"k\">++);</span>","","            enc1 <span class=\"k\">=</span> chr1 <span class=\"k\">&gt;&gt;</span> <span class=\"s\">2</span><span class=\"k\">;</span>","            enc2 <span class=\"k\">=</span> <span class=\"k\">((</span>chr1 <span class=\"k\">&amp;</span> <span class=\"s\">3</span><span class=\"k\">)</span> <span class=\"k\">&lt;&lt;</span> <span class=\"s\">4</span><span class=\"k\">)</span> <span class=\"k\">|</span> <span class=\"k\">(</span>chr2 <span class=\"k\">&gt;&gt;</span> <span class=\"s\">4</span><span class=\"k\">);</span>","            enc3 <span class=\"k\">=</span> <span class=\"k\">((</span>chr2 <span class=\"k\">&amp;</span> <span class=\"s\">15</span><span class=\"k\">)</span> <span class=\"k\">&lt;&lt;</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">|</span> <span class=\"k\">(</span>chr3 <span class=\"k\">&gt;&gt;</span> <span class=\"s\">6</span><span class=\"k\">);</span>","            enc4 <span class=\"k\">=</span> chr3 <span class=\"k\">&amp;</span> <span class=\"s\">63</span><span class=\"k\">;</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>isNaN<span class=\"k\">(</span>chr2<span class=\"k\">))</span> <span class=\"k\">{</span>","               enc3 <span class=\"k\">=</span> enc4 <span class=\"k\">=</span> <span class=\"s\">64</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>isNaN<span class=\"k\">(</span>chr3<span class=\"k\">))</span> <span class=\"k\">{</span>","               enc4 <span class=\"k\">=</span> <span class=\"s\">64</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","            output <span class=\"k\">=</span> output <span class=\"k\">+</span>","               _keyStr<span class=\"k\">.</span>charAt<span class=\"k\">(</span>enc1<span class=\"k\">)</span> <span class=\"k\">+</span> _keyStr<span class=\"k\">.</span>charAt<span class=\"k\">(</span>enc2<span class=\"k\">)</span> <span class=\"k\">+</span>","               _keyStr<span class=\"k\">.</span>charAt<span class=\"k\">(</span>enc3<span class=\"k\">)</span> <span class=\"k\">+</span> _keyStr<span class=\"k\">.</span>charAt<span class=\"k\">(</span>enc4<span class=\"k\">);</span>","","         <span class=\"k\">}</span>","","         <span class=\"k\">return</span> output<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","","      <span class=\"c\">// public method for decoding</span>","      decode <span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>input<span class=\"k\">,</span> utf8<span class=\"k\">)</span> <span class=\"k\">{</span>","         <span class=\"k\">var</span> output <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","         <span class=\"k\">var</span> chr1<span class=\"k\">,</span> chr2<span class=\"k\">,</span> chr3<span class=\"k\">;</span>","         <span class=\"k\">var</span> enc1<span class=\"k\">,</span> enc2<span class=\"k\">,</span> enc3<span class=\"k\">,</span> enc4<span class=\"k\">;</span>","         <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","","         input <span class=\"k\">=</span> input<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/[^A-Za-z0-9\\+\\/\\=]/g</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">);</span>","","         <span class=\"k\">while</span> <span class=\"k\">(</span>i <span class=\"k\">&lt;</span> input<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","","            enc1 <span class=\"k\">=</span> _keyStr<span class=\"k\">.</span>indexOf<span class=\"k\">(</span>input<span class=\"k\">.</span>charAt<span class=\"k\">(</span>i<span class=\"k\">++));</span>","            enc2 <span class=\"k\">=</span> _keyStr<span class=\"k\">.</span>indexOf<span class=\"k\">(</span>input<span class=\"k\">.</span>charAt<span class=\"k\">(</span>i<span class=\"k\">++));</span>","            enc3 <span class=\"k\">=</span> _keyStr<span class=\"k\">.</span>indexOf<span class=\"k\">(</span>input<span class=\"k\">.</span>charAt<span class=\"k\">(</span>i<span class=\"k\">++));</span>","            enc4 <span class=\"k\">=</span> _keyStr<span class=\"k\">.</span>indexOf<span class=\"k\">(</span>input<span class=\"k\">.</span>charAt<span class=\"k\">(</span>i<span class=\"k\">++));</span>","","            chr1 <span class=\"k\">=</span> <span class=\"k\">(</span>enc1 <span class=\"k\">&lt;&lt;</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">|</span> <span class=\"k\">(</span>enc2 <span class=\"k\">&gt;&gt;</span> <span class=\"s\">4</span><span class=\"k\">);</span>","            chr2 <span class=\"k\">=</span> <span class=\"k\">((</span>enc2 <span class=\"k\">&amp;</span> <span class=\"s\">15</span><span class=\"k\">)</span> <span class=\"k\">&lt;&lt;</span> <span class=\"s\">4</span><span class=\"k\">)</span> <span class=\"k\">|</span> <span class=\"k\">(</span>enc3 <span class=\"k\">&gt;&gt;</span> <span class=\"s\">2</span><span class=\"k\">);</span>","            chr3 <span class=\"k\">=</span> <span class=\"k\">((</span>enc3 <span class=\"k\">&amp;</span> <span class=\"s\">3</span><span class=\"k\">)</span> <span class=\"k\">&lt;&lt;</span> <span class=\"s\">6</span><span class=\"k\">)</span> <span class=\"k\">|</span> enc4<span class=\"k\">;</span>","","            output <span class=\"k\">=</span> output <span class=\"k\">+</span> String<span class=\"k\">.</span>fromCharCode<span class=\"k\">(</span>chr1<span class=\"k\">);</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>enc3 <span class=\"k\">!=</span> <span class=\"s\">64</span><span class=\"k\">)</span> <span class=\"k\">{</span>","               output <span class=\"k\">=</span> output <span class=\"k\">+</span> String<span class=\"k\">.</span>fromCharCode<span class=\"k\">(</span>chr2<span class=\"k\">);</span>","            <span class=\"k\">}</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>enc4 <span class=\"k\">!=</span> <span class=\"s\">64</span><span class=\"k\">)</span> <span class=\"k\">{</span>","               output <span class=\"k\">=</span> output <span class=\"k\">+</span> String<span class=\"k\">.</span>fromCharCode<span class=\"k\">(</span>chr3<span class=\"k\">);</span>","            <span class=\"k\">}</span>","","         <span class=\"k\">}</span>","","         <span class=\"k\">return</span> output<span class=\"k\">;</span>","","      <span class=\"k\">}</span>","   <span class=\"k\">}</span><span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">());</span>","","<span class=\"c\">// enforcing Stuk's coding style</span>","<span class=\"c\">// vim: set shiftwidth=3 softtabstop=3:</span>"];
_$jscoverage['assets/js/jszip.js'][19]++;
"use strict";
_$jscoverage['assets/js/jszip.js'][27]++;
var JSZip = (function (data, options) {
  _$jscoverage['assets/js/jszip.js'][33]++;
  this.files = {};
  _$jscoverage['assets/js/jszip.js'][36]++;
  this.root = "";
  _$jscoverage['assets/js/jszip.js'][38]++;
  if (data) {
    _$jscoverage['assets/js/jszip.js'][39]++;
    this.load(data, options);
  }
});
_$jscoverage['assets/js/jszip.js'][43]++;
JSZip.signature = {LOCAL_FILE_HEADER: "PK\u0003\u0004", CENTRAL_FILE_HEADER: "PK\u0001\u0002", CENTRAL_DIRECTORY_END: "PK\u0005\u0006", ZIP64_CENTRAL_DIRECTORY_LOCATOR: "PK\u0006\u0007", ZIP64_CENTRAL_DIRECTORY_END: "PK\u0006\u0006", DATA_DESCRIPTOR: "PK\u0007\b"};
_$jscoverage['assets/js/jszip.js'][53]++;
JSZip.defaults = {base64: false, binary: false, dir: false, date: null, compression: null};
_$jscoverage['assets/js/jszip.js'][62]++;
JSZip.prototype = (function () {
  _$jscoverage['assets/js/jszip.js'][69]++;
  var getRawData = (function (file) {
  _$jscoverage['assets/js/jszip.js'][70]++;
  if ((file._data instanceof JSZip.CompressedObject)) {
    _$jscoverage['assets/js/jszip.js'][71]++;
    file._data = file._data.getContent();
    _$jscoverage['assets/js/jszip.js'][72]++;
    file.options.binary = true;
    _$jscoverage['assets/js/jszip.js'][73]++;
    file.options.base64 = false;
    _$jscoverage['assets/js/jszip.js'][75]++;
    if ((JSZip.utils.getTypeOf(file._data) === "uint8array")) {
      _$jscoverage['assets/js/jszip.js'][76]++;
      var copy = file._data;
      _$jscoverage['assets/js/jszip.js'][79]++;
      file._data = new Uint8Array(copy.length);
      _$jscoverage['assets/js/jszip.js'][81]++;
      if ((copy.length !== 0)) {
        _$jscoverage['assets/js/jszip.js'][82]++;
        file._data.set(copy, 0);
      }
    }
  }
  _$jscoverage['assets/js/jszip.js'][86]++;
  return file._data;
});
  _$jscoverage['assets/js/jszip.js'][94]++;
  var getBinaryData = (function (file) {
  _$jscoverage['assets/js/jszip.js'][95]++;
  var result = getRawData(file), type = JSZip.utils.getTypeOf(result);
  _$jscoverage['assets/js/jszip.js'][96]++;
  if ((type === "string")) {
    _$jscoverage['assets/js/jszip.js'][97]++;
    if ((! file.options.binary)) {
      _$jscoverage['assets/js/jszip.js'][100]++;
      if ((JSZip.support.uint8array && ((typeof TextEncoder) === "function"))) {
        _$jscoverage['assets/js/jszip.js'][101]++;
        return TextEncoder("utf-8").encode(result);
      }
      _$jscoverage['assets/js/jszip.js'][103]++;
      if (JSZip.support.nodebuffer) {
        _$jscoverage['assets/js/jszip.js'][104]++;
        return new Buffer(result, "utf-8");
      }
    }
    _$jscoverage['assets/js/jszip.js'][107]++;
    return file.asBinary();
  }
  _$jscoverage['assets/js/jszip.js'][109]++;
  return result;
});
  _$jscoverage['assets/js/jszip.js'][117]++;
  var dataToString = (function (asUTF8) {
  _$jscoverage['assets/js/jszip.js'][118]++;
  var result = getRawData(this);
  _$jscoverage['assets/js/jszip.js'][119]++;
  if (((result === null) || ((typeof result) === "undefined"))) {
    _$jscoverage['assets/js/jszip.js'][120]++;
    return "";
  }
  _$jscoverage['assets/js/jszip.js'][123]++;
  if (this.options.base64) {
    _$jscoverage['assets/js/jszip.js'][124]++;
    result = JSZip.base64.decode(result);
  }
  _$jscoverage['assets/js/jszip.js'][126]++;
  if ((asUTF8 && this.options.binary)) {
    _$jscoverage['assets/js/jszip.js'][129]++;
    result = JSZip.prototype.utf8decode(result);
  }
  else {
    _$jscoverage['assets/js/jszip.js'][132]++;
    result = JSZip.utils.transformTo("string", result);
  }
  _$jscoverage['assets/js/jszip.js'][135]++;
  if (((! asUTF8) && (! this.options.binary))) {
    _$jscoverage['assets/js/jszip.js'][136]++;
    result = JSZip.prototype.utf8encode(result);
  }
  _$jscoverage['assets/js/jszip.js'][138]++;
  return result;
});
  _$jscoverage['assets/js/jszip.js'][147]++;
  var ZipObject = (function (name, data, options) {
  _$jscoverage['assets/js/jszip.js'][148]++;
  this.name = name;
  _$jscoverage['assets/js/jszip.js'][149]++;
  this._data = data;
  _$jscoverage['assets/js/jszip.js'][150]++;
  this.options = options;
});
  _$jscoverage['assets/js/jszip.js'][153]++;
  ZipObject.prototype = {asText: (function () {
  _$jscoverage['assets/js/jszip.js'][159]++;
  return dataToString.call(this, true);
}), asBinary: (function () {
  _$jscoverage['assets/js/jszip.js'][166]++;
  return dataToString.call(this, false);
}), asNodeBuffer: (function () {
  _$jscoverage['assets/js/jszip.js'][173]++;
  var result = getBinaryData(this);
  _$jscoverage['assets/js/jszip.js'][174]++;
  return JSZip.utils.transformTo("nodebuffer", result);
}), asUint8Array: (function () {
  _$jscoverage['assets/js/jszip.js'][181]++;
  var result = getBinaryData(this);
  _$jscoverage['assets/js/jszip.js'][182]++;
  return JSZip.utils.transformTo("uint8array", result);
}), asArrayBuffer: (function () {
  _$jscoverage['assets/js/jszip.js'][189]++;
  return this.asUint8Array().buffer;
})};
  _$jscoverage['assets/js/jszip.js'][200]++;
  var decToHex = (function (dec, bytes) {
  _$jscoverage['assets/js/jszip.js'][201]++;
  var hex = "", i;
  _$jscoverage['assets/js/jszip.js'][202]++;
  for (i = 0; (i < bytes); (i++)) {
    _$jscoverage['assets/js/jszip.js'][203]++;
    hex += String.fromCharCode((dec & 255));
    _$jscoverage['assets/js/jszip.js'][204]++;
    dec = (dec >>> 8);
}
  _$jscoverage['assets/js/jszip.js'][206]++;
  return hex;
});
  _$jscoverage['assets/js/jszip.js'][215]++;
  var extend = (function () {
  _$jscoverage['assets/js/jszip.js'][216]++;
  var result = {}, i, attr;
  _$jscoverage['assets/js/jszip.js'][217]++;
  for (i = 0; (i < arguments.length); (i++)) {
    _$jscoverage['assets/js/jszip.js'][218]++;
    for (attr in arguments[i]) {
      _$jscoverage['assets/js/jszip.js'][219]++;
      if ((arguments[i].hasOwnProperty(attr) && ((typeof result[attr]) === "undefined"))) {
        _$jscoverage['assets/js/jszip.js'][220]++;
        result[attr] = arguments[i][attr];
      }
}
}
  _$jscoverage['assets/js/jszip.js'][224]++;
  return result;
});
  _$jscoverage['assets/js/jszip.js'][234]++;
  var prepareFileAttrs = (function (o) {
  _$jscoverage['assets/js/jszip.js'][235]++;
  o = (o || {});
  _$jscoverage['assets/js/jszip.js'][236]++;
  if (((o.base64 === true) && (o.binary == null))) {
    _$jscoverage['assets/js/jszip.js'][237]++;
    o.binary = true;
  }
  _$jscoverage['assets/js/jszip.js'][239]++;
  o = extend(o, JSZip.defaults);
  _$jscoverage['assets/js/jszip.js'][240]++;
  o.date = (o.date || new Date());
  _$jscoverage['assets/js/jszip.js'][241]++;
  if ((o.compression !== null)) {
    _$jscoverage['assets/js/jszip.js'][241]++;
    o.compression = o.compression.toUpperCase();
  }
  _$jscoverage['assets/js/jszip.js'][243]++;
  return o;
});
  _$jscoverage['assets/js/jszip.js'][254]++;
  var fileAdd = (function (name, data, o) {
  _$jscoverage['assets/js/jszip.js'][256]++;
  var parent = parentFolder(name), dataType = JSZip.utils.getTypeOf(data);
  _$jscoverage['assets/js/jszip.js'][257]++;
  if (parent) {
    _$jscoverage['assets/js/jszip.js'][258]++;
    folderAdd.call(this, parent);
  }
  _$jscoverage['assets/js/jszip.js'][261]++;
  o = prepareFileAttrs(o);
  _$jscoverage['assets/js/jszip.js'][263]++;
  if ((o.dir || (data === null) || ((typeof data) === "undefined"))) {
    _$jscoverage['assets/js/jszip.js'][264]++;
    o.base64 = false;
    _$jscoverage['assets/js/jszip.js'][265]++;
    o.binary = false;
    _$jscoverage['assets/js/jszip.js'][266]++;
    data = null;
  }
  else {
    _$jscoverage['assets/js/jszip.js'][267]++;
    if ((dataType === "string")) {
      _$jscoverage['assets/js/jszip.js'][268]++;
      if ((o.binary && (! o.base64))) {
        _$jscoverage['assets/js/jszip.js'][270]++;
        if ((o.optimizedBinaryString !== true)) {
          _$jscoverage['assets/js/jszip.js'][273]++;
          data = JSZip.utils.string2binary(data);
        }
      }
    }
    else {
      _$jscoverage['assets/js/jszip.js'][277]++;
      o.base64 = false;
      _$jscoverage['assets/js/jszip.js'][278]++;
      o.binary = true;
      _$jscoverage['assets/js/jszip.js'][280]++;
      if (((! dataType) && (! (data instanceof JSZip.CompressedObject)))) {
        _$jscoverage['assets/js/jszip.js'][281]++;
        throw new Error(("The data of '" + name + "' is in an unsupported format !"));
      }
      _$jscoverage['assets/js/jszip.js'][285]++;
      if ((dataType === "arraybuffer")) {
        _$jscoverage['assets/js/jszip.js'][286]++;
        data = JSZip.utils.transformTo("uint8array", data);
      }
    }
  }
  _$jscoverage['assets/js/jszip.js'][290]++;
  return (this.files[name] = new ZipObject(name, data, o));
});
  _$jscoverage['assets/js/jszip.js'][300]++;
  var parentFolder = (function (path) {
  _$jscoverage['assets/js/jszip.js'][301]++;
  if ((path.slice(-1) == "/")) {
    _$jscoverage['assets/js/jszip.js'][302]++;
    path = path.substring(0, (path.length - 1));
  }
  _$jscoverage['assets/js/jszip.js'][304]++;
  var lastSlash = path.lastIndexOf("/");
  _$jscoverage['assets/js/jszip.js'][305]++;
  return ((lastSlash > 0)? path.substring(0, lastSlash): "");
});
  _$jscoverage['assets/js/jszip.js'][314]++;
  var folderAdd = (function (name) {
  _$jscoverage['assets/js/jszip.js'][316]++;
  if ((name.slice(-1) != "/")) {
    _$jscoverage['assets/js/jszip.js'][317]++;
    name += "/";
  }
  _$jscoverage['assets/js/jszip.js'][321]++;
  if ((! this.files[name])) {
    _$jscoverage['assets/js/jszip.js'][322]++;
    fileAdd.call(this, name, null, {dir: true});
  }
  _$jscoverage['assets/js/jszip.js'][324]++;
  return this.files[name];
});
  _$jscoverage['assets/js/jszip.js'][333]++;
  var generateCompressedObjectFrom = (function (file, compression) {
  _$jscoverage['assets/js/jszip.js'][334]++;
  var result = new (JSZip.CompressedObject)(), content;
  _$jscoverage['assets/js/jszip.js'][337]++;
  if ((file._data instanceof JSZip.CompressedObject)) {
    _$jscoverage['assets/js/jszip.js'][338]++;
    result.uncompressedSize = file._data.uncompressedSize;
    _$jscoverage['assets/js/jszip.js'][339]++;
    result.crc32 = file._data.crc32;
    _$jscoverage['assets/js/jszip.js'][341]++;
    if (((result.uncompressedSize === 0) || file.options.dir)) {
      _$jscoverage['assets/js/jszip.js'][342]++;
      compression = JSZip.compressions.STORE;
      _$jscoverage['assets/js/jszip.js'][343]++;
      result.compressedContent = "";
      _$jscoverage['assets/js/jszip.js'][344]++;
      result.crc32 = 0;
    }
    else {
      _$jscoverage['assets/js/jszip.js'][345]++;
      if ((file._data.compressionMethod === compression.magic)) {
        _$jscoverage['assets/js/jszip.js'][346]++;
        result.compressedContent = file._data.getCompressedContent();
      }
      else {
        _$jscoverage['assets/js/jszip.js'][348]++;
        content = file._data.getContent();
        _$jscoverage['assets/js/jszip.js'][350]++;
        result.compressedContent = compression.compress(JSZip.utils.transformTo(compression.compressInputType, content));
      }
    }
  }
  else {
    _$jscoverage['assets/js/jszip.js'][354]++;
    content = getBinaryData(file);
    _$jscoverage['assets/js/jszip.js'][355]++;
    if (((! content) || (content.length === 0) || file.options.dir)) {
      _$jscoverage['assets/js/jszip.js'][356]++;
      compression = JSZip.compressions.STORE;
      _$jscoverage['assets/js/jszip.js'][357]++;
      content = "";
    }
    _$jscoverage['assets/js/jszip.js'][359]++;
    result.uncompressedSize = content.length;
    _$jscoverage['assets/js/jszip.js'][360]++;
    result.crc32 = this.crc32(content);
    _$jscoverage['assets/js/jszip.js'][361]++;
    result.compressedContent = compression.compress(JSZip.utils.transformTo(compression.compressInputType, content));
  }
  _$jscoverage['assets/js/jszip.js'][364]++;
  result.compressedSize = result.compressedContent.length;
  _$jscoverage['assets/js/jszip.js'][365]++;
  result.compressionMethod = compression.magic;
  _$jscoverage['assets/js/jszip.js'][367]++;
  return result;
});
  _$jscoverage['assets/js/jszip.js'][378]++;
  var generateZipParts = (function (name, file, compressedObject, offset) {
  _$jscoverage['assets/js/jszip.js'][379]++;
  var data = compressedObject.compressedContent, utfEncodedFileName = this.utf8encode(file.name), useUTF8 = (utfEncodedFileName !== file.name), o = file.options, dosTime, dosDate;
  _$jscoverage['assets/js/jszip.js'][391]++;
  dosTime = o.date.getHours();
  _$jscoverage['assets/js/jszip.js'][392]++;
  dosTime = (dosTime << 6);
  _$jscoverage['assets/js/jszip.js'][393]++;
  dosTime = (dosTime | o.date.getMinutes());
  _$jscoverage['assets/js/jszip.js'][394]++;
  dosTime = (dosTime << 5);
  _$jscoverage['assets/js/jszip.js'][395]++;
  dosTime = (dosTime | (o.date.getSeconds() / 2));
  _$jscoverage['assets/js/jszip.js'][397]++;
  dosDate = (o.date.getFullYear() - 1980);
  _$jscoverage['assets/js/jszip.js'][398]++;
  dosDate = (dosDate << 4);
  _$jscoverage['assets/js/jszip.js'][399]++;
  dosDate = (dosDate | (o.date.getMonth() + 1));
  _$jscoverage['assets/js/jszip.js'][400]++;
  dosDate = (dosDate << 5);
  _$jscoverage['assets/js/jszip.js'][401]++;
  dosDate = (dosDate | o.date.getDate());
  _$jscoverage['assets/js/jszip.js'][404]++;
  var header = "";
  _$jscoverage['assets/js/jszip.js'][407]++;
  header += "\n\u0000";
  _$jscoverage['assets/js/jszip.js'][410]++;
  header += (useUTF8? "\u0000\b": "\u0000\u0000");
  _$jscoverage['assets/js/jszip.js'][412]++;
  header += compressedObject.compressionMethod;
  _$jscoverage['assets/js/jszip.js'][414]++;
  header += decToHex(dosTime, 2);
  _$jscoverage['assets/js/jszip.js'][416]++;
  header += decToHex(dosDate, 2);
  _$jscoverage['assets/js/jszip.js'][418]++;
  header += decToHex(compressedObject.crc32, 4);
  _$jscoverage['assets/js/jszip.js'][420]++;
  header += decToHex(compressedObject.compressedSize, 4);
  _$jscoverage['assets/js/jszip.js'][422]++;
  header += decToHex(compressedObject.uncompressedSize, 4);
  _$jscoverage['assets/js/jszip.js'][424]++;
  header += decToHex(utfEncodedFileName.length, 2);
  _$jscoverage['assets/js/jszip.js'][426]++;
  header += "\u0000\u0000";
  _$jscoverage['assets/js/jszip.js'][429]++;
  var fileRecord = (JSZip.signature.LOCAL_FILE_HEADER + header + utfEncodedFileName);
  _$jscoverage['assets/js/jszip.js'][431]++;
  var dirRecord = (JSZip.signature.CENTRAL_FILE_HEADER + "\u0014\u0000" + header + "\u0000\u0000" + "\u0000\u0000" + "\u0000\u0000" + ((file.options.dir === true)? "\u0010\u0000\u0000\u0000": "\u0000\u0000\u0000\u0000") + decToHex(offset, 4) + utfEncodedFileName);
  _$jscoverage['assets/js/jszip.js'][450]++;
  return ({fileRecord: fileRecord, dirRecord: dirRecord, compressedObject: compressedObject});
});
  _$jscoverage['assets/js/jszip.js'][461]++;
  var StringWriter = (function () {
  _$jscoverage['assets/js/jszip.js'][462]++;
  this.data = [];
});
  _$jscoverage['assets/js/jszip.js'][464]++;
  StringWriter.prototype = {append: (function (input) {
  _$jscoverage['assets/js/jszip.js'][470]++;
  input = JSZip.utils.transformTo("string", input);
  _$jscoverage['assets/js/jszip.js'][471]++;
  this.data.push(input);
}), finalize: (function () {
  _$jscoverage['assets/js/jszip.js'][478]++;
  return this.data.join("");
})};
  _$jscoverage['assets/js/jszip.js'][486]++;
  var Uint8ArrayWriter = (function (length) {
  _$jscoverage['assets/js/jszip.js'][487]++;
  this.data = new Uint8Array(length);
  _$jscoverage['assets/js/jszip.js'][488]++;
  this.index = 0;
});
  _$jscoverage['assets/js/jszip.js'][490]++;
  Uint8ArrayWriter.prototype = {append: (function (input) {
  _$jscoverage['assets/js/jszip.js'][496]++;
  if ((input.length !== 0)) {
    _$jscoverage['assets/js/jszip.js'][498]++;
    input = JSZip.utils.transformTo("uint8array", input);
    _$jscoverage['assets/js/jszip.js'][499]++;
    this.data.set(input, this.index);
    _$jscoverage['assets/js/jszip.js'][500]++;
    this.index += input.length;
  }
}), finalize: (function () {
  _$jscoverage['assets/js/jszip.js'][508]++;
  return this.data;
})};
  _$jscoverage['assets/js/jszip.js'][513]++;
  return ({load: (function (stream, options) {
  _$jscoverage['assets/js/jszip.js'][523]++;
  throw new Error("Load method is not defined. Is the file jszip-load.js included ?");
}), filter: (function (search) {
  _$jscoverage['assets/js/jszip.js'][534]++;
  var result = [], filename, relativePath, file, fileClone;
  _$jscoverage['assets/js/jszip.js'][535]++;
  for (filename in this.files) {
    _$jscoverage['assets/js/jszip.js'][536]++;
    if ((! this.files.hasOwnProperty(filename))) {
      _$jscoverage['assets/js/jszip.js'][536]++;
      continue;
    }
    _$jscoverage['assets/js/jszip.js'][537]++;
    file = this.files[filename];
    _$jscoverage['assets/js/jszip.js'][539]++;
    fileClone = new ZipObject(file.name, file._data, extend(file.options));
    _$jscoverage['assets/js/jszip.js'][540]++;
    relativePath = filename.slice(this.root.length, filename.length);
    _$jscoverage['assets/js/jszip.js'][541]++;
    if (((filename.slice(0, this.root.length) === this.root) && search(relativePath, fileClone))) {
      _$jscoverage['assets/js/jszip.js'][543]++;
      result.push(fileClone);
    }
}
  _$jscoverage['assets/js/jszip.js'][546]++;
  return result;
}), file: (function (name, data, o) {
  _$jscoverage['assets/js/jszip.js'][559]++;
  if ((arguments.length === 1)) {
    _$jscoverage['assets/js/jszip.js'][560]++;
    if ((name instanceof RegExp)) {
      _$jscoverage['assets/js/jszip.js'][561]++;
      var regexp = name;
      _$jscoverage['assets/js/jszip.js'][562]++;
      return this.filter((function (relativePath, file) {
  _$jscoverage['assets/js/jszip.js'][563]++;
  return ((! file.options.dir) && regexp.test(relativePath));
}));
    }
    else {
      _$jscoverage['assets/js/jszip.js'][566]++;
      return (this.filter((function (relativePath, file) {
  _$jscoverage['assets/js/jszip.js'][567]++;
  return ((! file.options.dir) && (relativePath === name));
}))[0] || null);
    }
  }
  else {
    _$jscoverage['assets/js/jszip.js'][571]++;
    name = (this.root + name);
    _$jscoverage['assets/js/jszip.js'][572]++;
    fileAdd.call(this, name, data, o);
  }
  _$jscoverage['assets/js/jszip.js'][574]++;
  return this;
}), folder: (function (arg) {
  _$jscoverage['assets/js/jszip.js'][583]++;
  if ((! arg)) {
    _$jscoverage['assets/js/jszip.js'][584]++;
    return this;
  }
  _$jscoverage['assets/js/jszip.js'][587]++;
  if ((arg instanceof RegExp)) {
    _$jscoverage['assets/js/jszip.js'][588]++;
    return this.filter((function (relativePath, file) {
  _$jscoverage['assets/js/jszip.js'][589]++;
  return (file.options.dir && arg.test(relativePath));
}));
  }
  _$jscoverage['assets/js/jszip.js'][594]++;
  var name = (this.root + arg);
  _$jscoverage['assets/js/jszip.js'][595]++;
  var newFolder = folderAdd.call(this, name);
  _$jscoverage['assets/js/jszip.js'][598]++;
  var ret = this.clone();
  _$jscoverage['assets/js/jszip.js'][599]++;
  ret.root = newFolder.name;
  _$jscoverage['assets/js/jszip.js'][600]++;
  return ret;
}), remove: (function (name) {
  _$jscoverage['assets/js/jszip.js'][609]++;
  name = (this.root + name);
  _$jscoverage['assets/js/jszip.js'][610]++;
  var file = this.files[name];
  _$jscoverage['assets/js/jszip.js'][611]++;
  if ((! file)) {
    _$jscoverage['assets/js/jszip.js'][613]++;
    if ((name.slice(-1) != "/")) {
      _$jscoverage['assets/js/jszip.js'][614]++;
      name += "/";
    }
    _$jscoverage['assets/js/jszip.js'][616]++;
    file = this.files[name];
  }
  _$jscoverage['assets/js/jszip.js'][619]++;
  if (file) {
    _$jscoverage['assets/js/jszip.js'][620]++;
    if ((! file.options.dir)) {
      _$jscoverage['assets/js/jszip.js'][622]++;
      (delete this.files[name]);
    }
    else {
      _$jscoverage['assets/js/jszip.js'][625]++;
      var kids = this.filter((function (relativePath, file) {
  _$jscoverage['assets/js/jszip.js'][626]++;
  return (file.name.slice(0, name.length) === name);
}));
      _$jscoverage['assets/js/jszip.js'][628]++;
      for (var i = 0; (i < kids.length); (i++)) {
        _$jscoverage['assets/js/jszip.js'][629]++;
        (delete this.files[kids[i].name]);
}
    }
  }
  _$jscoverage['assets/js/jszip.js'][634]++;
  return this;
}), generate: (function (options) {
  _$jscoverage['assets/js/jszip.js'][646]++;
  options = extend((options || {}), {base64: true, compression: "STORE", type: "base64"});
  _$jscoverage['assets/js/jszip.js'][652]++;
  JSZip.utils.checkSupport(options.type);
  _$jscoverage['assets/js/jszip.js'][654]++;
  var zipData = [], localDirLength = 0, centralDirLength = 0, writer, i;
  _$jscoverage['assets/js/jszip.js'][658]++;
  for (var name in this.files) {
    _$jscoverage['assets/js/jszip.js'][659]++;
    if ((! this.files.hasOwnProperty(name))) {
      _$jscoverage['assets/js/jszip.js'][659]++;
      continue;
    }
    _$jscoverage['assets/js/jszip.js'][660]++;
    var file = this.files[name];
    _$jscoverage['assets/js/jszip.js'][662]++;
    var compressionName = (file.compression || options.compression.toUpperCase());
    _$jscoverage['assets/js/jszip.js'][663]++;
    var compression = JSZip.compressions[compressionName];
    _$jscoverage['assets/js/jszip.js'][664]++;
    if ((! compression)) {
      _$jscoverage['assets/js/jszip.js'][665]++;
      throw new Error((compressionName + " is not a valid compression method !"));
    }
    _$jscoverage['assets/js/jszip.js'][668]++;
    var compressedObject = generateCompressedObjectFrom.call(this, file, compression);
    _$jscoverage['assets/js/jszip.js'][670]++;
    var zipPart = generateZipParts.call(this, name, file, compressedObject, localDirLength);
    _$jscoverage['assets/js/jszip.js'][671]++;
    localDirLength += (zipPart.fileRecord.length + compressedObject.compressedSize);
    _$jscoverage['assets/js/jszip.js'][672]++;
    centralDirLength += zipPart.dirRecord.length;
    _$jscoverage['assets/js/jszip.js'][673]++;
    zipData.push(zipPart);
}
  _$jscoverage['assets/js/jszip.js'][676]++;
  var dirEnd = "";
  _$jscoverage['assets/js/jszip.js'][679]++;
  dirEnd = (JSZip.signature.CENTRAL_DIRECTORY_END + "\u0000\u0000" + "\u0000\u0000" + decToHex(zipData.length, 2) + decToHex(zipData.length, 2) + decToHex(centralDirLength, 4) + decToHex(localDirLength, 4) + "\u0000\u0000");
  _$jscoverage['assets/js/jszip.js'][698]++;
  switch (options.type.toLowerCase()) {
  case "uint8array":
  case "arraybuffer":
  case "blob":
  case "nodebuffer":
    _$jscoverage['assets/js/jszip.js'][703]++;
    writer = new Uint8ArrayWriter((localDirLength + centralDirLength + dirEnd.length));
    _$jscoverage['assets/js/jszip.js'][704]++;
    break;
  case "base64":
  default:
    _$jscoverage['assets/js/jszip.js'][707]++;
    writer = new StringWriter((localDirLength + centralDirLength + dirEnd.length));
    _$jscoverage['assets/js/jszip.js'][708]++;
    break;
  }
  _$jscoverage['assets/js/jszip.js'][711]++;
  for (i = 0; (i < zipData.length); (i++)) {
    _$jscoverage['assets/js/jszip.js'][712]++;
    writer.append(zipData[i].fileRecord);
    _$jscoverage['assets/js/jszip.js'][713]++;
    writer.append(zipData[i].compressedObject.compressedContent);
}
  _$jscoverage['assets/js/jszip.js'][715]++;
  for (i = 0; (i < zipData.length); (i++)) {
    _$jscoverage['assets/js/jszip.js'][716]++;
    writer.append(zipData[i].dirRecord);
}
  _$jscoverage['assets/js/jszip.js'][719]++;
  writer.append(dirEnd);
  _$jscoverage['assets/js/jszip.js'][721]++;
  var zip = writer.finalize();
  _$jscoverage['assets/js/jszip.js'][725]++;
  switch (options.type.toLowerCase()) {
  case "uint8array":
  case "arraybuffer":
  case "nodebuffer":
    _$jscoverage['assets/js/jszip.js'][730]++;
    return JSZip.utils.transformTo(options.type.toLowerCase(), zip);
  case "blob":
    _$jscoverage['assets/js/jszip.js'][732]++;
    return JSZip.utils.arrayBuffer2Blob(JSZip.utils.transformTo("arraybuffer", zip));
  case "base64":
    _$jscoverage['assets/js/jszip.js'][736]++;
    return (options.base64? JSZip.base64.encode(zip): zip);
  default:
    _$jscoverage['assets/js/jszip.js'][738]++;
    return zip;
  }
}), crc32: (function crc32(input, crc) {
  _$jscoverage['assets/js/jszip.js'][749]++;
  if ((((typeof input) === "undefined") || (! input.length))) {
    _$jscoverage['assets/js/jszip.js'][750]++;
    return 0;
  }
  _$jscoverage['assets/js/jszip.js'][753]++;
  var isArray = (JSZip.utils.getTypeOf(input) !== "string");
  _$jscoverage['assets/js/jszip.js'][755]++;
  var table = [0, 1996959894, 3993919788, 2567524794, 124634137, 1886057615, 3915621685, 2657392035, 249268274, 2044508324, 3772115230, 2547177864, 162941995, 2125561021, 3887607047, 2428444049, 498536548, 1789927666, 4089016648, 2227061214, 450548861, 1843258603, 4107580753, 2211677639, 325883990, 1684777152, 4251122042, 2321926636, 335633487, 1661365465, 4195302755, 2366115317, 997073096, 1281953886, 3579855332, 2724688242, 1006888145, 1258607687, 3524101629, 2768942443, 901097722, 1119000684, 3686517206, 2898065728, 853044451, 1172266101, 3705015759, 2882616665, 651767980, 1373503546, 3369554304, 3218104598, 565507253, 1454621731, 3485111705, 3099436303, 671266974, 1594198024, 3322730930, 2970347812, 795835527, 1483230225, 3244367275, 3060149565, 1994146192, 31158534, 2563907772, 4023717930, 1907459465, 112637215, 2680153253, 3904427059, 2013776290, 251722036, 2517215374, 3775830040, 2137656763, 141376813, 2439277719, 3865271297, 1802195444, 476864866, 2238001368, 4066508878, 1812370925, 453092731, 2181625025, 4111451223, 1706088902, 314042704, 2344532202, 4240017532, 1658658271, 366619977, 2362670323, 4224994405, 1303535960, 984961486, 2747007092, 3569037538, 1256170817, 1037604311, 2765210733, 3554079995, 1131014506, 879679996, 2909243462, 3663771856, 1141124467, 855842277, 2852801631, 3708648649, 1342533948, 654459306, 3188396048, 3373015174, 1466479909, 544179635, 3110523913, 3462522015, 1591671054, 702138776, 2966460450, 3352799412, 1504918807, 783551873, 3082640443, 3233442989, 3988292384, 2596254646, 62317068, 1957810842, 3939845945, 2647816111, 81470997, 1943803523, 3814918930, 2489596804, 225274430, 2053790376, 3826175755, 2466906013, 167816743, 2097651377, 4027552580, 2265490386, 503444072, 1762050814, 4150417245, 2154129355, 426522225, 1852507879, 4275313526, 2312317920, 282753626, 1742555852, 4189708143, 2394877945, 397917763, 1622183637, 3604390888, 2714866558, 953729732, 1340076626, 3518719985, 2797360999, 1068828381, 1219638859, 3624741850, 2936675148, 906185462, 1090812512, 3747672003, 2825379669, 829329135, 1181335161, 3412177804, 3160834842, 628085408, 1382605366, 3423369109, 3138078467, 570562233, 1426400815, 3317316542, 2998733608, 733239954, 1555261956, 3268935591, 3050360625, 752459403, 1541320221, 2607071920, 3965973030, 1969922972, 40735498, 2617837225, 3943577151, 1913087877, 83908371, 2512341634, 3803740692, 2075208622, 213261112, 2463272603, 3855990285, 2094854071, 198958881, 2262029012, 4057260610, 1759359992, 534414190, 2176718541, 4139329115, 1873836001, 414664567, 2282248934, 4279200368, 1711684554, 285281116, 2405801727, 4167216745, 1634467795, 376229701, 2685067896, 3608007406, 1308918612, 956543938, 2808555105, 3495958263, 1231636301, 1047427035, 2932959818, 3654703836, 1088359270, 936918000, 2847714899, 3736837829, 1202900863, 817233897, 3183342108, 3401237130, 1404277552, 615818150, 3134207493, 3453421203, 1423857449, 601450431, 3009837614, 3294710456, 1567103746, 711928724, 3020668471, 3272380065, 1510334235, 755167117];
  _$jscoverage['assets/js/jszip.js'][822]++;
  if (((typeof crc) == "undefined")) {
    _$jscoverage['assets/js/jszip.js'][822]++;
    crc = 0;
  }
  _$jscoverage['assets/js/jszip.js'][823]++;
  var x = 0;
  _$jscoverage['assets/js/jszip.js'][824]++;
  var y = 0;
  _$jscoverage['assets/js/jszip.js'][825]++;
  var byte = 0;
  _$jscoverage['assets/js/jszip.js'][827]++;
  crc = (crc ^ -1);
  _$jscoverage['assets/js/jszip.js'][828]++;
  for (var i = 0, iTop = input.length; (i < iTop); (i++)) {
    _$jscoverage['assets/js/jszip.js'][829]++;
    byte = (isArray? input[i]: input.charCodeAt(i));
    _$jscoverage['assets/js/jszip.js'][830]++;
    y = ((crc ^ byte) & 255);
    _$jscoverage['assets/js/jszip.js'][831]++;
    x = table[y];
    _$jscoverage['assets/js/jszip.js'][832]++;
    crc = ((crc >>> 8) ^ x);
}
  _$jscoverage['assets/js/jszip.js'][835]++;
  return (crc ^ -1);
}), clone: (function () {
  _$jscoverage['assets/js/jszip.js'][840]++;
  var newObj = new JSZip();
  _$jscoverage['assets/js/jszip.js'][841]++;
  for (var i in this) {
    _$jscoverage['assets/js/jszip.js'][842]++;
    if (((typeof this[i]) !== "function")) {
      _$jscoverage['assets/js/jszip.js'][843]++;
      newObj[i] = this[i];
    }
}
  _$jscoverage['assets/js/jszip.js'][846]++;
  return newObj;
}), utf8encode: (function (string) {
  _$jscoverage['assets/js/jszip.js'][857]++;
  if ((JSZip.support.uint8array && ((typeof TextEncoder) === "function"))) {
    _$jscoverage['assets/js/jszip.js'][858]++;
    var u8 = TextEncoder("utf-8").encode(string);
    _$jscoverage['assets/js/jszip.js'][859]++;
    return JSZip.utils.transformTo("string", u8);
  }
  _$jscoverage['assets/js/jszip.js'][861]++;
  if (JSZip.support.nodebuffer) {
    _$jscoverage['assets/js/jszip.js'][862]++;
    return JSZip.utils.transformTo("string", new Buffer(string, "utf-8"));
  }
  _$jscoverage['assets/js/jszip.js'][867]++;
  var result = [], resIndex = 0;
  _$jscoverage['assets/js/jszip.js'][869]++;
  for (var n = 0; (n < string.length); (n++)) {
    _$jscoverage['assets/js/jszip.js'][871]++;
    var c = string.charCodeAt(n);
    _$jscoverage['assets/js/jszip.js'][873]++;
    if ((c < 128)) {
      _$jscoverage['assets/js/jszip.js'][874]++;
      result[(resIndex++)] = String.fromCharCode(c);
    }
    else {
      _$jscoverage['assets/js/jszip.js'][875]++;
      if (((c > 127) && (c < 2048))) {
        _$jscoverage['assets/js/jszip.js'][876]++;
        result[(resIndex++)] = String.fromCharCode(((c >> 6) | 192));
        _$jscoverage['assets/js/jszip.js'][877]++;
        result[(resIndex++)] = String.fromCharCode(((c & 63) | 128));
      }
      else {
        _$jscoverage['assets/js/jszip.js'][879]++;
        result[(resIndex++)] = String.fromCharCode(((c >> 12) | 224));
        _$jscoverage['assets/js/jszip.js'][880]++;
        result[(resIndex++)] = String.fromCharCode((((c >> 6) & 63) | 128));
        _$jscoverage['assets/js/jszip.js'][881]++;
        result[(resIndex++)] = String.fromCharCode(((c & 63) | 128));
      }
    }
}
  _$jscoverage['assets/js/jszip.js'][886]++;
  return result.join("");
}), utf8decode: (function (input) {
  _$jscoverage['assets/js/jszip.js'][893]++;
  var result = [], resIndex = 0;
  _$jscoverage['assets/js/jszip.js'][894]++;
  var type = JSZip.utils.getTypeOf(input);
  _$jscoverage['assets/js/jszip.js'][895]++;
  var isArray = (type !== "string");
  _$jscoverage['assets/js/jszip.js'][896]++;
  var i = 0;
  _$jscoverage['assets/js/jszip.js'][897]++;
  var c = 0, c1 = 0, c2 = 0, c3 = 0;
  _$jscoverage['assets/js/jszip.js'][901]++;
  if ((JSZip.support.uint8array && ((typeof TextDecoder) === "function"))) {
    _$jscoverage['assets/js/jszip.js'][902]++;
    return TextDecoder("utf-8").decode(JSZip.utils.transformTo("uint8array", input));
  }
  _$jscoverage['assets/js/jszip.js'][906]++;
  if (JSZip.support.nodebuffer) {
    _$jscoverage['assets/js/jszip.js'][907]++;
    return JSZip.utils.transformTo("nodebuffer", input).toString("utf-8");
  }
  _$jscoverage['assets/js/jszip.js'][910]++;
  while ((i < input.length)) {
    _$jscoverage['assets/js/jszip.js'][912]++;
    c = (isArray? input[i]: input.charCodeAt(i));
    _$jscoverage['assets/js/jszip.js'][914]++;
    if ((c < 128)) {
      _$jscoverage['assets/js/jszip.js'][915]++;
      result[(resIndex++)] = String.fromCharCode(c);
      _$jscoverage['assets/js/jszip.js'][916]++;
      (i++);
    }
    else {
      _$jscoverage['assets/js/jszip.js'][917]++;
      if (((c > 191) && (c < 224))) {
        _$jscoverage['assets/js/jszip.js'][918]++;
        c2 = (isArray? input[(i + 1)]: input.charCodeAt((i + 1)));
        _$jscoverage['assets/js/jszip.js'][919]++;
        result[(resIndex++)] = String.fromCharCode((((c & 31) << 6) | (c2 & 63)));
        _$jscoverage['assets/js/jszip.js'][920]++;
        i += 2;
      }
      else {
        _$jscoverage['assets/js/jszip.js'][922]++;
        c2 = (isArray? input[(i + 1)]: input.charCodeAt((i + 1)));
        _$jscoverage['assets/js/jszip.js'][923]++;
        c3 = (isArray? input[(i + 2)]: input.charCodeAt((i + 2)));
        _$jscoverage['assets/js/jszip.js'][924]++;
        result[(resIndex++)] = String.fromCharCode((((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63)));
        _$jscoverage['assets/js/jszip.js'][925]++;
        i += 3;
      }
    }
}
  _$jscoverage['assets/js/jszip.js'][930]++;
  return result.join("");
})});
})();
_$jscoverage['assets/js/jszip.js'][949]++;
JSZip.compressions = {"STORE": {magic: "\u0000\u0000", compress: (function (content) {
  _$jscoverage['assets/js/jszip.js'][953]++;
  return content;
}), uncompress: (function (content) {
  _$jscoverage['assets/js/jszip.js'][956]++;
  return content;
}), compressInputType: null, uncompressInputType: null}};
_$jscoverage['assets/js/jszip.js'][966]++;
JSZip.support = {arraybuffer: (function () {
  _$jscoverage['assets/js/jszip.js'][969]++;
  return (((typeof ArrayBuffer) !== "undefined") && ((typeof Uint8Array) !== "undefined"));
})(), nodebuffer: (function () {
  _$jscoverage['assets/js/jszip.js'][973]++;
  return ((typeof Buffer) !== "undefined");
})(), uint8array: (function () {
  _$jscoverage['assets/js/jszip.js'][977]++;
  return ((typeof Uint8Array) !== "undefined");
})(), blob: (function () {
  _$jscoverage['assets/js/jszip.js'][988]++;
  if (((typeof ArrayBuffer) === "undefined")) {
    _$jscoverage['assets/js/jszip.js'][989]++;
    return false;
  }
  _$jscoverage['assets/js/jszip.js'][991]++;
  var buffer = new ArrayBuffer(0);
  _$jscoverage['assets/js/jszip.js'][992]++;
  try {
    _$jscoverage['assets/js/jszip.js'][993]++;
    return (new Blob([buffer], {type: "application/zip"}).size === 0);
  }
  catch (e) {
  }
  _$jscoverage['assets/js/jszip.js'][997]++;
  try {
    _$jscoverage['assets/js/jszip.js'][998]++;
    var builder = new ((window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder))();
    _$jscoverage['assets/js/jszip.js'][1000]++;
    builder.append(buffer);
    _$jscoverage['assets/js/jszip.js'][1001]++;
    return (builder.getBlob("application/zip").size === 0);
  }
  catch (e) {
  }
  _$jscoverage['assets/js/jszip.js'][1005]++;
  return false;
})()};
_$jscoverage['assets/js/jszip.js'][1009]++;
(function () {
  _$jscoverage['assets/js/jszip.js'][1010]++;
  JSZip.utils = {string2binary: (function (str) {
  _$jscoverage['assets/js/jszip.js'][1017]++;
  var result = "";
  _$jscoverage['assets/js/jszip.js'][1018]++;
  for (var i = 0; (i < str.length); (i++)) {
    _$jscoverage['assets/js/jszip.js'][1019]++;
    result += String.fromCharCode((str.charCodeAt(i) & 255));
}
  _$jscoverage['assets/js/jszip.js'][1021]++;
  return result;
}), string2Uint8Array: (function (str) {
  _$jscoverage['assets/js/jszip.js'][1031]++;
  return JSZip.utils.transformTo("uint8array", str);
}), uint8Array2String: (function (array) {
  _$jscoverage['assets/js/jszip.js'][1042]++;
  return JSZip.utils.transformTo("string", array);
}), arrayBuffer2Blob: (function (buffer) {
  _$jscoverage['assets/js/jszip.js'][1051]++;
  JSZip.utils.checkSupport("blob");
  _$jscoverage['assets/js/jszip.js'][1053]++;
  try {
    _$jscoverage['assets/js/jszip.js'][1055]++;
    return new Blob([buffer], {type: "application/zip"});
  }
  catch (e) {
  }
  _$jscoverage['assets/js/jszip.js'][1059]++;
  try {
    _$jscoverage['assets/js/jszip.js'][1061]++;
    var builder = new ((window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder))();
    _$jscoverage['assets/js/jszip.js'][1063]++;
    builder.append(buffer);
    _$jscoverage['assets/js/jszip.js'][1064]++;
    return builder.getBlob("application/zip");
  }
  catch (e) {
  }
  _$jscoverage['assets/js/jszip.js'][1069]++;
  throw new Error("Bug : can't construct the Blob.");
}), string2Blob: (function (str) {
  _$jscoverage['assets/js/jszip.js'][1078]++;
  var buffer = JSZip.utils.transformTo("arraybuffer", str);
  _$jscoverage['assets/js/jszip.js'][1079]++;
  return JSZip.utils.arrayBuffer2Blob(buffer);
})};
  _$jscoverage['assets/js/jszip.js'][1088]++;
  function identity(input) {
    _$jscoverage['assets/js/jszip.js'][1089]++;
    return input;
}
  _$jscoverage['assets/js/jszip.js'][1090]++;
  ;
  _$jscoverage['assets/js/jszip.js'][1098]++;
  function stringToArrayLike(str, array) {
    _$jscoverage['assets/js/jszip.js'][1099]++;
    for (var i = 0; (i < str.length); (++i)) {
      _$jscoverage['assets/js/jszip.js'][1100]++;
      array[i] = (str.charCodeAt(i) & 255);
}
    _$jscoverage['assets/js/jszip.js'][1102]++;
    return array;
}
  _$jscoverage['assets/js/jszip.js'][1103]++;
  ;
  _$jscoverage['assets/js/jszip.js'][1110]++;
  function arrayLikeToString(array) {
    _$jscoverage['assets/js/jszip.js'][1120]++;
    var chunk = 65536;
    _$jscoverage['assets/js/jszip.js'][1121]++;
    var result = [], len = array.length, type = JSZip.utils.getTypeOf(array), k = 0;
    _$jscoverage['assets/js/jszip.js'][1123]++;
    while (((k < len) && (chunk > 1))) {
      _$jscoverage['assets/js/jszip.js'][1124]++;
      try {
        _$jscoverage['assets/js/jszip.js'][1125]++;
        if (((type === "array") || (type === "nodebuffer"))) {
          _$jscoverage['assets/js/jszip.js'][1126]++;
          result.push(String.fromCharCode.apply(null, array.slice(k, Math.max((k + chunk), len))));
        }
        else {
          _$jscoverage['assets/js/jszip.js'][1128]++;
          result.push(String.fromCharCode.apply(null, array.subarray(k, (k + chunk))));
        }
        _$jscoverage['assets/js/jszip.js'][1130]++;
        k += chunk;
      }
      catch (e) {
        _$jscoverage['assets/js/jszip.js'][1132]++;
        chunk = Math.floor((chunk / 2));
      }
}
    _$jscoverage['assets/js/jszip.js'][1135]++;
    return result.join("");
}
  _$jscoverage['assets/js/jszip.js'][1136]++;
  ;
  _$jscoverage['assets/js/jszip.js'][1144]++;
  function arrayLikeToArrayLike(arrayFrom, arrayTo) {
    _$jscoverage['assets/js/jszip.js'][1145]++;
    for (var i = 0; (i < arrayFrom.length); (i++)) {
      _$jscoverage['assets/js/jszip.js'][1146]++;
      arrayTo[i] = arrayFrom[i];
}
    _$jscoverage['assets/js/jszip.js'][1148]++;
    return arrayTo;
}
  _$jscoverage['assets/js/jszip.js'][1149]++;
  ;
  _$jscoverage['assets/js/jszip.js'][1152]++;
  var transform = {};
  _$jscoverage['assets/js/jszip.js'][1155]++;
  transform.string = {"string": identity, "array": (function (input) {
  _$jscoverage['assets/js/jszip.js'][1158]++;
  return stringToArrayLike(input, new Array(input.length));
}), "arraybuffer": (function (input) {
  _$jscoverage['assets/js/jszip.js'][1161]++;
  return transform.string.uint8array(input).buffer;
}), "uint8array": (function (input) {
  _$jscoverage['assets/js/jszip.js'][1164]++;
  return stringToArrayLike(input, new Uint8Array(input.length));
}), "nodebuffer": (function (input) {
  _$jscoverage['assets/js/jszip.js'][1167]++;
  return stringToArrayLike(input, new Buffer(input.length));
})};
  _$jscoverage['assets/js/jszip.js'][1172]++;
  transform.array = {"string": arrayLikeToString, "array": identity, "arraybuffer": (function (input) {
  _$jscoverage['assets/js/jszip.js'][1176]++;
  return new Uint8Array(input).buffer;
}), "uint8array": (function (input) {
  _$jscoverage['assets/js/jszip.js'][1179]++;
  return new Uint8Array(input);
}), "nodebuffer": (function (input) {
  _$jscoverage['assets/js/jszip.js'][1182]++;
  return new Buffer(input);
})};
  _$jscoverage['assets/js/jszip.js'][1187]++;
  transform.arraybuffer = {"string": (function (input) {
  _$jscoverage['assets/js/jszip.js'][1189]++;
  return arrayLikeToString(new Uint8Array(input));
}), "array": (function (input) {
  _$jscoverage['assets/js/jszip.js'][1192]++;
  return arrayLikeToArrayLike(new Uint8Array(input), new Array(input.byteLength));
}), "arraybuffer": identity, "uint8array": (function (input) {
  _$jscoverage['assets/js/jszip.js'][1196]++;
  return new Uint8Array(input);
}), "nodebuffer": (function (input) {
  _$jscoverage['assets/js/jszip.js'][1199]++;
  return new Buffer(new Uint8Array(input));
})};
  _$jscoverage['assets/js/jszip.js'][1204]++;
  transform.uint8array = {"string": arrayLikeToString, "array": (function (input) {
  _$jscoverage['assets/js/jszip.js'][1207]++;
  return arrayLikeToArrayLike(input, new Array(input.length));
}), "arraybuffer": (function (input) {
  _$jscoverage['assets/js/jszip.js'][1210]++;
  return input.buffer;
}), "uint8array": identity, "nodebuffer": (function (input) {
  _$jscoverage['assets/js/jszip.js'][1214]++;
  return new Buffer(input);
})};
  _$jscoverage['assets/js/jszip.js'][1219]++;
  transform.nodebuffer = {"string": arrayLikeToString, "array": (function (input) {
  _$jscoverage['assets/js/jszip.js'][1222]++;
  return arrayLikeToArrayLike(input, new Array(input.length));
}), "arraybuffer": (function (input) {
  _$jscoverage['assets/js/jszip.js'][1225]++;
  return transform.nodebuffer.uint8array(input).buffer;
}), "uint8array": (function (input) {
  _$jscoverage['assets/js/jszip.js'][1228]++;
  return arrayLikeToArrayLike(input, new Uint8Array(input.length));
}), "nodebuffer": identity};
  _$jscoverage['assets/js/jszip.js'][1241]++;
  JSZip.utils.transformTo = (function (outputType, input) {
  _$jscoverage['assets/js/jszip.js'][1242]++;
  if ((! input)) {
    _$jscoverage['assets/js/jszip.js'][1245]++;
    input = "";
  }
  _$jscoverage['assets/js/jszip.js'][1247]++;
  if ((! outputType)) {
    _$jscoverage['assets/js/jszip.js'][1248]++;
    return input;
  }
  _$jscoverage['assets/js/jszip.js'][1250]++;
  JSZip.utils.checkSupport(outputType);
  _$jscoverage['assets/js/jszip.js'][1251]++;
  var inputType = JSZip.utils.getTypeOf(input);
  _$jscoverage['assets/js/jszip.js'][1252]++;
  var result = (transform[inputType][outputType])(input);
  _$jscoverage['assets/js/jszip.js'][1253]++;
  return result;
});
  _$jscoverage['assets/js/jszip.js'][1262]++;
  JSZip.utils.getTypeOf = (function (input) {
  _$jscoverage['assets/js/jszip.js'][1263]++;
  if (((typeof input) === "string")) {
    _$jscoverage['assets/js/jszip.js'][1264]++;
    return "string";
  }
  _$jscoverage['assets/js/jszip.js'][1266]++;
  if ((input instanceof Array)) {
    _$jscoverage['assets/js/jszip.js'][1267]++;
    return "array";
  }
  _$jscoverage['assets/js/jszip.js'][1269]++;
  if ((JSZip.support.nodebuffer && Buffer.isBuffer(input))) {
    _$jscoverage['assets/js/jszip.js'][1270]++;
    return "nodebuffer";
  }
  _$jscoverage['assets/js/jszip.js'][1272]++;
  if ((JSZip.support.uint8array && (input instanceof Uint8Array))) {
    _$jscoverage['assets/js/jszip.js'][1273]++;
    return "uint8array";
  }
  _$jscoverage['assets/js/jszip.js'][1275]++;
  if ((JSZip.support.arraybuffer && (input instanceof ArrayBuffer))) {
    _$jscoverage['assets/js/jszip.js'][1276]++;
    return "arraybuffer";
  }
});
  _$jscoverage['assets/js/jszip.js'][1285]++;
  JSZip.utils.checkSupport = (function (type) {
  _$jscoverage['assets/js/jszip.js'][1286]++;
  var supported = true;
  _$jscoverage['assets/js/jszip.js'][1287]++;
  switch (type.toLowerCase()) {
  case "uint8array":
    _$jscoverage['assets/js/jszip.js'][1289]++;
    supported = JSZip.support.uint8array;
    _$jscoverage['assets/js/jszip.js'][1290]++;
    break;
  case "arraybuffer":
    _$jscoverage['assets/js/jszip.js'][1292]++;
    supported = JSZip.support.arraybuffer;
    _$jscoverage['assets/js/jszip.js'][1293]++;
    break;
  case "nodebuffer":
    _$jscoverage['assets/js/jszip.js'][1295]++;
    supported = JSZip.support.nodebuffer;
    _$jscoverage['assets/js/jszip.js'][1296]++;
    break;
  case "blob":
    _$jscoverage['assets/js/jszip.js'][1298]++;
    supported = JSZip.support.blob;
    _$jscoverage['assets/js/jszip.js'][1299]++;
    break;
  }
  _$jscoverage['assets/js/jszip.js'][1301]++;
  if ((! supported)) {
    _$jscoverage['assets/js/jszip.js'][1302]++;
    throw new Error((type + " is not supported by this browser"));
  }
});
})();
_$jscoverage['assets/js/jszip.js'][1309]++;
(function () {
  _$jscoverage['assets/js/jszip.js'][1315]++;
  JSZip.CompressedObject = (function () {
  _$jscoverage['assets/js/jszip.js'][1316]++;
  this.compressedSize = 0;
  _$jscoverage['assets/js/jszip.js'][1317]++;
  this.uncompressedSize = 0;
  _$jscoverage['assets/js/jszip.js'][1318]++;
  this.crc32 = 0;
  _$jscoverage['assets/js/jszip.js'][1319]++;
  this.compressionMethod = null;
  _$jscoverage['assets/js/jszip.js'][1320]++;
  this.compressedContent = null;
});
  _$jscoverage['assets/js/jszip.js'][1323]++;
  JSZip.CompressedObject.prototype = {getContent: (function () {
  _$jscoverage['assets/js/jszip.js'][1330]++;
  return null;
}), getCompressedContent: (function () {
  _$jscoverage['assets/js/jszip.js'][1338]++;
  return null;
})};
})();
_$jscoverage['assets/js/jszip.js'][1350]++;
JSZip.base64 = (function () {
  _$jscoverage['assets/js/jszip.js'][1352]++;
  var _keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
  _$jscoverage['assets/js/jszip.js'][1354]++;
  return ({encode: (function (input, utf8) {
  _$jscoverage['assets/js/jszip.js'][1357]++;
  var output = "";
  _$jscoverage['assets/js/jszip.js'][1358]++;
  var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
  _$jscoverage['assets/js/jszip.js'][1359]++;
  var i = 0;
  _$jscoverage['assets/js/jszip.js'][1361]++;
  while ((i < input.length)) {
    _$jscoverage['assets/js/jszip.js'][1363]++;
    chr1 = input.charCodeAt((i++));
    _$jscoverage['assets/js/jszip.js'][1364]++;
    chr2 = input.charCodeAt((i++));
    _$jscoverage['assets/js/jszip.js'][1365]++;
    chr3 = input.charCodeAt((i++));
    _$jscoverage['assets/js/jszip.js'][1367]++;
    enc1 = (chr1 >> 2);
    _$jscoverage['assets/js/jszip.js'][1368]++;
    enc2 = (((chr1 & 3) << 4) | (chr2 >> 4));
    _$jscoverage['assets/js/jszip.js'][1369]++;
    enc3 = (((chr2 & 15) << 2) | (chr3 >> 6));
    _$jscoverage['assets/js/jszip.js'][1370]++;
    enc4 = (chr3 & 63);
    _$jscoverage['assets/js/jszip.js'][1372]++;
    if (isNaN(chr2)) {
      _$jscoverage['assets/js/jszip.js'][1373]++;
      enc3 = (enc4 = 64);
    }
    else {
      _$jscoverage['assets/js/jszip.js'][1374]++;
      if (isNaN(chr3)) {
        _$jscoverage['assets/js/jszip.js'][1375]++;
        enc4 = 64;
      }
    }
    _$jscoverage['assets/js/jszip.js'][1378]++;
    output = (output + _keyStr.charAt(enc1) + _keyStr.charAt(enc2) + _keyStr.charAt(enc3) + _keyStr.charAt(enc4));
}
  _$jscoverage['assets/js/jszip.js'][1384]++;
  return output;
}), decode: (function (input, utf8) {
  _$jscoverage['assets/js/jszip.js'][1389]++;
  var output = "";
  _$jscoverage['assets/js/jszip.js'][1390]++;
  var chr1, chr2, chr3;
  _$jscoverage['assets/js/jszip.js'][1391]++;
  var enc1, enc2, enc3, enc4;
  _$jscoverage['assets/js/jszip.js'][1392]++;
  var i = 0;
  _$jscoverage['assets/js/jszip.js'][1394]++;
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
  _$jscoverage['assets/js/jszip.js'][1396]++;
  while ((i < input.length)) {
    _$jscoverage['assets/js/jszip.js'][1398]++;
    enc1 = _keyStr.indexOf(input.charAt((i++)));
    _$jscoverage['assets/js/jszip.js'][1399]++;
    enc2 = _keyStr.indexOf(input.charAt((i++)));
    _$jscoverage['assets/js/jszip.js'][1400]++;
    enc3 = _keyStr.indexOf(input.charAt((i++)));
    _$jscoverage['assets/js/jszip.js'][1401]++;
    enc4 = _keyStr.indexOf(input.charAt((i++)));
    _$jscoverage['assets/js/jszip.js'][1403]++;
    chr1 = ((enc1 << 2) | (enc2 >> 4));
    _$jscoverage['assets/js/jszip.js'][1404]++;
    chr2 = (((enc2 & 15) << 4) | (enc3 >> 2));
    _$jscoverage['assets/js/jszip.js'][1405]++;
    chr3 = (((enc3 & 3) << 6) | enc4);
    _$jscoverage['assets/js/jszip.js'][1407]++;
    output = (output + String.fromCharCode(chr1));
    _$jscoverage['assets/js/jszip.js'][1409]++;
    if ((enc3 != 64)) {
      _$jscoverage['assets/js/jszip.js'][1410]++;
      output = (output + String.fromCharCode(chr2));
    }
    _$jscoverage['assets/js/jszip.js'][1412]++;
    if ((enc4 != 64)) {
      _$jscoverage['assets/js/jszip.js'][1413]++;
      output = (output + String.fromCharCode(chr3));
    }
}
  _$jscoverage['assets/js/jszip.js'][1418]++;
  return output;
})});
})();
